#ifndef C_US_GESTURE_LIB_H
#define C_US_GESTURE_LIB_H

/* ========================================================================
   Ultrasound sync gesture library header file

  *//** @file CUsGestureLib.h
  This is the ultrasound CAPI wrapper for sync gesture library.

  Copyright (c) 2013-2014 Qualcomm Technologies, Inc.
  All Rights Reserved. Qualcomm Technologies, Inc. Proprietary and Confidential.
  *//*====================================================================== */

/* =========================================================================
                             Edit History

   when       who           what, where, why
   --------   --------      ------------------------------------------------
   10/30/13   LD            Created this file
   ========================================================================= */


/* =======================================================================
 *                       DEFINITIONS AND DECLARATIONS
 * ====================================================================== */
#include <Elite_CAPI.h>
#include "UltrasoundStreamMgr_Util.h"
#include "CUsGestureLib_Structs.h"
#include "us_capi_common.h"
#include "QcUsGestureLibApi.h"


class CUsGestureLib : public IUsCAPI
{

public:

     enum UsGestureIdx
      {
		  eGestureNumberOfChannels,               // [GetParam]: Number of channels
		  eGestureSamplingRate,                   // [GetParam]: Sampling rate
		  eGestureSamplesPerFrame,                // [GetParam]: Samples per frame
          eGestureRxPatternSize,                  // [GetParam]: RX pattern size in bytes

         _QIDL_PLACEHOLDER_UsGestureIdx = 0x7fffffff
      };
 
private:
    int8_t     *m_pWorkspace;          // Workspace for gesture library
    uint16_t    m_usNumberOfChannels;	// Number of channels
	uint16_t	m_usBytesPerSample;		// Bytes per sample
    uint32_t	m_ulSamplingRate;		// Sampling rate
    uint32_t   	m_ulSamplesPerFrame;    // Samples per frame 
    uint32_t    m_ulFrameDataSize;      // Frame size in bytes (header + data)
    uint32_t    m_ulWorkspaceSize;      // size of library workspace in bytes
    uint32_t    m_ulRxPatternSizeSamples; // size of RX pattern generated by library in samples
    GestureCfg *m_pGestureCfg;           // gesture algorithm configuration
	 
    // free-form header which is in the beginning of each data frame
    // TODO this typedef should be part of the ultrasound API (maybe in adsp_ultrasound_media_fmt_h?)
    typedef struct 
    {
        uint32 packetHeader;
        uint32 packetLengthBytes;
        uint32 packetNumber;
    } FreeFormHeaderType_t;

public:
   /* =======================================================================
    *                          Public Function Declarations
    * ======================================================================= */

   /**
    * Default Constructor of CUsGestureLib
    */
   CUsGestureLib ( );

   /**
    * Constructor of CUsGestureLib that creates an instance of the 
    * library 
    */
    CUsGestureLib ( ADSPResult &nRes );

   /**
    * Destructor of CUsGestureLib
    */
   virtual ~CUsGestureLib ( );

   /*************************************************************************
    * CGestureLib specific Methods
    *************************************************************************/
   int GetRxPattern(void* buffer, uint32_t bufferSize);
   int IsGestureLibBusy(uint32_t* pIsBusy);

   /*************************************************************************
    * IUsCAPI Methods
    *************************************************************************/
   int SetGetLibParam(param_data_t* pParamData);

   /*************************************************************************
    * CAudioProcLib Methods
    *************************************************************************/

   /**
    * Initialize the core encoder library
    *
    * @return     success/failure is returned
    */
   virtual int CDECL Init ( CAPI_Buf_t* pParams );

   /**
    * Re initialize the core encoder library in the case of repositioning or
    * when full initialization is not required
    *
    * @return     success/failure is returned
    */
   virtual int CDECL ReInit ( CAPI_Buf_t* pParams );

   /**
    * Gracefully exit the core encoder library
    *
    * @return     success/failure is returned
    */
   virtual int CDECL End ( void );

   /**
    * Get the value of the encoder parameters
    *
    * @param[in]   nParamIdx      Enum value of the parameter of interest
    * @param[out]  pnParamVal      Desired value of the parameter of interest
    *
    * @return  Success/fail
    */
   virtual int CDECL GetParam ( int nParamIdx, int *pParamVal );

   /**
    * Get the value of the encoder parameters
    *
    * @param[in]   nParamIdx      Enum value of the parameter of interest
    * @param[out]  nParamVal      Desired value of the parameter of interest
    *
    * @return  Success/fail
    */
   virtual int CDECL SetParam ( int nParamIdx, int nParamVal );

   /**
    * Process one frame of data. If enough samples are collected, this
    * will result in spectrum analysis as well. Otherwise, samples are only
    * collected.
    *
    * @param[in]   pInBitStream     Pointer to input bit stream
    * @param[out]  pOutSamples      Pointer to output samples
    * @param[out]  pOutParams       Pointer to output parameters
    *
    * @return     Success/failure
    */
   virtual int CDECL Process ( const CAPI_BufList_t* pIndata,
                               CAPI_BufList_t*       pOutData,
                               CAPI_Buf_t*       pOutParams );

private:
    void DefaultInit(void);
    void FreeAllocatedBuffers(void);
};

#endif /* C_US_GESTURE_LIB_H */

