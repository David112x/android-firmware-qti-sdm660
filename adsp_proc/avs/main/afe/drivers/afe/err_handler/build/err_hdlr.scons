#===============================================================================
#
# AVS AU
#
# GENERAL DESCRIPTION
#    Build script
#
# Copyright (c) 2014 by Qualcomm Technologies, Inc
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header: //components/rel/avs.adsp/2.8/afe/drivers/afe/err_handler/build/err_hdlr.scons#3 $
#  $DateTime: 2017/03/15 12:57:16 $
#  $Author: pwbldsvc $
#  $Change: 12722702 $
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
#
#===============================================================================
Import('env')

CBSP_API = [
   'BOOT',
   'DAL',
   'DEBUGTOOLS',
   'HAL',
   'MPROC',
   'POWER',
   'SERVICES',
   'SYSTEMDRIVERS',
   'BUSES',

   # needs to be last also contains wrong comdef.h
   'KERNEL',   
]

qdsp6_public_apis = [
  'QDSP6',
]
env.RequirePublicApi(qdsp6_public_apis, area='qdsp6')

#Check if internal build flavor is used, then define below compile time flag
#INTERNAL_BUILD flag is enabled for mpss flavor which are internal
if 'USES_INTERNAL_BUILD' in env:
    env.Append(CFLAGS = '-DAFE_ERR_HNDLR_INTERNAL')


env.RequirePublicApi(CBSP_API,area='core')
env.RequireRestrictedApi(['AVS','SHARED_LIBRARY_INC_PATHS'])
env.RequireProtectedApi('AVS')

env.PublishPrivateApi('AVS',[
   '${AVS_ROOT}/afe/drivers/afe/err_handler/inc',
   ])

#-------------------------------------------------------------------------------
# Setup source PATH
#-------------------------------------------------------------------------------
SRCPATH = ".."

LIBNAME = 'AFEErrHandler'

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

# Generate regular source file list
avs_reg_sources = env.GlobSourceFiles(['/src/*.cpp', '/src/*.c', '/src/*.S'], SRCPATH,posix=True)

# Generate stub source file list
avs_stub_sources = env.GlobSourceFiles(['/stub_src/*.cpp', '/stub_src/*.c', '/stub_src/*.S'], SRCPATH,posix=True)

# Genate proprietary source file list
avs_prop_sources = []

#import pdb; pdb.set_trace()
if 'USES_AVS_LIBRARY_BUILDER' in env:
   env.AddAvsLibrary(['AVS_ADSP','AVS_ADSP_USER'], '${BUILDPATH}/'+LIBNAME,
      [avs_reg_sources, avs_stub_sources, avs_prop_sources],PACK_SRC=True)	
