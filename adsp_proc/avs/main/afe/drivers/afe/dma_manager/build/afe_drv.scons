#===============================================================================
#
# AVS AU
#
# GENERAL DESCRIPTION
#    Build script
#
# Copyright (c) 2009-2017 QUALCOMM Technologies, Inc.  All Rights Reserved.
# QUALCOMM Technologies, Inc Proprietary.  Export of this technology or software is regulated
# by the U.S. Government, Diversion contrary to U.S. law prohibited.
#
#-------------------------------------------------------------------------------
#
#  $Header: //components/rel/avs.adsp/2.8/afe/drivers/afe/dma_manager/build/afe_drv.scons#14 $
#  $DateTime: 2017/10/18 14:32:11 $
#  $Author: pwbldsvc $
#  $Change: 14642167 $
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
#
#===============================================================================
Import('env')

if 'USES_ENABLE_FUNCTION_SECTIONS' in env:
   env.Append(CFLAGS = '-ffunction-sections')


CBSP_API = [
   'BOOT',
   'DAL',
   'DEBUGTOOLS',
   'HAL',
   'MPROC',
   'POWER',
   'SERVICES',
   'SYSTEMDRIVERS',

   # needs to be last also contains wrong comdef.h
   'KERNEL',   
]

env.RequirePublicApi(CBSP_API, area='core')
env.RequireRestrictedApi(['AVS','SHARED_LIBRARY_INC_PATHS'])
env.RequireProtectedApi('AVS')

env.PublishPrivateApi('AVS',[
   '${AVS_ROOT}/afe/drivers/afe/dma_manager/common/inc',
   '${AVS_ROOT}/afe/drivers/afe/dma_manager/common/src',   
   ])

#-------------------------------------------------------------------------------
# Setup source PATH
#-------------------------------------------------------------------------------
SRCPATH = ".."

LIBNAME = 'AfeDmaManager'

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

BUILD_TARGET = env.get('BUILD_ASIC')

if BUILD_TARGET in ["8992","8994","9x55","8909","8916"]:
    avs_reg_sources = env.GlobSourceFiles(['/common/src/*.cpp', '/common/src/*.c', '/hal_v1/src/*.cpp', '/hal_v2/stub_src/*.cpp', '/hal_v3/stub_src/*.cpp', 
                                           '/hal_v4/stub_src/*.cpp', '/hal_v5/stub_src/*.cpp', '/hal_v6/stub_src/*.cpp', '/hal_v7/stub_src/*.cpp'], SRCPATH,posix=True)
elif BUILD_TARGET in ["8996"]:
    avs_reg_sources = env.GlobSourceFiles(['/common/src/*.cpp', '/common/src/*.c', '/hal_v2/src/*.cpp', '/hal_v1/stub_src/*.cpp', '/hal_v3/stub_src/*.cpp',
                                           '/hal_v4/stub_src/*.cpp', '/hal_v5/stub_src/*.cpp', '/hal_v6/stub_src/*.cpp', '/hal_v7/stub_src/*.cpp'], SRCPATH,posix=True)
elif BUILD_TARGET in ["8998"]:
    avs_reg_sources = env.GlobSourceFiles(['/common/src/*.cpp', '/common/src/*.c', '/hal_v4/src/*.cpp', '/hal_v1/stub_src/*.cpp', '/hal_v2/stub_src/*.cpp',
                                           '/hal_v3/stub_src/*.cpp', '/hal_v5/stub_src/*.cpp', '/hal_v6/stub_src/*.cpp', '/hal_v7/stub_src/*.cpp'], SRCPATH,posix=True)
elif BUILD_TARGET in ["660"]:
    avs_reg_sources = env.GlobSourceFiles(['/common/src/*.cpp', '/common/src/*.c', '/hal_v5/src/*.cpp', '/hal_v1/stub_src/*.cpp', '/hal_v2/stub_src/*.cpp',
                                           '/hal_v3/stub_src/*.cpp', '/hal_v4/stub_src/*.cpp', '/hal_v6/stub_src/*.cpp', '/hal_v7/stub_src/*.cpp'], SRCPATH,posix=True)
elif BUILD_TARGET in ["845"]:
    avs_reg_sources = env.GlobSourceFiles(['/common/src/*.cpp', '/common/src/*.c', '/hal_v6/src/*.cpp', '/hal_v1/stub_src/*.cpp', '/hal_v2/stub_src/*.cpp',
                                           '/hal_v3/stub_src/*.cpp', '/hal_v4/stub_src/*.cpp', '/hal_v5/stub_src/*.cpp', '/hal_v7/stub_src/*.cpp'], SRCPATH,posix=True)										   
elif BUILD_TARGET in ["8952", "8953", "8937", "8976", "9x65", "24", "9607"]:
    avs_reg_sources = env.GlobSourceFiles(['/common/src/*.cpp', '/common/src/*.c', '/hal_v3/src/*.cpp', '/hal_v1/stub_src/*.cpp', '/hal_v2/stub_src/*.cpp',
                                           '/hal_v4/stub_src/*.cpp','/hal_v5/stub_src/*.cpp', '/hal_v6/stub_src/*.cpp', '/hal_v7/stub_src/*.cpp'], SRCPATH,posix=True)
elif BUILD_TARGET in ["670", "855","1000"]:
    avs_reg_sources = env.GlobSourceFiles(['/common/src/*.cpp', '/common/src/*.c', '/hal_v7/src/*.cpp', '/hal_v1/stub_src/*.cpp', '/hal_v2/stub_src/*.cpp',
                                           '/hal_v3/stub_src/*.cpp','/hal_v4/stub_src/*.cpp','/hal_v5/stub_src/*.cpp', '/hal_v6/stub_src/*.cpp'], SRCPATH,posix=True)
else:
    avs_reg_sources = env.GlobSourceFiles(['/common/src/*.cpp', '/common/src/*.c', '/hal_v1/src/*.cpp', '/hal_v2/src/*.cpp', '/hal_v3/src/*.cpp',
                                           '/hal_v4/src/*.cpp', '/hal_v5/src/*.cpp', '/hal_v6/src/*.cpp', '/hal_v7/src/*.cpp'], SRCPATH,posix=True)
   

# Generate stub source file list
avs_stub_sources = env.GlobSourceFiles(['/common/stub_src/*.cpp', '/common/stub_src/*.c'], SRCPATH,posix=True)

# Genate proprietary source file list
avs_prop_sources = []

#env.Append(CFLAGS = '-O0 -D_DEBUG -DDEBUG')

 #import pdb; pdb.set_trace()
if 'USES_AVS_LIBRARY_BUILDER' in env:
   env.AddAvsLibrary(['AVS_ADSP','AVS_ADSP_USER'], '${BUILDPATH}/'+LIBNAME,
      [avs_reg_sources, avs_stub_sources, avs_prop_sources], PACK_SRC=True)
