#===============================================================================
#
# AVS AU
#
# GENERAL DESCRIPTION
#    Build script
#
# Copyright (c) 2012-2016 Qualcomm Technologies, Inc.  All Rights Reserved.
# Confidential and Proprietary - Qualcomm Technologies, Inc.
#
#-------------------------------------------------------------------------------
#
#  $Header: $
#  $DateTime: $
#  $Author:  $
#  $Change:  $
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
#
#===============================================================================
Import('env')

#env.Append(CFLAGS = '-Werror')
#env.Append(CPPFLAGS = '-Werror')
#env.Append(ASMFLAGS = '-Werror')

core_public_apis = [
   'DEBUGTOOLS',
   'KERNEL',
   'POWER',
   'SERVICES',
   'MPROC',
   'SYSTEMDRIVERS',
   'DAL',
   ]

env.RequirePublicApi(core_public_apis, area='core')
env.RequireRestrictedApi(['AVS','CAPI_V2_LIBRARY_FACTORY'])
env.RequireProtectedApi('AVS')

env.PublishPrivateApi('AVS',[
   '../inc',
   '../src',
   '${AVS_ROOT}/voice/services/voice_dec/src',
   '${AVS_ROOT}/voice/services/voice_proc_tx/voice_proc_tx_sensors/inc',
   ])

#-------------------------------------------------------------------------------
# Setup source PATH
#-------------------------------------------------------------------------------
SRCPATH = ".."
LIBNAME = 'VoiceProcTx'

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

# Generate regular source file list
if env.get('hy22') == True:
   avs_sources = env.GlobSourceFiles(['src/*.cpp', 'src/*.c', 'src/*.S', 'src/public/*.cpp', 'src/public/*.c'], SRCPATH,posix=True)
else:
   avs_sources = env.GlobSourceFiles(['src/*.cpp', 'src/*.c', 'src/*.S', 'src/prop/*.cpp', 'src/prop/*.c'], SRCPATH,posix=True)

if(env.get('USES_MDM9X35_VOCODER')) == True:
   avs_sources.append('${BUILDPATH}/config/vocoderonly/vptx_config.cpp')
else:
   avs_sources.append('${BUILDPATH}/config/full/vptx_config.cpp')
print avs_sources
env.AddLibrary(['AVS_ADSP','AVS_ADSP_USER'], '${BUILDPATH}/'+LIBNAME, avs_sources)



env.LoadSoftwareUnits()
