#ifndef __VSS_ISTREAM_PRIVATE_IF_H__
#define __VSS_ISTREAM_PRIVATE_IF_H__

/*
   Copyright (c) 2010-2014, 2016 Qualcomm Technologies, Inc.
   All rights reserved.
   Confidential and Proprietary - Qualcomm Technologies, Inc.

   $Header: //components/rel/avs.adsp/2.8/vsd/inc/private/vss_istream_private_if.h#6 $
   $Author: pwbldsvc $
*/


#include "apr_comdef.h"
#include "vss_istream_public_if.h"


/****************************************************************************
 * CORE STREAM APIS                                                         *
 ****************************************************************************/

#define VSS_ISTREAM_CMD_ENABLE ( 0x00010009 )
   /**< No payload. Wait for APRV2_IBASIC_RSP_RESULT response. */


#define VSS_ISTREAM_CMD_DISABLE ( 0x0001000B )
   /**< No payload. Wait for APRV2_IBASIC_RSP_RESULT response. */


#define VSS_ISTREAM_CMD_REINIT (0x00011228)
   /**< No payload.
    * Issued to stream to flush the buffer and state.
    */

#define VSS_ISTREAM_CMD_ENCODER_RESET (0x000132BA)
   /**< No payload.
    * Issued to stream to intialize enoder and clear encoder history.    
    */

/**
  Indicates to the stream that an MVM session is attaching to it.

  @par Payload
  None.

  @return
  #APRV2_IBASIC_RSP_RESULT.

  @dependencies
  None.

  @comments
  None.
*/
#define VSS_ISTREAM_CMD_MVM_ATTACH ( 0x00012E6E )


/**
  Indicates to the stream that an MVM session is detaching from it.

  @par Payload
  None.

  @return
  #APRV2_IBASIC_RSP_RESULT.

  @dependencies
  None.

  @comments
  None.
*/
#define VSS_ISTREAM_CMD_MVM_DETACH ( 0x00012E6F )


/****************************************************************************
 * STREAM CONCURRENCY MONITORING APIS                                       *
 ****************************************************************************/

/**
  Event generated by the stream to the MVM session to which it is connected,
  notifying the MVM session that the stream's configuration has changed.
  Specifically, this event is generated under any of the following
  circumstances:
 
    - upon the stream receiving a #VSS_ISTREAM_CMD_SET_MEDIA_TYPE command
      with a different media type from that currently configured on the
      stream.
 
    - upon the stream receiving a #VSS_ISTREAM_CMD_SET_VAR_VOC_SAMPLING_RATE
      command with different sample rates from those currently configured
      on the stream.
 
    - upon the stream receiving a #VSS_ICOMMON_CMD_SET_PARAM_V2 command that
      results in a KPPS requirements change.
 
    - upon a new set of calibration data being registered with the stream.
 
  All of the above events have the effect of potentially changing the current
  KPPS requirements of the stream.

  @par Payload
  None.

  @return
  None.

  @dependencies
  None.

  @comments
  None.
*/
#define VSS_ISTREAM_EVT_RECONFIG ( 0x00012E70 )


/****************************************************************************
 * STREAM TIMING APIS                                                       *
 ****************************************************************************/

/**
  Sets voice path timing offsets on the stream.

  @par Payload
  #vss_istream_cmd_set_voice_timing_t

  @return
  #APRV2_IBASIC_RSP_RESULT.

  @dependencies
  None.

  @comments
  None.
*/
#define VSS_ISTREAM_CMD_SET_VOICE_TIMING ( 0x00012E71 )

/** @brief Type definition for #vss_istream_cmd_set_voice_timing_t.
*/
typedef struct vss_istream_cmd_set_voice_timing_t vss_istream_cmd_set_voice_timing_t;

#include "apr_pack_begin.h"

/** @brief Payload structure for the #VSS_ISTREAM_CMD_SET_VOICE_TIMING command.
*/
struct vss_istream_cmd_set_voice_timing_t
{
  uint32_t vsid;
    /**< Voice System ID as defined by DCN 80-NF711-1. */
  uint16_t vfr_mode;
    /**< Vocoder frame synchronization mode.
         @values
         - #VSS_ICOMMON_VFR_MODE_SOFT -- Soft VFR; periodicity vfr_cycle_ms.
         - #VSS_ICOMMON_VFR_MODE_HARD -- Hard VFR; a 20 ms VFR interrupt.  */
   uint32_t vfr_cycle_duration_us;
   /**< Vocoder frame reference duration in microseconds.
        If vfr_mode is #VSS_ICOMMON_VFR_MODE_HARD, then it is ignored.
        @values N*20000, where N is an integer. */
  uint16_t enc_offset;
    /**< Offset in microseconds from the VFR to deliver a Tx vocoder
         packet. Supported values:\n
      -  0 to vfr_cycle_duration_us microseconds. */
  uint16_t dec_req_offset;
    /**< The offset in microseconds from the VFR to request for an Rx vocoder
         packet. Supported values:\n
       - 0 to vfr_cycle_duration_us microseconds. */
  uint16_t dec_offset;
    /**< Offset in microseconds from the VFR to indicate the deadline to
         receive an Rx vocoder packet. Rx vocoder packets received after this
         deadline are not guaranteed to be processed. Supported values:\n
         0 to vfr_cycle_duration_us microseconds. */
  uint16_t vprx_delivery_offset;
    /**< Offset in microseconds from the VFR to indicate the start time of
         the stream RX post-processing block. Supported values:\n
         0 to vfr_cycle_duration_us microseconds. */
  uint16_t vptx_buf_start_offset;
    /**< Offset in microseconds from the VFR to indicate the start time of
         the stream RX post-processing block. Supported values:\n
         0 to vfr_cycle_duration_us microseconds. */
  uint16_t vptx_proc_start_offset;
    /**< Offset in microseconds from the VFR to indicate the start time of
         the stream RX post-processing block. Supported values:\n
         0 to vfr_cycle_duration_us microseconds. */
  uint16_t vptx_delivery_offset;
    /**< Offset in microseconds from the VFR to indicate the start time of
         the stream RX post-processing block. Supported values:\n
         0 to vfr_cycle_duration_us microseconds. */
}
#include "apr_pack_end.h"
;

/****************************************************************************
 * STREAM AVSYNC APIS                                                       *
 ****************************************************************************/

/**
  Sets the vocproc RX and TX normalized total AVSync delays.

  @par Payload
  #vss_istream_cmd_set_vocproc_avsync_delays_t

  @return
  #APRV2_IBASIC_RSP_RESULT.

  @dependencies
  None.

  @comments
  None.
*/
#define VSS_ISTREAM_CMD_SET_VOCPROC_AVSYNC_DELAYS ( 0x00012EF4 )

/** @brief Type definition for #vss_istream_cmd_set_vocproc_avsync_delays_t.
*/
typedef struct vss_istream_cmd_set_vocproc_avsync_delays_t vss_istream_cmd_set_vocproc_avsync_delays_t;

#include "apr_pack_begin.h"

/** @brief Payload structure for the #VSS_ISTREAM_CMD_SET_VOCPROC_AVSYNC_DELAYS command.
*/
struct vss_istream_cmd_set_vocproc_avsync_delays_t
{
  uint32_t vp_rx_normalized_total_delay;
    /**< Normalized total vocproc RX delay + total AFE RX delay in microseconds. */
  uint32_t vp_tx_normalized_total_delay;
    /**< Normalized total vocproc TX delay + total AFE TX delay in microseconds. */
}
#include "apr_pack_end.h"
;

/****************************************************************************
 * STREAM PROPERTY APIS                                                     *
 ****************************************************************************/

#define VSS_ISTREAM_CMD_RESYNC_CTM ( 0x00011021 )
   /**< Wait for APRV2_IBASIC_RSP_RESULT response. */


#define VSS_ISTREAM_CMD_SET_DEJITTER_MODE ( 0x0001000C )
   /**< Wait for APRV2_IBASIC_RSP_RESULT response. */

typedef struct vss_istream_cmd_set_dejitter_mode_t vss_istream_cmd_set_dejitter_mode_t;

#include "apr_pack_begin.h"
struct vss_istream_cmd_set_dejitter_mode_t
{
   uint16_t mode;
      /**<
       * Set the dejitter mode.
       *
       * 0x0000 : Default (voice call)
       * 0x0001 : Circular buffer (oldest frames dropped)
       */
   uint16_t num_frames;
      /**<
       * Set the number of frames to buffer.
       */
}
#include "apr_pack_end.h"
;


#define VSS_ISTREAM_CMD_SET_DATA_CLIENT ( 0x0001113A )
    /**< No payload. Wait for APRV2_IBASIC_RSP_RESULT response. */


/****************************************************************************
 * CDMA VOIP VOCODER APIS                                                   *
 ****************************************************************************/

#define VSS_ISTREAM_CMD_CDMA_VOIP_SET_ENC_DTX_MODE ( 0x0001000F )
   /**< Wait for APRV2_IBASIC_RSP_RESULT response. */

typedef struct vss_istream_cmd_cdma_voip_set_enc_dtx_mode_t vss_istream_cmd_cdma_voip_set_enc_dtx_mode_t;

#include "apr_pack_begin.h"
struct vss_istream_cmd_cdma_voip_set_enc_dtx_mode_t
{
   uint16_t enable;
      /**<
       * Toggle DTX on or off.
       *
       * 0x0000 : Disables DTX
       * 0xFFFF : Enables DTX
       */
   uint16_t min_interval;
      /**<
       * Set the minimum DTX update interval in number of frames.
       *
       * 0x0000 : Default (12 frames)
       * 0x**** : Number of frames
       */
   uint16_t max_interval;
      /**<
       * Set the maximum DTX update interval in number of frames.
       *
       * 0x0000 : Default (32 frames)
       * 0x**** : Number of frames
       */
   uint16_t hangover;
      /**<
       * Set the Eighth-Rate Hangover in number of frames.
       *
       * 0x0000 : Default (1 frame)
       * 0x**** : Number of frames
       */
}
#include "apr_pack_end.h"
;

/****************************************************************************
 * OPERATING MODE EVENTS                                                    *
 ****************************************************************************/

/**
  Event generated by the stream to the MVM session to which it is connected,
  notifying the MVM session of the vocoder's operating mode for both the Tx
  and Rx path for the media ID currently configured on the stream.

  Specifically, this event is generated under any of the following
  circumstances:

    - upon the stream receiving a #VSS_ISTREAM_CMD_MVM_ATTACH command.

    - upon the stream receiving a #VSS_ISTREAM_CMD_SET_MEDIA_TYPE command.

    - upon the stream detecting that the vocoder operating mode has changed for
      the current media ID configured on the stream.

  @par Payload
  #vss_istream_evt_voc_operating_mode_update_t

  @return
  None.

  @dependencies
  None.

  @comments
  None.
*/
#define VSS_ISTREAM_EVT_VOC_OPERATING_MODE_UPDATE ( 0x000130B3 )

/** @brief Type definition for #vss_istream_evt_voc_operating_mode_update_t.
*/
typedef struct vss_istream_evt_voc_operating_mode_update_t vss_istream_evt_voc_operating_mode_update_t;

#include "apr_pack_begin.h"

/** @brief Payload structure for the
    #VSS_ISTREAM_EVT_VOC_OPERATING_MODE_UPDATE event.
*/
struct vss_istream_evt_voc_operating_mode_update_t
{
  uint32_t rx_mode;
    /** Rx vocoder operating mode. Supported values: \n
        see @latexonly \hyperref[cal_voc_op_mode]{Calibration Vocoder Operating
        Modes}@endlatexonly. */
  uint32_t tx_mode;
    /** Tx vocoder operating mode. Supported values: \n
        see @latexonly \hyperref[cal_voc_op_mode]{Calibration Vocoder Operating
        Modes}@endlatexonly. */
}
#include "apr_pack_end.h"
;

#endif /* __VSS_ISTREAM_PRIVATE_IF_H__ */

