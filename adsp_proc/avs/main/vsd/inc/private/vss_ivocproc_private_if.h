#ifndef __VSS_IVOCPROC_PRIVATE_IF_H__
#define __VSS_IVOCPROC_PRIVATE_IF_H__

/*
   Copyright (c) 2010-2013, 2016-2018 Qualcomm Technologies, Inc.
   All rights reserved.
   Confidential and Proprietary - Qualcomm Technologies, Inc.

   $Header: //components/rel/avs.adsp/2.8/vsd/inc/private/vss_ivocproc_private_if.h#9 $
   $Author: pwbldsvc $
*/


#include "apr_comdef.h"
#include "vss_ivocproc_public_if.h"


/****************************************************************************
 * CORE VOCPROC APIS                                                        *
 ****************************************************************************/

#define VSS_IVOCPROC_CMD_MVM_ENABLE ( 0x00011187 )
  /**< No payload. Wait for APRV2_IBASIC_RSP_RESULT response. */


#define VSS_IVOCPROC_CMD_MVM_DISABLE ( 0x00011188 )
  /**< No payload. Wait for APRV2_IBASIC_RSP_RESULT response. */


/**
  Indicates to the vocproc that an MVM session is attaching to it.

  @par Payload
  None.

  @return
  #APRV2_IBASIC_RSP_RESULT.

  @dependencies
  None.

  @comments
  None.
*/
#define VSS_IVOCPROC_CMD_MVM_ATTACH ( 0x00012E72 )


/**
  Indicates to the vocproc that an MVM session is detaching from it.

  @par Payload
  None.

  @return
  #APRV2_IBASIC_RSP_RESULT.

  @dependencies
  None.

  @comments
  None.
*/
#define VSS_IVOCPROC_CMD_MVM_DETACH ( 0x00012E73 )


#define VSS_IVOCPROC_CMD_ATTACH_STREAM ( 0x000110F0 )
   /**<
    * Attach a stream to the vocproc.
    * If command is successful the reply will be
    * VSS_IVOCPROC_ATTACH_STREAM_RSP with VPM handle. If command fails
    * the reply will be APRV2_IBASIC_RSP_RESULT with failure code.
    */

typedef struct vss_ivocproc_cmd_attach_stream_t vss_ivocproc_cmd_attach_stream_t;

#include "apr_pack_begin.h"
struct vss_ivocproc_cmd_attach_stream_t
{
   uint16_t direction;
      /**<
       * Stream direction.
       *
       * 0 : TX only
       * 1 : RX only
       * 2 : TX and RX
       */
}
#include "apr_pack_end.h"
;

#define VSS_IVOCPROC_RSP_ATTACH_STREAM ( 0x000110F1 )
   /**< Response to VSS_IVOCPROC_CMD_ATTACH_STREAM. */

typedef struct vss_ivocproc_rsp_attach_detach_stream_t vss_ivocproc_rsp_attach_detach_stream_t;

#include "apr_pack_begin.h"
struct vss_ivocproc_rsp_attach_detach_stream_t
{
   uint32_t direction;
      /**<
       * Vocproc direction.
       *
       * 0 : TX only
       * 1 : RX only
       * 2 : TX and RX
       */
   uint32_t mixer_inport_mask;
      /**< VMX inport mask */

   uint32_t mixer_outport_mask;
      /**< VMX outport mask */
      
   uint32_t tx_port_id;
   	  /**< Tx port ID */
   
   uint32_t rx_port_id;
	 /**< Rx port ID */
}
#include "apr_pack_end.h"
;


#define VSS_IVOCPROC_CMD_DETACH_STREAM ( 0x000110F2 )
   /**< No payload. Wait for APRV2_IBASIC_RSP_RESULT response. */

#define VSS_IVOCPROC_RSP_DETACH_STREAM ( 0x00012E4E )
   /**< Response to VSS_IVOCPROC_CMD_ATTACH_STREAM. */

typedef struct vss_ivocproc_rsp_detach_stream_t vss_ivocproc_rsp_detach_stream_t;

#include "apr_pack_begin.h"
struct vss_ivocproc_rsp_detach_stream_t
{
   uint16_t vdsp_session_handle;
      /**< Handle to the VDSP session. */
   uint16_t direction;
      /**<
       * Vocproc direction.
       *
       * 0 : TX only
       * 1 : RX only
       * 2 : TX and RX
       */
}
#include "apr_pack_end.h"
;

#define VSS_IVOCPROC_CMD_REINIT ( 0x00012E15 )
   /**<
    * No payload.
    * Issued to the vocproc to flush the buffer and state.
    */

/****************************************************************************
 * VOCPROC CONCURRENCY MONITORING APIS                                      *
 ****************************************************************************/

/**
  Event generated by the vocproc to the MVM session to which it is connected,
  notifying the MVM that the vocproc's configuration has changed. Specifically,
  this event is generated under any of the following circumstances:

    - upon the vocproc receiving a #VSS_IVOCPROC_CMD_SET_DEVICE_V2 command
      with a different RX or TX topology ID from the one currently configured
      on the vocproc.

    - upon the vocproc receiving a #VSS_IVOCPROC_CMD_SET_SAMPLING_RATE
      command with a different RX or TX sample rate from that currently
      configured on the vocproc.

    - upon the vocproc receiving a #VSS_ICOMMON_CMD_SET_PARAM_V2 command that
      results in a KPPS requirements change.

    - upon a new set of calibration data being registered with the vocproc.

  All of the above events have the effect of potentially changing the current
  KPPS requirements of the vocproc.

  @par Payload
  None.

  @return
  None.

  @dependencies
  None.

  @comments
  None.
*/
#define VSS_IVOCPROC_EVT_RECONFIG ( 0x00012E74 )


/****************************************************************************
 * VOCPROC TIMING APIS                                                      *
 ****************************************************************************/

/**
  Sets voice path timing offsets on the vocproc.

  @par Payload
  #vss_ivocproc_cmd_set_voice_timing_t

  @return
  #APRV2_IBASIC_RSP_RESULT.

  @dependencies
  None.

  @comments
  None.
*/
#define VSS_IVOCPROC_CMD_SET_VOICE_TIMING ( 0x00012E75 )

/** @brief Type definition for #vss_ivocproc_cmd_set_timing_t.
*/
typedef struct vss_ivocproc_cmd_set_voice_timing_t vss_ivocproc_cmd_set_voice_timing_t;

#include "apr_pack_begin.h"

/** @brief Payload structure for the #VSS_IVOCPROC_CMD_SET_VOICE_TIMING command.
*/
struct vss_ivocproc_cmd_set_voice_timing_t
{
  uint32_t vsid;
    /**< Voice System ID as defined by DCN 80-NF711-1. */
  uint16_t vfr_mode;
    /**< Vocoder frame synchronization mode.
         @values
         - #VSS_ICOMMON_VFR_MODE_SOFT -- Soft VFR; periodicity vfr_cycle_ms.
         - #VSS_ICOMMON_VFR_MODE_HARD -- Hard VFR; a 20 ms VFR interrupt.  */
  uint32_t vfr_cycle_duration_us;
    /**< Vocoder frame reference duration in microseconds.
        If vfr_mode is #VSS_ICOMMON_VFR_MODE_HARD, then it is ignored.
        @values N*20000, where N is an integer. */
  uint16_t enc_offset;
    /**< Offset in microseconds from the VFR to deliver a Tx vocoder
         packet. Supported values:\n
      -  0 to vfr_cycle_duration_us microseconds. */
  uint16_t dec_req_offset;
    /**< The offset in microseconds from the VFR to request for an Rx vocoder
         packet. Supported values:\n
       - 0 to vfr_cycle_duration_us microseconds. */
  uint16_t dec_offset;
    /**< Offset in microseconds from the VFR to indicate the deadline to
         receive an Rx vocoder packet. Rx vocoder packets received after this
         deadline are not guaranteed to be processed. Supported values:\n
         0 to vfr_cycle_duration_us microseconds. */
  uint16_t vprx_delivery_offset;
    /**< Offset in microseconds from the VFR to indicate the start time of
         the stream RX post-processing block. Supported values:\n
         0 to vfr_cycle_duration_us microseconds. */
  uint16_t vptx_buf_start_offset;
    /**< Offset in microseconds from the VFR to indicate the start time of
         the stream RX post-processing block. Supported values:\n
         0 to vfr_cycle_duration_us microseconds. */
  uint16_t vptx_proc_start_offset;
    /**< Offset in microseconds from the VFR to indicate the start time of
         the stream RX post-processing block. Supported values:\n
         0 to vfr_cycle_duration_us microseconds. */
  uint16_t vptx_delivery_offset;
    /**< Offset in microseconds from the VFR to indicate the start time of
         the stream RX post-processing block. Supported values:\n
         0 to vfr_cycle_duration_us microseconds. */
}
#include "apr_pack_end.h"
;

/****************************************************************************
 * VOCPROC AVSYNC APIS                                                      *
 ****************************************************************************/

/**
  Gets the RX and TX path algorithmic AVSync delays.

  @par Payload
  None.

  @return
  #VSS_IVOCPROC_RSP_GET_AVSYNC_DELAYS -- In case of success.
  #APRV2_IBASIC_RSP_RESULT -- In case of failure.

  @dependencies
  For the delay values to be accurate, this command must be issued in run
  state.

  @comments
  This command returns the vocproc algorithmic delays + AFE processing
  delays + AFE algorithmic delays. The AFE delays are not valid until
  the vocproc is in run state, hence the above dependency.
*/
#define VSS_IVOCPROC_CMD_GET_AVSYNC_DELAYS ( 0x00012EF2 )


/**
  Response to the #VSS_IVOCPROC_CMD_GET_AVSYNC_DELAYS command.

  @par Payload
  #vss_ivocproc_rsp_get_avsync_delays_t

  @return
  None.

  @dependencies
  None.

  @comments
  None.
*/
#define VSS_IVOCPROC_RSP_GET_AVSYNC_DELAYS ( 0x00012EF3 )

/** @brief Type definition for #vss_ivocproc_rsp_get_avsync_delays_t.
*/
typedef struct vss_ivocproc_rsp_get_avsync_delays_t vss_ivocproc_rsp_get_avsync_delays_t;

#include "apr_pack_begin.h"

/** @brief Payload structure for the #VSS_IVOCPROC_RSP_GET_AVSYNC_DELAYS command response.
*/
struct vss_ivocproc_rsp_get_avsync_delays_t
{
  uint32_t vp_rx_algorithmic_delay;
    /**< Vocproc RX algorithmic delay + AFE RX processing delay + AFE RX algorithmic delay
         in microseconds. */
  uint32_t vp_tx_algorithmic_delay;
    /**< Vocproc TX algorithmic delay + AFE TX processing delay + AFE TX algorithmic delay
         in microseconds. */
}
#include "apr_pack_end.h"
;

/****************************************************************************
 * NOTIFICATIONS ISSUED BY THE VOCPROC TO ITS CLIENTS                       *
 ****************************************************************************/

#define VSS_IVOCPROC_EVT_READY ( 0x000110F3 )
   /**<
    * No payload.
    * Issued to all attached streams when vocproc transitions to run state.
    */


#define VSS_IVOCPROC_EVT_NOT_READY ( 0x000110F4 )
   /**<
    * No payload.
    * Issued to all attached streams when vocproc transitions to stop state.
    */


#define VSS_IVOCPROC_EVT_GOING_AWAY ( 0x000110F5 )
   /**<
    * No payload.
    * Issued to all attached streams when vocproc is destroyed. vocproc will
    * wait (with a timeout) for VSS_IVOCPROC_RSP_GO_AWAY response from each
    * each attached stream before destroying.
    */


#define VSS_IVOCPROC_RSP_GO_AWAY ( 0x000110F6 )
   /**<
    * No payload.
    * Issued by attached stream to this vocproc in response to
    * VSS_IVOCPROC_EVT_GOING_AWAY.
    */

#define VSS_IVOCPROC_EVT_AFE_PORT_INFO ( 0x000110FA )
   /**<
    * Issued by Vocproc to all attached streams.
      This will inform all connected streams, the AFE endpoint to 
      which Vocproc is routing the data
    */

typedef struct vss_ivocproc_evt_afe_port_info_t vss_ivocproc_evt_afe_port_info_t;

#include "apr_pack_begin.h"
struct vss_ivocproc_evt_afe_port_info_t
{
   uint32_t is_pcie_port;
      /**< Flag to identify if stream needs to connect 
           directly to AFE bypassing vocproc */
   uint32_t rx_port_id;
      /**< AFE RX port connected to vocproc */
   uint32_t tx_port_id;
      /**< AFE TX port connected to vocproc */
   uint32_t ec_ref_port_id;
      /**< AFE EC REF port connected to vocproc */
}
#include "apr_pack_end.h"
;

#endif /* __VSS_IVOCPROC_PRIVATE_IF_H__ */

