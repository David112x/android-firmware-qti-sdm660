#===============================================================================
#
# AVS AU
#
# GENERAL DESCRIPTION
#    Build script
#
# Copyright (c) 2012-2016 Qualcomm Technologies, Inc.  All Rights Reserved.
# Confidential and Proprietary - Qualcomm Technologies, Inc.
#
#-------------------------------------------------------------------------------
#
#  $Header: //components/rel/avs.adsp/2.8/aud/services/dynamic_svcs/utils/build/utils.scons#1 $
#  $DateTime: 2017/07/07 01:42:40 $
#  $Author: pwbldsvc $
#  $Change: 13771160 $
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
#
#===============================================================================
Import('env')

if 'USES_ENABLE_FUNCTION_SECTIONS' in env:
   env.Append(CFLAGS = '-ffunction-sections')

core_public_apis = [
   'DEBUGTOOLS',
   'SERVICES',
   'KERNEL',
   ]

core_public_apis = [
   'DAL',
   'DEBUGTOOLS',
   'SERVICES',
   'KERNEL',
   ]

env.RequirePublicApi(core_public_apis, area='core')
env.RequireRestrictedApi(['AVS', 'MODULE_INTERFACES_UTILS', 'SHARED_LIBRARY_INC_PATHS', 'CAPI_V2_LIBRARY_FACTORY'])
env.RequireProtectedApi('AVS')
env.RequirePublicApi([
  'ADSP_AMDB',
])

env.Append(CFLAGS = ' -Werror ')


platform_public_apis = [
    'QAIC',
    'STDDEF',
    'HAPSDK'
    ]

env.RequirePublicApi(platform_public_apis, area='platform') # This has to be the last include command, so that the Elite_CAPI.h and Elite_APPI.h are not overridden

#-------------------------------------------------------------------------------
# Setup source PATH
#-------------------------------------------------------------------------------
SRCPATH = '..'
LIBNAME = 'audio_dynamic_services_utils'
#import pdb; pdb.set_trace()

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

# Generate regular source file list
avs_reg_sources = env.GlobSourceFiles(['/src/*.cpp', '/src/*.c', '/src/*.S',], SRCPATH, posix=True)

# Generate stub source file list
avs_stub_sources = []

bucket=['AVS_ADSP','AVS_ADSP_USER']
env.AddLibrary(bucket, '${BUILDPATH}/'+LIBNAME,avs_reg_sources)


