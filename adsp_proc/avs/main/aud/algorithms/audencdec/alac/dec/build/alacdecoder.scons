#===============================================================================
#
# alac decoder entry folder
#
# GENERAL DESCRIPTION
#    Build script
#
# Copyright (c) 2014-2015 Qualcomm Technologies, Inc.  All Rights Reserved.
# Confidential and Proprietary - Qualcomm Technologies, Inc.
#
#-------------------------------------------------------------------------------
#
#  $Header: //components/rel/avs.adsp/2.8/aud/algorithms/audencdec/alac/dec/build/alacdecoder.scons#2 $
#  $DateTime: 2017/05/04 15:39:06 $
#  $Author: pwbldsvc $
#  $Change: 13218364 $
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
#
#===============================================================================
Import('env')

### below flags have an affect only on shared libs.
# addition of this flag makes sure that all .so file's C & C++ functions have 'hidden' visibility (not 'default')
# this ensures that those symbols don't get mentioned in PLT and thus it saves some call overhead.
# to override this behaviour add below to the functions: __attribute__((visibility("default")))
# to make assembly functions hidden use ".hidden <func_name>".
# marking functions as hidden also makes sure the code gets stripped off if not used.
env.Append(CFLAGS = ' -fvisibility=hidden ')
env.Append(CPPFLAGS = ' -fvisibility=hidden ')

LIBNAME = 'AlacDecoderModule'

items = env.GetSoftwareUnits()
 
x = items.get('LIBS')

avs_reg_sources = []
avs_stub_sources = []
avs_prop_sources = list(x)


for i in x: 
    print i.name
    if i.name == 'CAlacDecoderLib.lib':
        avs_reg_sources.append(i)
        avs_prop_sources.remove(i)
    if "_stub" in i.name:
        avs_stub_sources.append(i)
        avs_prop_sources.remove(i)

core_public_apis = [
 'DEBUGTOOLS',
 'SERVICES',
 'KERNEL',
]


env.RequirePublicApi(core_public_apis, area='core')
env.RequireRestrictedApi(['SHARED_LIBRARY_INC_PATHS'])
    
platform_public_apis = [
  'STDDEF', # AEEDef
  'HAPSDK', # HAP_debug, farf etc
    ]
   
#import pdb; pdb.set_trace()

    
# This has to be the last include command, so that the Elite_CAPI.h and Elite_APPI.h are not overridden
env.RequirePublicApi(platform_public_apis, area='platform')

if 'USES_AVS_SHARED_LIBS' in env:
    SRCPATH='..'
    env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)
    env.AddAvsSharedLibrary(['AVS_SHARED'],'${BUILDPATH}/'+LIBNAME, [avs_reg_sources, avs_stub_sources, avs_prop_sources],build_type='MOD')
else:
    if 'USES_AVS_LIBRARY_BUILDER' in env:
        x = env.AddAvsLibrary(['AVS_ADSP','AVS_ADSP_USER'], '${BUILDPATH}/'+LIBNAME,
        [avs_reg_sources, avs_stub_sources, avs_prop_sources],'MOD')

#import pdb; pdb.set_trace()




