#=============================================================================
# INTERPROCESSOR INTERRUPT LIBRARY
#
#
#=============================================================================
# $Header: //components/rel/core.qdsp6/1.0.c2/systemdrivers/ipcint/build/ipcint.scons#1 $
#=============================================================================
#            Copyright 2016 Qualcomm Technologies Incorporated.
#                           All Rights Reserved.
#                         QUALCOMM Proprietary/GTDR
#=============================================================================

import os
Import('env')
env = env.Clone()

#-----------------------------------------------------------------------------
# Define paths
#-----------------------------------------------------------------------------

SRCPATH = "${BUILD_ROOT}/core/systemdrivers/ipcint"

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#-------------------------------------------------------------------------------
# Internal depends within CoreBSP
#-------------------------------------------------------------------------------

CBSP_API = [
  'SERVICES',
  'SYSTEMDRIVERS',
  'HAL',
  'DAL',

  # Must be last due to comdef.h issues
  'KERNEL'
]

env.RequirePublicApi(CBSP_API)
env.RequireRestrictedApi(CBSP_API)

env.PublishPrivateApi("SYSTEMDRIVERS_IPCINT", [
 	   "${INC_ROOT}/core/systemdrivers/ipcint/src/${CHIPSET}/${IMAGE}/"
 	])
 	 
#-------------------------------------------------------------------------------
# Define sources
#-------------------------------------------------------------------------------

IPCINT_SOURCES = [
  '${BUILDPATH}/src/${CHIPSET}/${IMAGE}/DalIPCInt.c',
  '${BUILDPATH}/src/${CHIPSET}/${IMAGE}/DalIPCIntInfo.c',
  '${BUILDPATH}/hw/${CHIPSET}/${IMAGE}/DalIPCInt_ConfigData.c', 
  '${BUILDPATH}/src/${CHIPSET}/${IMAGE}/DalIPCIntFwk.c'
  
]

#-------------------------------------------------------------------------------
# Define objets
#-------------------------------------------------------------------------------

ipcint_objs = env.Object([IPCINT_SOURCES])
ipcint_lib = env.Library('${BUILDPATH}/DalIPCInt', ipcint_objs)

#-------------------------------------------------------------------------------
# Add Libraries to image
#-------------------------------------------------------------------------------

env.AddLibsToImage(
  ['QDSP6_SW_IMAGE', 'CBSP_QDSP6_SW_IMAGE'],
  [ipcint_lib])


#---------------------------------------------------------------------------
# Invoke Test APP for IPCInt (currently commented out)
#---------------------------------------------------------------------------
#-------------------------------------------------------------------------------
# RCInit Dependencies
#-------------------------------------------------------------------------------
#env.Append(CCFLAGS = " -DIPCINT_SEND_TEST")
#env.Append(CCFLAGS = " -DIPCINT_RECEIVE_TEST")

#if 'USES_RCINIT' in env:
#  RCINIT_IMG = ['CORE_MODEM', 'CORE_QDSP6_SW']
#  env.AddRCInitFunc(       # Code Fragment in TMC: NO
#  RCINIT_IMG,              # define TMC_RCINIT_INIT_IPCINT_TEST
#  {
#    'sequence_group'             : 'RCINIT_GROUP_0',       # required
#    'init_name'                  : 'IPCInt',              # required
#    'init_function'              : 'IPCInt_Test',         # required
#    'dependencies'               : ['dalsys','npa']
#  })

#---------------------------------------------------------------------------
# Invoke document generation SConscript
#---------------------------------------------------------------------------

if os.path.exists(env['BUILD_ROOT'] + '/core/api/systemdrivers/docsrc/ipcint/SConscript') :
  env.SConscript(
    '${BUILD_ROOT}/core/api/systemdrivers/docsrc/ipcint/SConscript',
    exports='env')


if 'USES_DEVCFG' in env:
  DEVCFG_IMG = ['DAL_DEVCFG_IMG']
  env.AddDevCfgInfo(DEVCFG_IMG,
  {
    '8998_xml'   : ['${BUILD_ROOT}/core/systemdrivers/ipcint/config/${CHIPSET}/${IMAGE}/DalIPCInt.xml'],
    '660_xml'    : ['${BUILD_ROOT}/core/systemdrivers/ipcint/config/${CHIPSET}/${IMAGE}/DalIPCInt.xml']
  })
