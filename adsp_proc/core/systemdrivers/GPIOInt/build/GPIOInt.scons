#===============================================================================
#
# GPIO INTERRUPT CONTROLLER Libs
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2016 by Qualcomm Technologies Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header: //components/rel/core.qdsp6/1.0.c2/systemdrivers/GPIOInt/build/GPIOInt.scons#1 $
#  $DateTime: 2020/02/10 01:57:30 $
#  $Author: pwbldsvc $
#  
#                      EDIT HISTORY FOR FILE
#                      
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#  
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 11/08/16   stu     Adding uGPIOIntQDI_Init in RCINIT for root PD
# 10/29/16   stu     Initial version for core.qdsp6.1.0
#===============================================================================

import os

Import('env')
env = env.Clone()

if env['IMAGE'] == "cdsp":
  Return()


#-------------------------------------------------------------------------------
# Source PATH
#-------------------------------------------------------------------------------
SRCPATH = ".."

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#-------------------------------------------------------------------------------
# Image Definitions
#-------------------------------------------------------------------------------
GPIOINT_USER_IMAGES = ['CORE_ADSP_USER','CORE_SLPI_USER']
GPIOINT_KERNEL_IMAGES = ['CORE_ADSP_ROOT','CORE_SLPI_ROOT']

#-------------------------------------------------------------------------------
# External depends within CoreBSP
#-------------------------------------------------------------------------------
env.RequireExternalApi([
  'CS_INC',
])

#-------------------------------------------------------------------------------
# Internal depends within CoreBSP
#-------------------------------------------------------------------------------
env.Append(CPPPATH = [
   "${INC_ROOT}/core/systemdrivers/GPIOInt/inc",
   "${INC_ROOT}/core/systemdrivers/GPIOInt/src/kernel",
   "${INC_ROOT}/core/systemdrivers/GPIOInt/src/kernel/uimage",
   "${INC_ROOT}/core/systemdrivers/GPIOInt/config/kernel",
   "${INC_ROOT}/core/api/systemdrivers",
   "${INC_ROOT}/core/systemdrivers/GPIOInt/src/user",
   "${INC_ROOT}/core/systemdrivers/GPIOInt/config/user",
   "${INC_ROOT}/core/systemdrivers/GPIOInt/src/user/uimage",
   "${INC_ROOT}/core/systemdrivers/hal/aonint/inc",
   "${INC_ROOT}/core/power/mpm/inc/dal",
   "${INC_ROOT}/core/systemdrivers/GPIOMgr/inc",
])

env.PublishPrivateApi('SYSTEMDRIVERS_GPIOINT', [
   "${INC_ROOT}/core/systemdrivers/hal/gpioint/inc",
])


CBSP_API = [
  'HAL',
  'DAL',
  'DEBUGTOOLS',
  'MPROC',
  'POWER',
  'SERVICES',
  'SYSTEMDRIVERS_8660',
  'SYSTEMDRIVERS',
  'KERNEL',
]
 
env.RequirePublicApi(CBSP_API)
env.RequireRestrictedApi(CBSP_API)

# turned off until we have mpm support.
env.Append(CCFLAGS = " -DGPIOINT_USE_MPM")
env.Append(CCFLAGS = " -DGPIOINT_USE_NPA")
env.Append(CPPDEFINES = ["GPIOINT_NUM_PDS=3"])

if 'USES_SENSOR_IMG' not in env and 'USES_AUDIO_IMG' not in env:
  env.Append(CCFLAGS = " -DGPIOINT_REG_SUMMARY")

#-------------------------------------------------------------------------------
# Sources, libraries
#-------------------------------------------------------------------------------
GPIO_INTERRUPT_KERNEL_SOURCES = [
   '${BUILDPATH}/src/kernel/GPIOIntFwk.c',
   '${BUILDPATH}/src/kernel/GPIOIntInfo.c',
   '${BUILDPATH}/src/kernel/GPIOInt.c',
   '${BUILDPATH}/src/kernel/GPIOInt_DirConn.c',
   '${BUILDPATH}/src/kernel/GPIOInt_Summary.c',
]

GPIO_INTERRUPT_KERNEL_SUM_SOURCES = [
   '${BUILDPATH}/src/kernel/GPIOInt_SummaryKernel.c',
   '${BUILDPATH}/src/kernel/GPIOIntQDI.c',
]

GPIO_INTERRUPT_USER_SUM_SOURCES = [
   '${BUILDPATH}/src/kernel/GPIOInt_SummaryUser.c',
]

if 'USES_SENSOR_IMG' in env or 'USES_AUDIO_IMG' in env:
  GPIO_INTERRUPT_KERNEL_SOURCES.extend(['${BUILDPATH}/config/kernel/${CHIPSET}/${IMAGE}/GPIOInt_ConfigData.c'])
	
GPIO_USERPD_UIMAGE = [
 '${BUILDPATH}/src/user/uimage/uGPIOIntUser.c',
]

GPIO_USERPD_UIMAGE_ISLAND = [
 '${BUILDPATH}/src/user/uimage/uGPIOIntUserIsland.c',
 '${BUILDPATH}/src/user/uimage/config/'+ env['CHIPSET'] + '/uGPIOIntConfigData.c',
]

GPIO_GUESTOS_UIMAGE = [
     '${BUILDPATH}/src/kernel/uimage/uGPIOIntKernel.c',
     '${BUILDPATH}/src/kernel/uimage/uGPIOIntQDI.c',
]
GPIO_GUESTOS_UIMAGE_ISLAND = [
     '${BUILDPATH}/src/kernel/uimage/uGPIOIntKernelIsland.c',
]

#-------------------------------------------------------------------------------
# RCInit Dependencies
#-------------------------------------------------------------------------------

if 'USES_RCINIT' in env:
  if ('USES_SENSOR_IMG' in env) or ('USES_AUDIO_IMG' in env):
    RCINIT_IMG = GPIOINT_USER_IMAGES
    env.AddRCInitFunc(       # Code Fragment in TMC: NO
      RCINIT_IMG,              # define TMC_RCINIT_INIT_GPIOINT_INIT
      {
        'sequence_group'             : 'RCINIT_GROUP_0',       # required
        'init_name'                  : 'GPIOInt',              # required
        'init_function'              : 'GPIOInt_Init',         # required
        'dependencies'               : ['dalsys','npa']
      })
  else:
    RCINIT_IMG = GPIOINT_KERNEL_IMAGES
    env.AddRCInitFunc(       # Code Fragment in TMC: NO
      RCINIT_IMG,              # define TMC_RCINIT_INIT_GPIOINT_INIT
      {
        'sequence_group'             : 'RCINIT_GROUP_0',       # required
        'init_name'                  : 'GPIOInt',              # required
        'init_function'              : 'GPIOInt_Init',         # required
        'dependencies'               : ['dalsys','npa']
      })
    env.AddRCInitFunc(       # Code Fragment in TMC: NO
      RCINIT_IMG,
      {
        'sequence_group'             : 'RCINIT_GROUP_0',         # required for QDI layer between uGPIOInt
        'init_name'                  : 'uGPIOIntQDI',             # required
        'init_function'              : 'uGPIOIntQDI_Init',        # required
        'dependencies'               : ['GPIOInt']
      })


#-------------------------------------------------------------------------------
# Add Libraries to image
#-------------------------------------------------------------------------------

ugpiointislanduserlib = env.AddLibrary(GPIOINT_USER_IMAGES, 
                         '${BUILDPATH}/src/GPIOInt/ugpioint/uGPIOIntuserisland', 
                         GPIO_USERPD_UIMAGE_ISLAND)         
ugpiointislandkernellib = env.AddLibrary(GPIOINT_KERNEL_IMAGES, 
                            '${BUILDPATH}/src/GPIOInt/ugpioint/uGPIOIntkernelisland', 
                            GPIO_GUESTOS_UIMAGE_ISLAND)   
if 'USES_ISLAND' in env:
  env.AddIslandLibrary(GPIOINT_USER_IMAGES, ugpiointislanduserlib)
  env.AddIslandLibrary(GPIOINT_KERNEL_IMAGES, ugpiointislandkernellib)

env.AddLibrary(GPIOINT_USER_IMAGES, '${BUILDPATH}/src/GPIOInt/ugpioint/uGPIOIntuser', GPIO_USERPD_UIMAGE)
env.AddLibrary(GPIOINT_KERNEL_IMAGES, '${BUILDPATH}/src/GPIOInt/ugpioint/uGPIOIntkernel', GPIO_GUESTOS_UIMAGE)


env.AddLibrary(GPIOINT_KERNEL_IMAGES, '${BUILDPATH}/src/GPIOInt/kernel', GPIO_INTERRUPT_KERNEL_SOURCES)
env.AddLibrary(GPIOINT_KERNEL_IMAGES, '${BUILDPATH}/src/GPIOInt/Summary/kernel', GPIO_INTERRUPT_KERNEL_SUM_SOURCES)
env.AddLibrary(GPIOINT_USER_IMAGES, '${BUILDPATH}/src/GPIOInt/user', GPIO_INTERRUPT_KERNEL_SOURCES)
env.AddLibrary(GPIOINT_USER_IMAGES, '${BUILDPATH}/src/GPIOInt/Summary/user', GPIO_INTERRUPT_USER_SUM_SOURCES)

if 'USES_DEVCFG' in env:
  DEVCFG_IMG = ['DAL_DEVCFG_IMG', 'DEVCFG_CORE_QDSP6_SENSOR_SW', 'DEVCFG_CORE_QDSP6_AUDIO_SW']
  env.AddDevCfgInfo(DEVCFG_IMG, 
  {
    '8998_xml' : ['${BUILD_ROOT}/core/systemdrivers/GPIOInt/config/kernel/msm8998/${IMAGE}/GPIOInt.xml',
                  '${BUILD_ROOT}/core/systemdrivers/GPIOInt/config/kernel/msm8998/${IMAGE}/GPIOInt_ConfigData.c'],
    '660_xml'  : ['${BUILD_ROOT}/core/systemdrivers/GPIOInt/config/kernel/sdm660/${IMAGE}/GPIOInt.xml',
                  '${BUILD_ROOT}/core/systemdrivers/GPIOInt/config/kernel/sdm660/${IMAGE}/GPIOInt_ConfigData.c'],
  })

#---------------------------------------------------------------------------
# Pack out target specific files not needed
#---------------------------------------------------------------------------

# Remove target config kernel files
ALL_KERNEL_CONFIG_FILES = env.FindFiles(
  ['*'],
  '../config/kernel/')
MY_KERNEL_CONFIG_FILES = env.FindFiles(
  ['*'],
  '../config/kernel/${CHIPSET}/${IMAGE}')
PACK_KERNEL_CONFIG_FILES = list(set(ALL_KERNEL_CONFIG_FILES) - set(MY_KERNEL_CONFIG_FILES))
env.CleanPack(GPIOINT_KERNEL_IMAGES, PACK_KERNEL_CONFIG_FILES)

# Remove target config user files
ALL_USER_CONFIG_FILES = env.FindFiles(
  ['*'],
  '../config/user/')
MY_USER_CONFIG_FILES = env.FindFiles(
  ['*'],
  '../config/user/${CHIPSET}/${IMAGE}')
PACK_USER_CONFIG_FILES = list(set(ALL_USER_CONFIG_FILES) - set(MY_USER_CONFIG_FILES))
env.CleanPack(GPIOINT_USER_IMAGES, PACK_USER_CONFIG_FILES)
