#===============================================================================
#
# ERR INJECT Libs
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2014 - 2016 by Qualcomm Technologies, Inc.  All Rights Reserved.
# Qualcomm Technologies, Inc. Confidential and Proprietary.
#
#-------------------------------------------------------------------------------
#
#  $Header: //components/rel/core.qdsp6/1.0.c2/debugtools/eic/build/err_inject.scons#1 $
#  $DateTime: 2020/02/10 01:57:30 $
#  $Author: pwbldsvc $
#  $Change: 22511909 $
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 05/12/15   dav     EIC as a seperate module and add ability to inject crash on PD
# 08/27/14   din     Created separate file for ERR Inject.
#===============================================================================
Import('env')
env = env.Clone()

#-------------------------------------------------------------------------------
# SUPPORTED IMAGES
#-------------------------------------------------------------------------------

CRASH_INJECT_ROOT_IMG = [
    'QDSP6_SW_IMAGE',
    'CBSP_QDSP6_SW_IMAGE',
    'CORE_ROOT_PD',
    'CORE_WLAN_ROM'
]

CRASH_INJECT_USER_IMG = [
    'CORE_QDSP6_SENSOR_SW',
    'CORE_QDSP6_AUDIO_SW',
    'CORE_USER_PD'
]

DEVCFG_SUPPORTED_IMG = [
     'DEVCFG_CORE_QDSP6_SENSOR_SW', 
     'DEVCFG_CORE_QDSP6_AUDIO_SW',
     'DAL_DEVCFG_WLAN_PD_IMG',
     'DAL_DEVCFG_AUDIO_PD_IMG'
]

#-------------------------------------------------------------------------------
# Source PATH
#-------------------------------------------------------------------------------
SRCPATH = "${BUILD_ROOT}/core/debugtools/eic/src"
env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#check for missing dependencies
if 'USES_ERR_INJECT_CRASH' in env:
    env.Append(CPPDEFINES=['ERR_INJECT_CRASH'])

if 'USES_DEVCFG' in env:
    env.Append(CPPDEFINES=['ERR_USES_DEVCFG'])

#-------------------------------------------------------------------------------
# External depends outside CoreBSP
#-------------------------------------------------------------------------------

env.RequireExternalApi([
])

#-------------------------------------------------------------------------------
# Internal depends within CoreBSP
#-------------------------------------------------------------------------------

CBSP_API = [
   'DAL',
   'DEBUGTOOLS',
   'SERVICES',
   'SYSTEMDRIVERS',

   # needs to be last also contains wrong comdef.h
   'KERNEL',
]

env.RequirePublicApi(CBSP_API)
env.RequireRestrictedApi(CBSP_API)

#-------------------------------------------------------------------------------
# Sources
#-------------------------------------------------------------------------------
#Some sections meant for Uerr, Should be explicitly added for island mode
ERR_INJECT_CRASH_ROOT_SOURCES = [
   '${BUILDPATH}/err_inject_crash.c',
   '${BUILDPATH}/err_inject_crash_root.c',

]

UERR_INJECT_CRASH_ROOT_SOURCES = [
   '${BUILDPATH}/uerr_inject_crash.c',

]

ERR_INJECT_CRASH_USER_SOURCES = [
   '${BUILDPATH}/err_inject_crash.c',
   '${BUILDPATH}/err_inject_crash_user.c',
]

UERR_INJECT_CRASH_USER_SOURCES = [
   '${BUILDPATH}/uerr_inject_crash.c',

]

#-------------------------------------------------------------------------------
# Libraries
#-------------------------------------------------------------------------------

if 'USES_ERR_INJECT_CRASH' in env:
    if 'USES_ISLAND_FEATURE' in env:
       #Move data from sbss/scommon to bss/data segments
       env.Append(CCFLAGS = "-G0")
       env.Append(CFLAGS = "-DUERR_ISLAND_MODE ")
       uerr_inject_crash_libs_root = env.AddLibrary(CRASH_INJECT_ROOT_IMG, '${BUILDPATH}/uerr_inject_crash_root', UERR_INJECT_CRASH_ROOT_SOURCES )
       uerr_inject_crash_libs_user = env.AddLibrary(CRASH_INJECT_USER_IMG, '${BUILDPATH}/uerr_inject_crash_user', UERR_INJECT_CRASH_USER_SOURCES )

    if 'USES_ISLAND' in env:
       env.AddIslandLibrary(CRASH_INJECT_ROOT_IMG, uerr_inject_crash_libs_root)
       env.AddIslandLibrary(CRASH_INJECT_USER_IMG, uerr_inject_crash_libs_user)

    err_inject_crash_libs_root = env.AddLibrary(CRASH_INJECT_ROOT_IMG, '${BUILDPATH}/err_inject_crash_root', ERR_INJECT_CRASH_ROOT_SOURCES )
    err_inject_crash_libs_user  = env.AddLibrary(CRASH_INJECT_USER_IMG, '${BUILDPATH}/err_inject_crash_user', ERR_INJECT_CRASH_USER_SOURCES )
         

# Devcfg Registrations
if 'USES_ERR_INJECT_CRASH' in env:
    if 'USES_DEVCFG' in env:
        DEVCFG_IMG = ['DAL_DEVCFG_IMG']
        env.AddDevCfgInfo(DEVCFG_IMG,
        {
         'soc_xml' : ['${BUILD_ROOT}/core/debugtools/eic/src/err_inject_crash.xml']
        })

if 'USES_DEVCFG' in env: 
  if 'USES_ERR_INJECT_CRASH' in env:
      DEVCFG_IMG_USERS = DEVCFG_SUPPORTED_IMG
      env.AddDevCfgInfo(DEVCFG_IMG_USERS,
      {
         'soc_xml' : ['${BUILD_ROOT}/core/debugtools/eic/src/err_inject_crash.xml']
      })

if 'USES_ERR_INJECT_CRASH' in env:
  if 'USES_RCINIT' in env:
    env.AddRCInitFunc( 
     CRASH_INJECT_ROOT_IMG, 
     {
      'sequence_group'             : 'RCINIT_GROUP_2',                   # required
      'init_name'                  : 'err_inject_crash_init',            # required
      'init_function'              : 'err_inject_crash_init',            # required
     # 'dependencies'               : ['',]
     })

if 'USES_ERR_INJECT_CRASH' in env:
  if 'USES_RCINIT' in env:
      env.AddRCInitFunc( 
       CRASH_INJECT_USER_IMG, 
       {
        'sequence_group'             : 'RCINIT_GROUP_2',                   # required
        'init_name'                  : 'err_inject_crash_init',            # required
        'init_function'              : 'err_inject_crash_init',            # required
       # 'dependencies'               : ['',]
       })

