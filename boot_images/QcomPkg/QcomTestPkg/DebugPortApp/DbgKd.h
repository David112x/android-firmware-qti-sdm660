/** @file DbgKd.h
   
  Tests for Debug Port Header File

  Copyright (c) 2012 Qualcomm Technologies, Inc.  All Rights
  Reserved. Qualcomm Technologies Proprietary and Confidential.

**/

/*=============================================================================
                              EDIT HISTORY


 when       who     what, where, why
 --------   ---     -----------------------------------------------------------
 11/01/12   plc     New File from Joel Winarske for WinDbg support

=============================================================================*/

typedef struct _KD_PACKET {

  UINT32   PacketLeader;
  UINT16   PacketType;
  UINT16   ByteCount;
  UINT32   PacketId;
  UINT32   Checksum;

} KD_PACKET, *PKD_PACKET;


#define KD_PACKET_MAX_SIZE               4000         /* used to alloc kd packet buffer */

#define INITIAL_PACKET_ID                0x80800000L  /* Don't use 0  */
#define SYNC_PACKET_ID                   0x00000800L  /* OR with INITIAL_PACKET_ID 
                                                         to force a packet ID reset. */
/* 
   Packet lead in sequence 
*/ 

#define PACKET_LEADER_DATA               0x30303030L
#define PACKET_LEADER_CONTROL            0x69696969L 


/* 
   Packet Trailing Byte 
*/

#define PACKET_DATA_TRAILING_BYTE        0xAA 


/*
   Packet Types 
*/ 

#define PACKET_TYPE_KD_STATE_CHANGE32    1
#define PACKET_TYPE_KD_MANIPULATE_STATE  2
#define PACKET_TYPE_KD_DEBUG_IO          3
#define PACKET_TYPE_KD_ACKNOWLEDGE       4
#define PACKET_TYPE_KD_RESEND            5
#define PACKET_TYPE_KD_RESET             6
#define PACKET_TYPE_KD_STATE_CHANGE64    7
#define PACKET_TYPE_KD_POLL_BREAKIN      8
#define PACKET_TYPE_KD_TRACE_IO          9
#define PACKET_TYPE_KD_CONTROL_REQUEST   10
#define PACKET_TYPE_KD_FILE_IO           11

typedef enum _KD_RECV_CODE
{
  KD_RECV_CODE_OK       = 0,
  KD_RECV_CODE_TIMEOUT  = 1,
  KD_RECV_CODE_FAILED   = 2
} KD_RECV_CODE, *PKD_RECV_CODE;


/* Debug IO */

typedef struct _DBGKD_DEBUG_IO {
  UINT32 ApiNumber;
  UINT16 ProcessorLevel;
  UINT16 Processor;
  UINT32 LengthOfString;
  UINT32 Id;
} DBGKD_DEBUG_IO, *PDBGKD_DEBUG_IO;

#define DbgKdPrintStringApi                 0x00003230L
#define DbgKdGetStringApi                   0x00003231L

#define DEBUG_IO_ID_BOOTDEBUG_INIT 0xffe5ef60

UINT8 DebugIoMsg_BootDebugInitialized[] = {
  0x42, 0x44, 0x3a, 0x20, 0x42, 0x6f, 0x6f, 0x74, 0x20, 0x44, 0x65, 0x62, 0x75, 0x67, 0x67, 0x65, /* BD: Boot Debugge */
  0x72, 0x20, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x0a              /* r Initialized.   */
};

UINT8 DebugIoMsg_SacdrvFail[] = {
  0x49, 0x4f, 0x49, 0x4e, 0x49, 0x54, 0x3a, 0x20, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x2d, 0x69, 0x6e, /* IOINIT: Built-in */
  0x20, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x20, 0x5c, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5c, /*  driver \Driver  */
  0x73, 0x61, 0x63, 0x64, 0x72, 0x76, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x74, 0x6f, /* sacdrv failed to */
  0x20, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, /*  initialize with */
  0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x2d, 0x20, 0x30, 0x78, 0x43, 0x30, 0x30, 0x30, /*  status - 0xC000 */
  0x30, 0x30, 0x33, 0x37, 0x0a                                                                    /* 0037             */
};

UINT8 DebugIoMsg_RefreshingKdConnection[] = {
  0x4b, 0x44, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x3a, 0x20, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, /* KDTARGET: Refres */
  0x68, 0x69, 0x6e, 0x67, 0x20, 0x4b, 0x44, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, /* hing KD connecti */
  0x6f, 0x6e, 0x0a                                                                                /* on               */
};

UINT8 StateChange64_Start[] = {
  0x31, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x75, 0x33, 0x80, 0xfd, 	/* 10..........u3Ä˝ */
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xe8, 0x80, 0xfd, 0xff, 0xff, 0xff, 0xff, 	/* ........1ËÄ˝ˇˇˇˇ */
  0x0c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x20, 0x79, 0xfd, 0xff, 0xff, 0xff, 0xff, 	/* ......... y˝ˇˇˇˇ */
  0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x9a, 0x0b, 0x00, 0x00, 0xd0, 0x0e, 0x00, 	/* ˇˇˇˇ....¯ö...–.. */
  0x00, 0xfa, 0x63, 0x81, 0x03, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x80, 	/* .˙cÅ...Ä.......Ä  */
  0xf8, 0xf8, 0x63, 0x81, 0xdd, 0x2d, 0x80, 0xfd, 0x14, 0x00, 0x00, 0x00, 0x40, 0x8d, 0x85, 0xfd, 	/* ¯¯cÅ›-Ä˝....@çÖ˝   */
  0xe0, 0xfa, 0x63, 0x81, 0x90, 0xfa, 0x63, 0x81, 0x50, 0xfa, 0x63, 0x81, 0x17, 0x2c, 0x80, 0xfd, 	/* ‡˙cÅê˙cÅP˙cÅ.,Ä˝     */
  0x1e, 0x00, 0x63, 0x81, 0x68, 0xfb, 0x63, 0x81, 0xe0, 0xfa, 0x63, 0x81, 0xa4, 0x90, 0xa8, 0x82, 	/* ..cÅh˚cÅ‡˙cÅ§ê®Ç     */
  0x10, 0x00, 0x93, 0xfd, 0x28, 0xf9, 0x63, 0x81, 0x00, 0x00, 0x00, 0x00, 0x18, 0x91, 0xa9, 0x82, 	/* ..ì˝(˘cÅ.....ë©Ç  */
  0x1e, 0x00, 0x9c, 0x81, 0x40, 0x8d, 0x85, 0xfd, 0x30, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 	/* ..úÅ@çÖ˝02......   */
  0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 	/* ................ */
  0xff, 0xaf, 0x9c, 0x81, 0x00, 0x00, 0x00, 0x00, 0x50, 0x8b, 0xa9, 0x82, 0x15, 0x55, 0xa2, 0xc0, 	/* ˇØúÅ....Pã©Ç.U¢¿  */
  0xb3, 0x00, 0x00, 0x20, 0x10, 0x00, 0x00, 0x00, 0xde, 0x70, 0x47, 0x08, 0xb9, 0x00, 0x20, 0x70, 	/* ≥.. ....ﬁpG.π. p */
  0x47, 0x01, 0x23, 0x0a, 0x22, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 	/* G.#.".!......... */
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 	/* ................ */
  0x62, 0x6f, 0x6f, 0x74, 0x61, 0x72, 0x6d, 0x2e, 0x65, 0x66, 0x69, 0x00 
};
