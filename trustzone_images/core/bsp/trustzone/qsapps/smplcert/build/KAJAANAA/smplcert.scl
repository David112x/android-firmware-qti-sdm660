PHDRS {
  CODE_RO PT_LOAD;
  DATA PT_LOAD;
  GOT PT_LOAD;
  REL_H PT_LOAD;
  REL_H_DYN PT_DYNAMIC;
  REL_D PT_LOAD;
}
SECTIONS {
  .text : {
    text_section_base = .;
    KEEP(*\tzapp_entry.o (TZAPPENTRYCODE))
    * (.text .text.* kthread_shared)
    KEEP(*(tzapp_syscall_asm))
    * (.rodata)
    * (EXCLUDE_FILE(*metadata.o) .rodata.*)
    *metadata.o (.rodata.str1.1)
  } : CODE_RO
  .sentinel : {
    * (.rodata.sentinel)
    text_section_limit = .;
    ASSERT(SIZEOF(.sentinel) != 0, "No sentinel section defined.");
  } : CODE_RO
  .metadata_check : {
    *metadata.o (.rodata.*)
    ASSERT(SIZEOF(.metadata_check) == 0, "New metadata not accounted for here");
  } : CODE_RO
  .data ALIGN(4096): {
    data_section_base = .;
    * (.data TZAPPENTRYSTACK .bss COMMON)
    data_section_limit = .;
  } : DATA
  .rel.text : {
    *(.rel.text)
  } : DATA
  .rel.rodata : {
    *(.rel.rodata)
  } : DATA
  .data.rel.ro.local : {
    *(.data.rel.ro.local)
  } : DATA
  .data.rel.ro : {
    *(.data.rel.ro)
  } : DATA
  .rel.data : {
    *(.rel.data)
  } : DATA
  .rel.plt : {
    *(.rel.plt)
  } : DATA
  .data.rel : {
    *(.data.rel)
  } : DATA
  .data.rel.local : {
    *(.data.rel.local)
  } : DATA
  INIT_ARRAY : {
    FILL(0x0)
    __init_array_start = .;
    *(.init_array)
    __init_array_end = .;
  } : DATA
  FINI_ARRAY : {
    FILL(0x0)
    __fini_array_start = .;
    *(.fini_array)
    __fini_array_end = .;
  } : DATA
  GP_APP_STACK : {
    app_stack_base = .;
    . = . + 0x8000;
    app_stack_limit = .;
  } : DATA
  GP_APP_HEAP : {
    app_heap_base = .;
    . = . + 0x8000;
    app_heap_limit = .;
  } : DATA
  .got : ALIGN(4096) { *(.got.plt) *(.igot.plt) *(.got) *(.igot) } : GOT
  .dynamic : ALIGN(4096) { *(.dynamic) }: REL_H : REL_H_DYN
  .rel.dyn : ALIGN(4096) {*(.rel.dyn)} : REL_D
  .gnu.attributes 0 : { KEEP (*(.gnu.attributes)) }
  .note.gnu.arm.ident 0 : { KEEP (*(.note.gnu.arm.ident)) }
  /DISCARD/ : { *(.hash) *(.dynsym) *(.dynstr) *(.ARM.exidx*) *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) *(.init) *(.fini) }
}
