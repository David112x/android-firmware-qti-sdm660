#===============================================================================
#
# cryptoLibs
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2012 by QUALCOMM, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header: //components/rel/core.tz/1.0.7.1/securemsm/unifiedcrypto/core/sha/build/SConscript#1 $
#  $DateTime: 2020/01/14 12:35:09 $
#  $Author: pwbldsvc $
#  $Change: 22186835 $
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 09/12/16   shl      Cleaned up
# 11/25/15   rp       Linked to Winsecapp
# 02/23/11   jl       Removed debug/nodebug from build path.
#
#===============================================================================
Import('env')
env = env.Clone()

#-------------------------------------------------------------------------------
# Source PATH
#-------------------------------------------------------------------------------
SRCPATH = "${BUILD_ROOT}/core/securemsm/unifiedcrypto/core/sha"

if env.has_key('USES_NO_DEBUG'):
   env.Replace(DBUG_MODE = "NoDebug")
else:
   env.Replace(DBUG_MODE = "Debug")

if env.has_key('IMAGE_NAME'):
   SECUREMSMLIBPATH = '${IMAGE_NAME}/${PROC}/${ARMTOOLS}'
#   SECUREMSMLIBPATH = '${IMAGE_NAME}/${PROC}/${ARMTOOLS}/${DBUG_MODE}'
else:
   SECUREMSMLIBPATH = 'unknown/${PROC}/${ARMTOOLS}'
#   SECUREMSMLIBPATH = 'unknown/${PROC}/${ARMTOOLS}/${DBUG_MODE}'

#env.Replace(SECUREMSMLIBPATH = SECUREMSMLIBPATH)
#env.VariantDir('${SECUREMSMLIBPATH}', SRCPATH, duplicate=0)
env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#-------------------------------------------------------------------------------
# Internal depends within CoreBSP
#-------------------------------------------------------------------------------
CBSP_API = [
   'SECUREMSM',
   'SERVICES',
   # needs to be last also contains wrong comdef.h
   'KERNEL',
]

env.RequirePublicApi(CBSP_API)
env.RequireRestrictedApi(CBSP_API)

#-------------------------------------------------------------------------------
# Compiler, object, and linker definitions
#-------------------------------------------------------------------------------

env.Append(ARMCC_CODE = " ${ARM_SPLIT_SECTIONS}")
env.Replace(ARMLD_NOREMOVE_CMD = "")

env.Append(CPPDEFINES = ['_ARM_', '__arm', 'ARM', 'ARM_BREW_BUILD'])
#env.Append(ARMCC_OPT = ' --loose_implicit_cast ')
if env.has_key('BUILD_BOOT_CHAIN'):
   env.Append(CPPDEFINES = ['FEATURE_LIBRARY_ONLY'])

#-------------------------------------------------------------------------------
# Publish Private APIs
#-------------------------------------------------------------------------------
env.PublishPrivateApi('UC_CORE_SHA_API', [
   "${BUILD_ROOT}/core/securemsm/unifiedcrypto/core/sha/inc",
])

if env.has_key('TZOS_IMAGE')  or env.has_key('TZTESTEXEC_IMAGE'):
  env.PublishPrivateApi('UC_CORE_SHA', [
   '${INC_ROOT}/core/securemsm/unifiedcrypto/core/sha/inc',
   '${INC_ROOT}/core/securemsm/unifiedcrypto/shared/sha/inc',
   '${INC_ROOT}/core/securemsm/unifiedcrypto/environment/tz/inc',
   '${INC_ROOT}/core/securemsm/unifiedcrypto/environment/tz/src',
   '${INC_ROOT}/core/securemsm/unifiedcrypto/environment/inc',
   ])
else:
    env.PublishPrivateApi('UC_CORE_SHA', [
       '${INC_ROOT}/core/securemsm/unifiedcrypto/core/sha/inc', 
       '${INC_ROOT}/core/securemsm/unifiedcrypto/shared/sha/inc',
       '${INC_ROOT}/core/securemsm/unifiedcrypto/environment/sampleapp/inc', 
       '${INC_ROOT}/core/securemsm/unifiedcrypto/environment/sampleapp/src', 
       '${INC_ROOT}/core/securemsm/unifiedcrypto/environment/inc', 
       ])

#-------------------------------------------------------------------------------
# Sources, libraries
#-------------------------------------------------------------------------------

SHA_CORE_LIB_SOURCES = [
        '${BUILDPATH}/src/sha_core.c',
        '${BUILDPATH}/src/sha2_core.c',
        '${BUILDPATH}/src/md5_core.c',
]

#-------------------------------------------------------------------------------
# Add Libraries to image
#-------------------------------------------------------------------------------

env.AddBinaryLibrary(['TZOS_IMAGE','TZTESTEXEC_IMAGE','CTZL_IMAGE','CTZL64_IMAGE', 'HDCP2P2_IMAGE', 'WINSECAPP_IMAGE','UEFISECAPP_IMAGE','WIDEVINE_IMAGE','HDCPSRM_IMAGE'], '${BUILDPATH}/SHACORE', SHA_CORE_LIB_SOURCES)
