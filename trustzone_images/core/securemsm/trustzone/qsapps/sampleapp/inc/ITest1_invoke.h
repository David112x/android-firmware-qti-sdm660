#ifndef __ITEST1_INVOKE_H
#define __ITEST1_INVOKE_H

// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"
#include "INoOp.h"

#include "ITest1.h"

#define Test1_DEFINE_INVOKE(func, prefix, type) \
  int32_t func(ObjectCxt h, ObjectOp op, ObjectArg *a, ObjectCounts k) \
  { \
    type me = (type) h; \
    switch (ObjectOp_methodID(op)) { \
      case Object_OP_release: { \
        return prefix##release(me); \
      } \
      case Object_OP_retain: { \
        return prefix##retain(me); \
      } \
      case NoOp_OP_noop: { \
        return prefix##noop(me); \
      } \
      case Test1_OP_num: { \
        if (k != ObjectCounts_pack(1, 1, 0, 0) || \
          a[0].b.size != 4 || \
          a[1].b.size != 4) { \
          break; \
        } \
        const int32_t *ia_ptr = (const int32_t*) a[0].b.ptr; \
        int32_t *oa_ptr = (int32_t*) a[1].b.ptr; \
        return prefix##num(me, *ia_ptr, oa_ptr); \
      } \
      case Test1_OP_bundled: { \
        if (k != ObjectCounts_pack(1, 1, 0, 0) || \
          a[0].b.size != 12 || \
          a[1].b.size != 12) { \
          break; \
        } \
        const struct { \
          int32_t m_ia; \
          Struct2 m_is; \
        } *i = a[0].b.ptr; \
        struct { \
          int32_t m_oa; \
          Struct2 m_os; \
        } *o = a[1].b.ptr; \
        return prefix##bundled(me, i->m_ia, &i->m_is, &o->m_oa, &o->m_os); \
      } \
      case Test1_OP_array: { \
        if (k != ObjectCounts_pack(1, 1, 0, 0)) { \
          break; \
        } \
        const uint8_t *a_ptr = (const uint8_t*) a[0].b.ptr; \
        size_t a_len = a[0].b.size / sizeof(uint8_t); \
        uint8_t *b_ptr = (uint8_t*) a[1].b.ptr; \
        size_t b_len = a[1].b.size / sizeof(uint8_t); \
        int32_t r = prefix##array(me, a_ptr, a_len, b_ptr, b_len, &b_len); \
        a[1].b.size = b_len * sizeof(uint8_t); \
        return r; \
      } \
      case Test1_OP_setObj: { \
        if (k != ObjectCounts_pack(0, 0, 1, 0)) { \
          break; \
        } \
        return prefix##setObj(me, a[0].o); \
      } \
      case Test1_OP_getObj: { \
        if (k != ObjectCounts_pack(0, 0, 0, 1)) { \
          break; \
        } \
        return prefix##getObj(me, &a[0].o); \
      } \
    } \
    return Object_ERROR_INVALID; \
  }

#endif /* __ITEST1_INVOKE_H */
