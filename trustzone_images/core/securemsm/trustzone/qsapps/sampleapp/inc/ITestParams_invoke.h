#ifndef __ITESTPARAMS_INVOKE_H
#define __ITESTPARAMS_INVOKE_H

// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"
#include "ITestGetSet.h"

#include "ITestParams.h"

#define TestParams_DEFINE_INVOKE(func, prefix, type) \
  int32_t func(ObjectCxt h, ObjectOp op, ObjectArg *a, ObjectCounts k) \
  { \
    type me = (type) h; \
    switch (ObjectOp_methodID(op)) { \
      case Object_OP_release: { \
        return prefix##release(me); \
      } \
      case Object_OP_retain: { \
        return prefix##retain(me); \
      } \
      case TestGetSet_OP_get: { \
        if (k != ObjectCounts_pack(0, 1, 0, 1)) { \
          break; \
        } \
        void *bo_ptr = (void*) a[0].b.ptr; \
        size_t bo_len = a[0].b.size / 1; \
        int32_t r = prefix##get(me, bo_ptr, bo_len, &bo_len, &a[1].o); \
        a[0].b.size = bo_len * 1; \
        return r; \
      } \
      case TestGetSet_OP_set: { \
        if (k != ObjectCounts_pack(1, 0, 1, 0)) { \
          break; \
        } \
        const void *bi_ptr = (const void*) a[0].b.ptr; \
        size_t bi_len = a[0].b.size / 1; \
        return prefix##set(me, bi_ptr, bi_len, a[1].o); \
      } \
      case TestParams_OP_ioAll: { \
        if (k != ObjectCounts_pack(15, 15, 15, 15)) { \
          break; \
        } \
        const void *bi01_ptr = (const void*) a[0].b.ptr; \
        size_t bi01_len = a[0].b.size / 1; \
        const void *bi02_ptr = (const void*) a[1].b.ptr; \
        size_t bi02_len = a[1].b.size / 1; \
        const void *bi03_ptr = (const void*) a[2].b.ptr; \
        size_t bi03_len = a[2].b.size / 1; \
        const void *bi04_ptr = (const void*) a[3].b.ptr; \
        size_t bi04_len = a[3].b.size / 1; \
        const void *bi05_ptr = (const void*) a[4].b.ptr; \
        size_t bi05_len = a[4].b.size / 1; \
        const void *bi06_ptr = (const void*) a[5].b.ptr; \
        size_t bi06_len = a[5].b.size / 1; \
        const void *bi07_ptr = (const void*) a[6].b.ptr; \
        size_t bi07_len = a[6].b.size / 1; \
        const void *bi08_ptr = (const void*) a[7].b.ptr; \
        size_t bi08_len = a[7].b.size / 1; \
        const void *bi09_ptr = (const void*) a[8].b.ptr; \
        size_t bi09_len = a[8].b.size / 1; \
        const void *bi10_ptr = (const void*) a[9].b.ptr; \
        size_t bi10_len = a[9].b.size / 1; \
        const void *bi11_ptr = (const void*) a[10].b.ptr; \
        size_t bi11_len = a[10].b.size / 1; \
        const void *bi12_ptr = (const void*) a[11].b.ptr; \
        size_t bi12_len = a[11].b.size / 1; \
        const void *bi13_ptr = (const void*) a[12].b.ptr; \
        size_t bi13_len = a[12].b.size / 1; \
        const void *bi14_ptr = (const void*) a[13].b.ptr; \
        size_t bi14_len = a[13].b.size / 1; \
        const void *bi15_ptr = (const void*) a[14].b.ptr; \
        size_t bi15_len = a[14].b.size / 1; \
        void *bo01_ptr = (void*) a[15].b.ptr; \
        size_t bo01_len = a[15].b.size / 1; \
        void *bo02_ptr = (void*) a[16].b.ptr; \
        size_t bo02_len = a[16].b.size / 1; \
        void *bo03_ptr = (void*) a[17].b.ptr; \
        size_t bo03_len = a[17].b.size / 1; \
        void *bo04_ptr = (void*) a[18].b.ptr; \
        size_t bo04_len = a[18].b.size / 1; \
        void *bo05_ptr = (void*) a[19].b.ptr; \
        size_t bo05_len = a[19].b.size / 1; \
        void *bo06_ptr = (void*) a[20].b.ptr; \
        size_t bo06_len = a[20].b.size / 1; \
        void *bo07_ptr = (void*) a[21].b.ptr; \
        size_t bo07_len = a[21].b.size / 1; \
        void *bo08_ptr = (void*) a[22].b.ptr; \
        size_t bo08_len = a[22].b.size / 1; \
        void *bo09_ptr = (void*) a[23].b.ptr; \
        size_t bo09_len = a[23].b.size / 1; \
        void *bo10_ptr = (void*) a[24].b.ptr; \
        size_t bo10_len = a[24].b.size / 1; \
        void *bo11_ptr = (void*) a[25].b.ptr; \
        size_t bo11_len = a[25].b.size / 1; \
        void *bo12_ptr = (void*) a[26].b.ptr; \
        size_t bo12_len = a[26].b.size / 1; \
        void *bo13_ptr = (void*) a[27].b.ptr; \
        size_t bo13_len = a[27].b.size / 1; \
        void *bo14_ptr = (void*) a[28].b.ptr; \
        size_t bo14_len = a[28].b.size / 1; \
        void *bo15_ptr = (void*) a[29].b.ptr; \
        size_t bo15_len = a[29].b.size / 1; \
        int32_t r = prefix##ioAll(me, bi01_ptr, bi01_len, bi02_ptr, bi02_len, bi03_ptr, bi03_len, bi04_ptr, bi04_len, bi05_ptr, bi05_len, bi06_ptr, bi06_len, bi07_ptr, bi07_len, bi08_ptr, bi08_len, bi09_ptr, bi09_len, bi10_ptr, bi10_len, bi11_ptr, bi11_len, bi12_ptr, bi12_len, bi13_ptr, bi13_len, bi14_ptr, bi14_len, bi15_ptr, bi15_len, a[30].o, a[31].o, a[32].o, a[33].o, a[34].o, a[35].o, a[36].o, a[37].o, a[38].o, a[39].o, a[40].o, a[41].o, a[42].o, a[43].o, a[44].o, bo01_ptr, bo01_len, &bo01_len, bo02_ptr, bo02_len, &bo02_len, bo03_ptr, bo03_len, &bo03_len, bo04_ptr, bo04_len, &bo04_len, bo05_ptr, bo05_len, &bo05_len, bo06_ptr, bo06_len, &bo06_len, bo07_ptr, bo07_len, &bo07_len, bo08_ptr, bo08_len, &bo08_len, bo09_ptr, bo09_len, &bo09_len, bo10_ptr, bo10_len, &bo10_len, bo11_ptr, bo11_len, &bo11_len, bo12_ptr, bo12_len, &bo12_len, bo13_ptr, bo13_len, &bo13_len, bo14_ptr, bo14_len, &bo14_len, bo15_ptr, bo15_len, &bo15_len, &a[45].o, &a[46].o, &a[47].o, &a[48].o, &a[49].o, &a[50].o, &a[51].o, &a[52].o, &a[53].o, &a[54].o, &a[55].o, &a[56].o, &a[57].o, &a[58].o, &a[59].o); \
        a[15].b.size = bo01_len * 1; \
        a[16].b.size = bo02_len * 1; \
        a[17].b.size = bo03_len * 1; \
        a[18].b.size = bo04_len * 1; \
        a[19].b.size = bo05_len * 1; \
        a[20].b.size = bo06_len * 1; \
        a[21].b.size = bo07_len * 1; \
        a[22].b.size = bo08_len * 1; \
        a[23].b.size = bo09_len * 1; \
        a[24].b.size = bo10_len * 1; \
        a[25].b.size = bo11_len * 1; \
        a[26].b.size = bo12_len * 1; \
        a[27].b.size = bo13_len * 1; \
        a[28].b.size = bo14_len * 1; \
        a[29].b.size = bo15_len * 1; \
        return r; \
      } \
    } \
    return Object_ERROR_INVALID; \
  }

#endif /* __ITESTPARAMS_INVOKE_H */
