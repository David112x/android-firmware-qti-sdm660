#ifndef __ITEST1_H
#define __ITEST1_H

// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"
#include "INoOp.h"

// Copyright (c) 2016 Qualcomm Technologies, Inc.  All Rights Reserved.

// Qualcomm Technologies Proprietary and Confidential.

// Test interface

typedef struct {
  int32_t a;
} Struct1;

typedef struct {
  Struct1 s;
  int32_t b;
} Struct2;

#define Test1_A INT32_C(1)
#define Test1_B INT32_C(0xf)
#define Test1_NO_METHOD INT32_C(0xfefe)

#define Test1_ERROR_ONE INT32_C(10)
#define Test1_ERROR_TWO INT32_C(11)

#define Test1_OP_num 1
#define Test1_OP_bundled 2
#define Test1_OP_array 3
#define Test1_OP_setObj 4
#define Test1_OP_getObj 5

static inline int32_t
Test1_release(Object self)
{
  return Object_invoke(self, Object_OP_release, 0, 0);
}

static inline int32_t
Test1_retain(Object self)
{
  return Object_invoke(self, Object_OP_retain, 0, 0);
}

static inline int32_t
Test1_noop(Object self)
{
  return Object_invoke(self, NoOp_OP_noop, 0, 0);
}

static inline int32_t
Test1_num(Object self, int32_t ia_val, int32_t *oa_ptr)
{
  ObjectArg a[2];
  a[0].b = (ObjectBuf) { &ia_val, sizeof(int32_t) };
  a[1].b = (ObjectBuf) { oa_ptr, sizeof(int32_t) };

  return Object_invoke(self, Test1_OP_num, a, ObjectCounts_pack(1, 1, 0, 0));
}

static inline int32_t
Test1_bundled(Object self, int32_t ia_val, const Struct2 *is_ptr, int32_t *oa_ptr, Struct2 *os_ptr)
{
  ObjectArg a[2];
  struct {
    int32_t m_ia;
    Struct2 m_is;
  } i;
  a[0].b = (ObjectBuf) { &i, 12 };
  struct {
    int32_t m_oa;
    Struct2 m_os;
  } o;
  a[1].b = (ObjectBuf) { &o, 12 };
  i.m_ia = ia_val;
  i.m_is = *is_ptr;

  int32_t result = Object_invoke(self, Test1_OP_bundled, a, ObjectCounts_pack(1, 1, 0, 0));

  *oa_ptr = o.m_oa;
  *os_ptr = o.m_os;

  return result;
}

static inline int32_t
Test1_array(Object self, const uint8_t *a_ptr, size_t a_len, uint8_t *b_ptr, size_t b_len, size_t *b_lenout)
{
  ObjectArg a[2];
  a[0].bi = (ObjectBufIn) { a_ptr, a_len * sizeof(uint8_t) };
  a[1].b = (ObjectBuf) { b_ptr, b_len * sizeof(uint8_t) };

  int32_t result = Object_invoke(self, Test1_OP_array, a, ObjectCounts_pack(1, 1, 0, 0));

  *b_lenout = a[1].b.size / sizeof(uint8_t);

  return result;
}

static inline int32_t
Test1_setObj(Object self, Object o_val)
{
  ObjectArg a[1];
  a[0].o = o_val;

  return Object_invoke(self, Test1_OP_setObj, a, ObjectCounts_pack(0, 0, 1, 0));
}

static inline int32_t
Test1_getObj(Object self, Object *o_ptr)
{
  ObjectArg a[1];

  int32_t result = Object_invoke(self, Test1_OP_getObj, a, ObjectCounts_pack(0, 0, 0, 1));

  *o_ptr = a[0].o;

  return result;
}


#endif /* __ITEST1_H */
