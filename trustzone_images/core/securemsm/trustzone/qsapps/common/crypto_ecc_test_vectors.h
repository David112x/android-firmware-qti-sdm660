/*
@file crypto_ecc_test_vectors.h
@brief This file contains all common definitions used in apt crypto test app
*/
/*===========================================================================
   Copyright (c) 2011 by Qualcomm Technologies, Incorporated.  All Rights Reserved.
===========================================================================*/

/*===========================================================================

                            EDIT HISTORY FOR FILE
  $Header: //components/rel/core.tz/1.0.7.1/securemsm/trustzone/qsapps/common/crypto_ecc_test_vectors.h#1 $
  $DateTime: 2020/01/14 12:35:09 $
  $Author: pwbldsvc $

# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
8/19/2015   vinitp   created a new common header file
===========================================================================*/
#ifndef __CRYPTO_ECC_TEST_VECTORS_H__
#define __CRYPTO_ECC_TEST_VECTORS_H__

#include <comdef.h>

/* Generic ECC test vectors */
static uint8 ecc_160_public_key_x[] =
{
   0x51,0xb4,0x49,0x6f,0xec,0xc4,0x06,0xed,0x0e,0x75,0xa2,0x4a,0x3c,0x03,0x20,0x62,0x51,0x41,0x9d,0xc0
};

static uint8 ecc_160_public_key_y[] =
{
   0xc2,0x8d,0xcb,0x4b,0x73,0xa5,0x14,0xb4,0x68,0xd7,0x93,0x89,0x4f,0x38,0x1c,0xcc,0x17,0x56,0xaa,0x6c
};

static uint8 ecc_160_private_key[] =
{
   0xAA,0x37,0x4F,0xFC,0x3C,0xE1,0x44,0xE6,0xB0,0x73,0x30,0x79,0x72,0xCB,0x6D,0x57,0xB2,0xA4,0xE9,0x82
};

static uint8_t ecc_160_private_key_invalid[3][20] =
{
   {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},
   {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
   {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x44,0x44,0x44,0x00,0x00,0x00,0x00},
};

static uint8 ecc_160_signature[] =
{
   0xce,0x28,0x73,0xe5,0xbe,0x44,0x95,0x63,0x39,0x1f,0xeb,0x47,0xdd,0xcb,0xa2,0xdc,0x16,0x37,0x91,0x91,  //signature r
   0x34,0x80,0xec,0x13,0x71,0xa0,0x91,0xa4,0x64,0xb3,0x1c,0xe4,0x7d,0xf0,0xcb,0x8a,0xa2,0xd9,0x8b,0x54   //signature s
};

static uint8 ecc_160_hash[] =
{
   0xA9,0x99,0x3E,0x36,0x47,0x06,0x81,0x6A,0xBA,0x3E,0x25,0x71,0x78,0x50,0xC2,0x6C,0x9C,0xD0,0xD8,0x9D
};

static uint8 ecc_192_public_key_x[] =
{
   0x8d,0x80,0x96,0xd2,0xac,0x42,0x0e,0x8d,0x6e,0x7d,0xc7,0x44,0x53,0xc7,0xf9,0x4d,0x2a,0x6c,0x3f,0x01,0x98,0x8c,0x64,0xf7
};

static uint8 ecc_192_public_key_y[] =
{
   0x32,0xe4,0x25,0xb9,0xe1,0x3c,0xd4,0x32,0x1d,0x03,0x7f,0xf9,0xb4,0x37,0x82,0x0f,0xf8,0xac,0xb3,0xdc,0x89,0x53,0x92,0xeb
};

static uint8 ecc_192_private_key[] =
{
   0x5d,0x32,0xdc,0x03,0x42,0x20,0x03,0xd3,0x01,0xc9,0xd7,0x19,0x8b,0x85,0x9e,0x88,0x20,0xbd,0xa6,0xca,0x61,0x0d,0xe5,0xa6
};

static uint8_t ecc_192_private_key_invalid[3][24] =
{
   {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},
   {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
   {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x44,0x44,0x44,0x00,0x00,0x00,0x00},
};

static uint8 ecc_192_signature[] =
{
   0x0b,0x42,0xa6,0x59,0x64,0xc1,0xb2,0xcb,0x5f,0xa9,0xa3,0xb9,0x5a,0x2d,0x90,0xa6,0x50,0x1a,0x4c,0xa7,0xd3,0x4c,0xf9,0x5f, //signature r
   0x45,0x85,0x0f,0xe1,0xd2,0xda,0x50,0xa7,0xea,0x97,0xa8,0x16,0x9c,0x97,0xde,0x37,0x57,0x4f,0x7e,0x04,0x92,0x7e,0x2a,0xba  //signature s
};

static uint8 ecc_192_hash[] =
{
   0x85,0x60,0xe2,0xca,0x33,0x9a,0x80,0xf4,0x22,0xce,0xe3,0x0c,0x70,0x5f,0xf6,0x4c,0x52,0x32,0xcc,0x9d,0x9e,0x75,0xcb,0x82,0x2d,0x2a,0x34,0xc6,0x3d,0x81,0x8d,0x5a
};

static uint8 ecc_256_public_key_x[] =
{
   0x59,0x63,0x75,0xe6,0xce,0x57,0xe0,0xf2,0x02,0x94,0xfc,0x46,0xbd,0xfc,0xfd,0x19,0xa3,0x9f,0x81,0x61,0xb5,0x86,0x95,0xb3,0xec,0x5b,0x3d,0x16,0x42,0x7c,0x27,0x4d
};

static uint8 ecc_256_public_key_y[] =
{
   0x42,0x75,0x4d,0xfd,0x25,0xc5,0x6f,0x93,0x9a,0x79,0xf2,0xb2,0x04,0x87,0x6b,0x3a,0x3a,0xb1,0xce,0xb2,0xe4,0xff,0x57,0x1a,0xbf,0x4f,0xbf,0x36,0x32,0x6c,0x8b,0x27
};

static uint8 ecc_256_private_key[] =
{
   0x2c,0xa1,0x41,0x1a,0x41,0xb1,0x7b,0x24,0xcc,0x8c,0x3b,0x08,0x9c,0xfd,0x03,0x3f,0x19,0x20,0x20,0x2a,0x6c,0x0d,0xe8,0xab,0xb9,0x7d,0xf1,0x49,0x8d,0x50,0xd2,0xc8
};

static uint8_t ecc_256_private_key_invalid[3][32] =
{
   {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},
   {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
   {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x44,0x44,0x44,0x00,0x00,0x00,0x00},
};

static uint8 ecc_256_signature[] =
{
   0xd7,0x3c,0xd3,0x72,0x2b,0xae,0x6c,0xc0,0xb3,0x90,0x65,0xbb,0x40,0x03,0xd8,0xec,0xe1,0xef,0x2f,0x7a,0x8a,0x55,0xbf,0xd6,0x77,0x23,0x4b,0x0b,0x3b,0x90,0x26,0x50,//signature r
   0xd9,0xc8,0x82,0x97,0xfe,0xfe,0xd8,0x44,0x1e,0x08,0xdd,0xa6,0x95,0x54,0xa6,0x45,0x2b,0x8a,0x0b,0xd4,0xa0,0xea,0x1d,0xdb,0x75,0x04,0x99,0xf0,0xc2,0x29,0x8c,0x2f //signature s
};

static uint8 ecc_256_hash[] =
{
   0x1B,0xD4,0xED,0x43,0x0B,0x0F,0x38,0x4B,0x4E,0x8D,0x45,0x8E,0xFF,0x1A,0x8A,0x55,0x32,0x86,0xD7,0xAC,0x21,0xCB,0x2F,0x68,0x06,0x17,0x2E,0xF5,0xF9,0x4A,0x06,0xAD
};

/* Test vectors from NIST: http://csrc.nist.gov/groups/STM/cavp/index.html */
// static uint8 ecc_224_public_key_x[] = "4c741e4d20103670b7161ae72271082155838418084335338ac38fa4";
static uint8 ecc_224_public_key_x[] =
{
 0x4c, 0x74, 0x1e, 0x4d, 0x20, 0x10, 0x36, 0x70, 0xb7, 0x16, 0x1a, 0xe7,
 0x22, 0x71, 0x08, 0x21, 0x55, 0x83, 0x84, 0x18, 0x08, 0x43, 0x35, 0x33, 0x8a, 0xc3, 0x8f, 0xa4,
};
static uint8 ecc_224_public_key_y[] =
{
 0xdb, 0x79, 0x19, 0x15, 0x1a, 0xc2, 0x85, 0x87, 0xb7, 0x2b, 0xad, 0x7a,
 0xb1, 0x80, 0xec, 0x8e, 0x95, 0xab, 0x9e, 0x2c, 0x8d, 0x81, 0xd9, 0xb9, 0xd7, 0xe2, 0xe3, 0x83,
};

static uint8 ecc_224_private_key[] =
{
 0x88, 0x8f, 0xc9, 0x92, 0x89, 0x3b, 0xdd, 0x8a, 0xa0, 0x2c, 0x80, 0x76,
 0x88, 0x32, 0x60, 0x5d, 0x02, 0x0b, 0x81, 0xae, 0x0b, 0x25, 0x47, 0x41, 0x54, 0xec, 0x89, 0xaa,
};

static uint8_t ecc_224_private_key_invalid[3][28] =
{
   {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},
   {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
   {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x44,0x44,0x44,0x00,0x00,0x00,0x00},
};

static uint8 ecc_224_signature[] =
{
 0x09, 0x09, 0xc9, 0xb9, 0xca, 0xe8, 0xd2, 0x79, 0x0e, 0x29, 0xdb, 0x6a, 0xfd,
 0xb4, 0x5c, 0x04, 0xf5, 0xb0, 0x72, 0xc4, 0xc2, 0x04, 0x10, 0xc7, 0xdc, 0x9b, 0x67, 0x72, // r
 0x29, 0x8f, 0x4f, 0xca, 0xe1, 0xfe, 0x27, 0x1d, 0xa1, 0xe0, 0x34, 0x5d, 0x11, 0xd0,
 0x7a, 0x1f, 0xca, 0x43, 0xf5, 0x8a, 0xf4, 0xc1, 0x13, 0xb9, 0x09, 0xee, 0xde, 0xa0, // s
};

// binary SHA256 digest of 2b49de971bb0f705a3fb5914eb7638d72884a6c3550667dbfdf301adf26bde02f387fd426a31be6c9ff8bfe8690c8113c88576427f1466508458349fc86036afcfb66448b947707e791e71f558b2bf4e7e7507773aaf4e9af51eda95cbce0a0f752b216f8a54a045d47801ff410ee411a1b66a516f278327df2462fb5619470e
static uint8 ecc_224_hash[] =
{
 0x00, 0xc6, 0xfc, 0x53, 0xc1, 0x98, 0x6d, 0x19, 0xa8, 0xa8, 0xb5, 0x80, 0xee, 0x55,
 0x3d, 0xc1, 0x24, 0x07, 0x45, 0xd7, 0x60, 0x64, 0x7d, 0x1c, 0x0a, 0xdf, 0x44, 0x2c, 0x13, 0x3c, 0x7f, 0x56,
};

static uint8 ecc_384_public_key_x[] =
{
 0x04, 0x00, 0x19, 0x3b, 0x21, 0xf0, 0x7c, 0xd0, 0x59, 0x82, 0x6e, 0x94, 0x53, 0xd3,
 0xe9, 0x6d, 0xd1, 0x45, 0x04, 0x1c, 0x97, 0xd4, 0x9f, 0xf6, 0xb7, 0x04, 0x7f, 0x86,
 0xbb, 0x0b, 0x04, 0x39, 0xe9, 0x09, 0x27, 0x4c, 0xb9, 0xc2, 0x82, 0xbf, 0xab, 0x88,
 0x67, 0x4c, 0x07, 0x65, 0xbc, 0x75,
};

static uint8 ecc_384_public_key_y[] =
{
 0xf7, 0x0d, 0x89, 0xc5, 0x2a, 0xcb, 0xc7, 0x04, 0x68, 0xd2, 0xc5, 0xae, 0x75, 0xc7,
 0x6d, 0x7f, 0x69, 0xb7, 0x6a, 0xf6, 0x2d, 0xcf, 0x95, 0xe9, 0x9e, 0xba, 0x5d, 0xd1,
 0x1a, 0xdf, 0x8f, 0x42, 0xec, 0x9a, 0x42, 0x5b, 0x0c, 0x5e, 0xc9, 0x8e, 0x2f, 0x23,
 0x4a, 0x92, 0x6b, 0x82, 0xa1, 0x47,
};

static uint8 ecc_384_private_key[] =
{
 0xc6, 0x02, 0xbc, 0x74, 0xa3, 0x45, 0x92, 0xc3, 0x11, 0xa6, 0x56, 0x96, 0x61, 0xe0,
 0x83, 0x2c, 0x84, 0xf7, 0x20, 0x72, 0x74, 0x67, 0x6c, 0xc4, 0x2a, 0x89, 0xf0, 0x58,
 0x16, 0x26, 0x30, 0x18, 0x4b, 0x52, 0xf0, 0xd9, 0x9b, 0x85, 0x5a, 0x77, 0x83, 0xc9,
 0x87, 0x47, 0x6d, 0x7f, 0x9e, 0x6b,
};

static uint8_t ecc_384_private_key_invalid[3][48] =
{
   {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},
   {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
   {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x44,0x44,0x44,0x00,0x00,0x00,0x00},
};

static uint8 ecc_384_signature[] =
{
 0xb1, 0x1d, 0xb0, 0x0c, 0xda, 0xf5, 0x32, 0x86, 0xd4, 0x48, 0x3f, 0x38, 0xcd, 0x02,
 0x78, 0x59, 0x48, 0x47, 0x7e, 0xd7, 0xeb, 0xc2, 0xad, 0x60, 0x90, 0x54, 0x55, 0x1d,
 0xa0, 0xab, 0x03, 0x59, 0x97, 0x8c, 0x61, 0x85, 0x17, 0x88, 0xaa, 0x2e, 0xc3, 0x26,
 0x79, 0x46, 0xd4, 0x40, 0xe8, 0x78, // r
 0x16, 0x00, 0x78, 0x73, 0xc5, 0xb0, 0x60, 0x4c, 0xe6, 0x81, 0x12, 0xa8, 0xfe, 0xe9,
 0x73, 0xe8, 0xe2, 0xb6, 0xe3, 0x31, 0x9c, 0x68, 0x3a, 0x76, 0x2f, 0xf5, 0x06, 0x5a,
 0x07, 0x65, 0x12, 0xd7, 0xc9, 0x8b, 0x27, 0xe7, 0x4b, 0x78, 0x87, 0x67, 0x10, 0x48,
 0xac, 0x02, 0x7d, 0xf8, 0xcb, 0xf2,  // s
};

// binary SHA256 digest of 663b12ebf44b7ed3872b385477381f4b11adeb0aec9e0e2478776313d536376dc8fd5f3c715bb6ddf32c01ee1d6f8b731785732c0d8441df636d8145577e7b3138e43c32a61bc1242e0e73d62d624cdc924856076bdbbf1ec04ad4420732ef0c53d42479a08235fcfc4db4d869c4eb2828c73928cdc3e3758362d1b770809997
static uint8 ecc_384_hash[] =
{
 0xbb, 0xbd, 0x0a, 0x5f, 0x64, 0x5d, 0x3f, 0xda, 0x10, 0xe2, 0x88, 0xd1, 0x72, 0xb2,
 0x99, 0x45, 0x5f, 0x9d, 0xff, 0x00, 0xe0, 0xfb, 0xc2, 0x83, 0x3e, 0x18, 0xcd, 0x01,
 0x7d, 0x7f, 0x3e, 0xd1,
};

static uint8 ecc_521_public_key_x[] =
{
 0x00, 0x7d, 0x04, 0x2c, 0xa1, 0x94, 0x08, 0x52, 0x4e, 0x68, 0xb9, 0x81, 0xf1, 0x41,
 0x93, 0x51, 0xe3, 0xb8, 0x47, 0x36, 0xc7, 0x7f, 0xe5, 0x8f, 0xee, 0x7d, 0x11, 0x31,
 0x7d, 0xf2, 0xe8, 0x50, 0xd9, 0x60, 0xc7, 0xdd, 0x10, 0xd1, 0x0b, 0xa7, 0x14, 0xc8,
 0xa6, 0x09, 0xd1, 0x63, 0x50, 0x2b, 0x79, 0xd6, 0x82, 0xe8, 0xbb, 0xec, 0xd4, 0xf5,
 0x25, 0x91, 0xd2, 0x74, 0x85, 0x33, 0xe4, 0x5a, 0x86, 0x7a,
};

static uint8 ecc_521_public_key_y[] =
{
 0x01, 0x97, 0xac, 0x64, 0x16, 0x11, 0x1c, 0xcf, 0x98, 0x7d, 0x29, 0x04, 0x59, 0xeb,
 0xc8, 0xad, 0x9e, 0xc5, 0x6e, 0x49, 0x05, 0x9c, 0x99, 0x21, 0x55, 0x53, 0x9a, 0x36,
 0xa6, 0x26, 0x63, 0x1f, 0x4a, 0x2d, 0x89, 0x16, 0x4b, 0x98, 0x51, 0x54, 0xf2, 0xdd,
 0xdc, 0x02, 0x81, 0xee, 0x5b, 0x51, 0x78, 0x27, 0x1f, 0x3a, 0x76, 0xa0, 0x91, 0x4c,
 0x3f, 0xcd, 0x1f, 0x97, 0xbe, 0x8e, 0x83, 0x76, 0xef, 0xb3,
};

static uint8 ecc_521_private_key[] =
{
 0x01, 0xe8, 0xc0, 0x59, 0x96, 0xb8, 0x5e, 0x6f, 0x3f, 0x87, 0x57, 0x12, 0xa0, 0x9c,
 0x1b, 0x40, 0x67, 0x2b, 0x5e, 0x7a, 0x78, 0xd5, 0x85, 0x2d, 0xe0, 0x15, 0x85, 0xc5,
 0xfb, 0x99, 0x0b, 0xf3, 0x81, 0x2c, 0x32, 0x45, 0x53, 0x4a, 0x71, 0x43, 0x89, 0xae,
 0x90, 0x14, 0xd6, 0x77, 0xa4, 0x49, 0xef, 0xd6, 0x58, 0x25, 0x4e, 0x61, 0x0d, 0xa8,
 0xe6, 0xca, 0xd3, 0x34, 0x14, 0xb9, 0xd3, 0x3e, 0x0d, 0x7a,
};

static uint8_t ecc_521_private_key_invalid[3][66] =
{
   {0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
    0xff,0xff},
   {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00},
   {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x44,0x44,0x44,0x44,0x00,0x00,
    0x00,0x00},
};


static uint8 ecc_521_signature[] =
{
 0x00, 0x9d, 0xd1, 0xf2, 0xa7, 0x16, 0x84, 0x3e, 0xed, 0xec, 0x7a, 0x66, 0x45, 0xac,
 0x83, 0x4d, 0x43, 0x36, 0xe7, 0xb1, 0x8e, 0x35, 0x70, 0x1f, 0x06, 0xca, 0xe9, 0xd6,
 0xb2, 0x90, 0xd4, 0x14, 0x91, 0x42, 0x47, 0x35, 0xf3, 0xb5, 0x7e, 0x82, 0x9a, 0xd5,
 0xde, 0x05, 0x5e, 0xae, 0xef, 0x17, 0x78, 0xf0, 0x51, 0xc1, 0xee, 0x15, 0x2b, 0xf2,
 0x13, 0x1a, 0x08, 0x1e, 0x53, 0xdf, 0x2a, 0x56, 0x7a, 0x8a, // r
 0x00, 0x21, 0x48, 0xe8, 0x42, 0x8d, 0x70, 0xa7, 0x2b, 0xc9, 0xfa, 0x98, 0x6c, 0x38,
 0xc2, 0xc9, 0x7d, 0xed, 0xa0, 0x42, 0x0f, 0x22, 0x2f, 0x9d, 0xc9, 0x9d, 0x32, 0xc0,
 0xac, 0xba, 0x69, 0x9d, 0xc7, 0xba, 0x0a, 0x2b, 0x79, 0xce, 0x59, 0x99, 0xff, 0x61,
 0xbd, 0x0b, 0x23, 0x3c, 0x74, 0x4a, 0x89, 0x3b, 0xc1, 0x05, 0xbc, 0xa5, 0xc2, 0x35,
 0x42, 0x3e, 0x53, 0x16, 0x12, 0xda, 0x65, 0xd7, 0x2e, 0x62, // s
};


// binary SHA256 digest of 8ab8176b16278db54f84328ae0b75ef8f0cd18afdf40c04ad0927ed0f6d9e47470396c8e87cde7a9be2ffbfe6c9658c88b7de4d582111119c433b2e4a504493f0a1166e3a3ea0d7b93358f4a297d63f65a5e752f94e2ee7f49ebcc742fa3eb03a617d00c574245b77a20033854d82964b2949e2247637239ab00baf4d170d97c
uint8 ecc_521_hash[] =
{
 0x53, 0xe6, 0x53, 0x7c, 0xb6, 0xea, 0x68, 0xae, 0x47, 0xa8, 0x16, 0x11, 0xc2, 0x27,
 0x56, 0xd7, 0x70, 0xd7, 0xa3, 0x7e, 0x33, 0x6c, 0x3a, 0xf0, 0xb0, 0x81, 0x4b, 0x04,
 0xfa, 0x39, 0x43, 0x4b,
};

typedef struct
{
   char   *m;
   char   *a;
   char   *b;
   char   *G_x;
   char   *G_y;
   char   *n;
   uint8  *public_key_x;
   uint8  *public_key_y;
   uint8  *private_key;
   uint32 key_size;         //size in bits
   uint8  *signature;       //signature r followed by sig s
   uint32 sig_size;         //length of signature r + sig s in bytes
   uint8  *hash;
   uint32 hash_size;        //size in bytes
} __attribute__ ((packed)) generic_ecc_vector_type;

static generic_ecc_vector_type generic_ecc_test_vectors[] =
{
   { //Key length 160 bits
      "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFF",     //m
      "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFC",     //a
      "1C97BEFC54BD7A8B65ACF89F81D4D4ADC565FA45",     //b
      "4A96B5688EF573284664698968C38BB913CBFC82",     //G_x
      "23A628553168947D59DCC912042351377AC5FB32",     //G_y
      "0100000000000000000001F4C8F927AED3CA752257",   //n
      ecc_160_public_key_x,                           //public_key_x
      ecc_160_public_key_y,                           //public_key_y
      ecc_160_private_key,                            //private_key
      160,                                            //key size in bits
      ecc_160_signature,                              //sig_r followed by sig_s
      40,                                             //sig len r + s in bytes
      ecc_160_hash,                                   //hash
      20,                                             //hash size in bytes
   },
   { //Key length 192 bits
      "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFF",     //m
      "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFC",     //a
      "64210519E59C80E70FA7E9AB72243049FEB8DEECC146B9B1",     //b
      "188DA80EB03090F67CBF20EB43A18800F4FF0AFD82FF1012",     //G_x
      "07192B95FFC8DA78631011ED6B24CDD573F977A11E794811",     //G_y
      "FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22831",     //n
      ecc_192_public_key_x,                                   //public_key_x
      ecc_192_public_key_y,                                   //public_key_y
      ecc_192_private_key,                                    //private_key
      192,                                                    //key size in bits
      ecc_192_signature,                                      //sig_r followed by sig_s
      48,                                                     //sig len r + s in bytes
      ecc_192_hash,                                           //hash
      32,                                                     //hash size in bytes
   },
   { //Key length 224 bits
       "ffffffffffffffffffffffffffffffff000000000000000000000001",     //m
       "fffffffffffffffffffffffffffffffefffffffffffffffffffffffe",     //a
       "b4050a850c04b3abf54132565044b0b7d7bfd8ba270b39432355ffb4",     //b
       "b70e0cbd6bb4bf7f321390b94a03c1d356c21122343280d6115c1d21",     //G_x
       "bd376388b5f723fb4c22dfe6cd4375a05a07476444d5819985007e34",     //G_y
       "ffffffffffffffffffffffffffff16a2e0b8f03e13dd29455c5c2a3d",     //n
       ecc_224_public_key_x,                                   //public_key_x
       ecc_224_public_key_y,                                   //public_key_y
       ecc_224_private_key,                                    //private_key
       224,                                                    //key size in bits
       ecc_224_signature,                                      //sig_r followed by sig_s
       56,                                                     //sig len r + s in bytes
       ecc_224_hash,                                           //hash
       32,                                                     //hash size in bytes
   },
   { //Key length 256 bits
       "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff",    //m
       "ffffffff00000001000000000000000000000000fffffffffffffffffffffffc",    //a
       "5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b",    //b
       "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296",    //G_x
       "4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5",    //G_y
       "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551",    //n
       ecc_256_public_key_x,                                                  //public_key_x
       ecc_256_public_key_y,                                                  //public_key_y
       ecc_256_private_key,                                                   //private_key
       256,                                                                   //key size in bits
       ecc_256_signature,                                                     //sig_r followed by sig_s
       64,                                                                    //sig len r + s in bytes
       ecc_256_hash,                                                          //hash
       32,                                                                    //hash size in bytes
   },
   { //Key length 384 bits
       "fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000ffffffff",    //m
       "fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000fffffffc",    //a
       "b3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef",    //b
       "aa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7",    //G_x
       "3617DE4A96262C6F5D9E98BF9292DC29F8F41DBD289A147CE9DA3113B5F0B8C00A60B1CE1D7E819D7A431D7C90EA0E5F",    //G_y
    "ffffffffffffffffffffffffffffffffffffffffffffffffc7634d81f4372ddf581a0db248b0a77aecec196accc52973",    //n
    ecc_384_public_key_x,                                                  //public_key_x
    ecc_384_public_key_y,                                                  //public_key_y
    ecc_384_private_key,                                                   //private_key
    384,                                                                   //keysize in bits
    ecc_384_signature,                                                     //sig_r followed by sig_s
    96,                                                                    //sig len r + s in bytes
    ecc_384_hash,                                                          //hash
    32,                                                                    //hash size in bytes
  },
  { //Key length 521 bits (will be 528 to be multiple of 8)
    "01ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",    //m
    "01fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc",    //a
    "0051953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00",    //b
    "00c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66",    //G_x
    "011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650",    //G_y
    "01fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa51868783bf2f966b7fcc0148f709a5d03bb5c9b8899c47aebb6fb71e91386409",    //n
    ecc_521_public_key_x,                                                  //public_key_x
    ecc_521_public_key_y,                                                  //public_key_y
    ecc_521_private_key,                                                   //private_key
    521,                                                                   //keysize in bits
    ecc_521_signature,                                                     //sig_r followed by sig_s
    132,                                                                   //sig len r + s in bytes
    ecc_521_hash,                                                          //hash
    32,                                                                    //hash size in bytes
  }
};

//Set up array of pointers to test vectors
generic_ecc_vector_type *generic_ecc_test_vectors_ptr[] = {&generic_ecc_test_vectors[0], &generic_ecc_test_vectors[1], &generic_ecc_test_vectors[3]};

#endif // __CRYPTO_ECC_TEST_VECTORS_H__

