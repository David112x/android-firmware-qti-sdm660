/*
@file crypto_hmac_test_vectors.h
@brief This file contains all common definitions used in apt crypto test app
*/
/*===========================================================================
   Copyright (c) 2011 by Qualcomm Technologies, Incorporated.  All Rights Reserved.
===========================================================================*/

/*===========================================================================

                            EDIT HISTORY FOR FILE
  $Header: //components/rel/core.tz/1.0.7.1/securemsm/trustzone/qsapps/common/crypto_hmac_test_vectors.h#1 $
  $DateTime: 2020/01/14 12:35:09 $
  $Author: pwbldsvc $

# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
8/19/2015   vinitp   created a header file for testing HMAC APIs
===========================================================================*/
#ifndef __CRYPTO_HMAC_TEST_VECTORS_H__
#define __CRYPTO_HMAC_TEST_VECTORS_H__

#include <comdef.h>
#include "crypto_common_test_vectors.h"

/* SHA 256 HMAC test vectors */
static UINT8_A sha_hmac_msg_1[2] = {0x5f, 0xd4};

static UINT8_A sha_hmac_key_1[4] =
{
   0x4a, 0x65, 0x66, 0x65
};

static UINT8_A sha_hmac_msg_1_hmac1[20] =
{
   0xc4, 0x8b, 0xbf, 0xb4, 0x82, 0x37, 0xe0, 0x8c,
   0xeb, 0x54, 0x7e, 0x6a, 0x91, 0x0d, 0x62, 0x54,
   0xd2, 0x5b, 0x23, 0x9d
};

static UINT8_A sha_hmac_msg_1_hmac256[32] =
{
   0xA0, 0xCC, 0x63, 0x97, 0x95, 0x25, 0x59, 0xB6,
   0x0E, 0x31, 0x83, 0x00, 0xD3, 0x94, 0x69, 0x85,
   0xCD, 0xD4, 0x5A, 0xA9, 0xCF, 0xF8, 0xAB, 0x0D,
   0xA2, 0xA5, 0x05, 0x71, 0x07, 0xC8, 0x08, 0x9C
};

static UINT8_A sha_hmac_msg_2[8] =
{
   0x48, 0x69, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65
};

static UINT8_A sha_hmac_key_2[20] ={
   0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
   0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
   0x0B, 0x0B, 0x0B, 0x0B
};

static UINT8_A sha_hmac_msg_2_hmac1[20] =
{
   0xb6, 0x17, 0x31, 0x86, 0x55, 0x05, 0x72, 0x64,
   0xe2, 0x8b, 0xc0, 0xb6, 0xfb, 0x37, 0x8c, 0x8e,
   0xf1, 0x46, 0xbe, 0x00
};

static UINT8_A sha_hmac_msg_2_hmac256[32] =
{
   0xB0, 0x34, 0x4C, 0x61, 0xD8, 0xDB, 0x38, 0x53,
   0x5C, 0xA8, 0xAF, 0xCE, 0xAF, 0x0B, 0xF1, 0x2B,
   0x88, 0x1D, 0xC2, 0x00, 0xC9, 0x83, 0x3D, 0xA7,
   0x26, 0xE9, 0x37, 0x6C, 0x2E, 0x32, 0xCF, 0xF7
};

static UINT8_A sha_hmac_msg_3[28] =
{
   0x77, 0x68, 0x61, 0x74, 0x20, 0x64, 0x6F, 0x20,
   0x79, 0x61, 0x20, 0x77, 0x61, 0x6E, 0x74, 0x20,
   0x66, 0x6F, 0x72, 0x20, 0x6E, 0x6F, 0x74, 0x68,
   0x69, 0x6E, 0x67, 0x3F
};

static UINT8_A sha_hmac_key_3[4] =
{
   0x4A, 0x65, 0x66, 0x65
};
static UINT8_A sha_hmac_msg_3_hmac1[20] =
{
   0xef, 0xfc, 0xdf, 0x6a, 0xe5, 0xeb, 0x2f, 0xa2,
   0xd2, 0x74, 0x16, 0xd5, 0xf1, 0x84, 0xdf, 0x9c,
   0x25, 0x9a, 0x7c, 0x79
};

static UINT8_A sha_hmac_msg_3_hmac256[32] =
{
   0x5B, 0xDC, 0xC1, 0x46, 0xBF, 0x60, 0x75, 0x4E,
   0x6A, 0x04, 0x24, 0x26, 0x08, 0x95, 0x75, 0xC7,
   0x5A, 0x00, 0x3F, 0x08, 0x9D, 0x27, 0x39, 0x83,
   0x9D, 0xEC, 0x58, 0xB9, 0x64, 0xEC, 0x38, 0x43
};

static UINT8_A sha_hmac_msg_4[50] =
{
   0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,
   0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,
   0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,
   0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,
   0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,
   0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD, 0xDD,
   0xDD, 0xDD
};

static UINT8_A sha_hmac_key_4[20] =
{
   0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
   0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
   0xAA, 0xAA, 0xAA, 0xAA
};

static UINT8_A sha_hmac_msg_4_hmac1[20] =
{
   0x12, 0x5d, 0x73, 0x42, 0xb9, 0xac, 0x11, 0xcd,
   0x91, 0xa3, 0x9a, 0xf4, 0x8a, 0xa1, 0x7b, 0x4f,
   0x63, 0xf1, 0x75, 0xd3
};

static UINT8_A sha_hmac_msg_4_hmac256[32] =
{
   0x77, 0x3E, 0xA9, 0x1E, 0x36, 0x80, 0x0E, 0x46,
   0x85, 0x4D, 0xB8, 0xEB, 0xD0, 0x91, 0x81, 0xA7,
   0x29, 0x59, 0x09, 0x8B, 0x3E, 0xF8, 0xC1, 0x22,
   0xD9, 0x63, 0x55, 0x14, 0xCE, 0xD5, 0x65, 0xFE
};

static UINT8_A sha_hmac_msg_5[50] =
{
   0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD,
   0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD,
   0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD,
   0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD,
   0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD,
   0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD,
   0xCD, 0xCD
};

static UINT8_A sha_hmac_key_5[25] =
{
   0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
   0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10,
   0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18,
   0x19
};

static UINT8_A sha_hmac_msg_5_hmac1[20] =
{
   0x4c, 0x90, 0x07, 0xf4, 0x02, 0x62, 0x50, 0xc6,
   0xbc, 0x84, 0x14, 0xf9, 0xbf, 0x50, 0xc8, 0x6c,
   0x2d, 0x72, 0x35, 0xda
};

static UINT8_A sha_hmac_msg_5_hmac256[32] =
{
   0x82, 0x55, 0x8A, 0x38, 0x9A, 0x44, 0x3C, 0x0E,
   0xA4, 0xCC, 0x81, 0x98, 0x99, 0xF2, 0x08, 0x3A,
   0x85, 0xF0, 0xFA, 0xA3, 0xE5, 0x78, 0xF8, 0x07,
   0x7A, 0x2E, 0x3F, 0xF4, 0x67, 0x29, 0x66, 0x5B
};

static UINT8_A sha_hmac_msg_6[54] =
{
   0x54, 0x65, 0x73, 0x74, 0x20, 0x55, 0x73, 0x69,
   0x6E, 0x67, 0x20, 0x4C, 0x61, 0x72, 0x67, 0x65,
   0x72, 0x20, 0x54, 0x68, 0x61, 0x6E, 0x20, 0x42,
   0x6C, 0x6F, 0x63, 0x6B, 0x2D, 0x53, 0x69, 0x7A,
   0x65, 0x20, 0x4B, 0x65, 0x79, 0x20, 0x2D, 0x20,
   0x48, 0x61, 0x73, 0x68, 0x20, 0x4B, 0x65, 0x79,
   0x20, 0x46, 0x69, 0x72, 0x73, 0x74
};

static UINT8_A sha_hmac_key_6[131] =
{
   0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
   0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
   0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
   0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
   0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
   0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
   0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
   0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
   0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
   0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
   0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
   0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
   0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
   0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
   0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
   0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
   0xAA, 0xAA, 0xAA
};

static UINT8_A sha_hmac_msg_6_hmac1[20] =
{
   0x90, 0xd0, 0xda, 0xce, 0x1c, 0x1b, 0xdc, 0x95,
   0x73, 0x39, 0x30, 0x78, 0x03, 0x16, 0x03, 0x35,
   0xbd, 0xe6, 0xdf, 0x2b
};

static UINT8_A sha_hmac_msg_6_hmac256[32] =
{
   0x60, 0xE4, 0x31, 0x59, 0x1E, 0xE0, 0xB6, 0x7F,
   0x0D, 0x8A, 0x26, 0xAA, 0xCB, 0xF5, 0xB7, 0x7F,
   0x8E, 0x0B, 0xC6, 0x21, 0x37, 0x28, 0xC5, 0x14,
   0x05, 0x46, 0x04, 0x0F, 0x0E, 0xE3, 0x7F, 0x54
};

static UINT8_A sha_hmac_msg_7[147] =
{
   0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20,
   0x61, 0x20, 0x74, 0x65, 0x73, 0x74, 0x20, 0x75,
   0x73, 0x69, 0x6E, 0x67, 0x20, 0x61, 0x20, 0x6C,
   0x61, 0x72, 0x67, 0x65, 0x72, 0x20, 0x74, 0x68,
   0x61, 0x6E, 0x20, 0x62, 0x6C, 0x6F, 0x63, 0x6B,
   0x2D, 0x73, 0x69, 0x7A, 0x65, 0x20, 0x6B, 0x65,
   0x79, 0x20, 0x61, 0x6E, 0x64, 0x20, 0x61, 0x20,
   0x6C, 0x61, 0x72, 0x67, 0x65, 0x72, 0x20, 0x74,
   0x68, 0x61, 0x6E, 0x20, 0x62, 0x6C, 0x6F, 0x63,
   0x6B, 0x2D, 0x73, 0x69, 0x7A, 0x65, 0x20, 0x64,
   0x61, 0x74, 0x61, 0x2E, 0x20, 0x54, 0x68, 0x65,
   0x20, 0x6B, 0x65, 0x79, 0x20, 0x6E, 0x65, 0x65,
   0x64, 0x73, 0x20, 0x74, 0x6F, 0x20, 0x62, 0x65,
   0x20, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x20,
   0x62, 0x65, 0x66, 0x6F, 0x72, 0x65, 0x20, 0x62,
   0x65, 0x69, 0x6E, 0x67, 0x20, 0x75, 0x73, 0x65,
   0x64, 0x20, 0x62, 0x79, 0x20, 0x48, 0x4D, 0x41,
   0x43, 0x20, 0x61, 0x6C, 0x67, 0x6F, 0x72, 0x69,
   0x74, 0x68, 0x6D
};

static UINT8_A sha_hmac_key_7[131] =
{
   0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
   0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
   0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
   0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
   0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
   0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
   0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
   0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
   0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
   0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
   0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
   0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
   0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
   0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
   0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
   0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA,
   0xAA, 0xAA, 0xAA
};

static UINT8_A sha_hmac_msg_7_hmac1[20] =
{
   0x34, 0xed, 0x59, 0x30, 0x63, 0x1c, 0x91, 0x48,
   0x1b, 0x7a, 0x0e, 0xbd, 0x47, 0x84, 0x58, 0x82,
   0xe2, 0x39, 0xce, 0xe9
};

static UINT8_A sha_hmac_msg_7_hmac256[32] =
{
   0x3C, 0xB1, 0x7A, 0xDD, 0x8A, 0x41, 0x81, 0x60,
   0xE5, 0x1C, 0x0D, 0x43, 0x9F, 0xE9, 0x8B, 0x2C,
   0xE5, 0x46, 0x4D, 0xEF, 0xB6, 0x80, 0x89, 0x71,
   0x09, 0xED, 0x70, 0x0B, 0x8D, 0xB6, 0x2C, 0xF9
};

typedef struct sha_hmac_vector_type
{
   uint8 *msg;
   uint32 msg_len;
   uint8 *hmac_key;
   uint32 hmac_key_len;
   uint8 *msg_hmac1;
   uint8 *msg_hmac256;
} __attribute__ ((packed)) sha_hmac_vector_type_t;

static sha_hmac_vector_type_t sha_hmac_test_vectors[] =
{
   {sha_hmac_msg_1, sizeof(sha_hmac_msg_1), sha_hmac_key_1,
      sizeof(sha_hmac_key_1), sha_hmac_msg_1_hmac1, sha_hmac_msg_1_hmac256}
   ,
   {sha_hmac_msg_2, sizeof(sha_hmac_msg_2), sha_hmac_key_2,
      sizeof(sha_hmac_key_2), sha_hmac_msg_2_hmac1, sha_hmac_msg_2_hmac256}
   ,
   {sha_hmac_msg_3, sizeof(sha_hmac_msg_3), sha_hmac_key_3,
      sizeof(sha_hmac_key_3), sha_hmac_msg_3_hmac1, sha_hmac_msg_3_hmac256}
   ,
   {sha_hmac_msg_4, sizeof(sha_hmac_msg_4), sha_hmac_key_4,
      sizeof(sha_hmac_key_4), sha_hmac_msg_4_hmac1, sha_hmac_msg_4_hmac256}
   ,
   {sha_hmac_msg_5, sizeof(sha_hmac_msg_5), sha_hmac_key_5,
      sizeof(sha_hmac_key_5), sha_hmac_msg_5_hmac1, sha_hmac_msg_5_hmac256}
   ,
   {sha_hmac_msg_6, sizeof(sha_hmac_msg_6), sha_hmac_key_6,
      sizeof(sha_hmac_key_6), sha_hmac_msg_6_hmac1, sha_hmac_msg_6_hmac256}
   ,
   {sha_hmac_msg_7, sizeof(sha_hmac_msg_7), sha_hmac_key_7,
      sizeof(sha_hmac_key_7), sha_hmac_msg_7_hmac1, sha_hmac_msg_7_hmac256}
};

#endif // __CRYPTO_HMAC_TEST_VECTORS_H__

