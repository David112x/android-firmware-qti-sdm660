/*
    @file crypto_cipher_test_vectors.h
    @brief This file contains all test vectors used in various crypto test apps
*/
/*===========================================================================
  Copyright (c) 2016 by Qualcomm Technologies, Incorporated.  All Rights Reserved.
  ===========================================================================*/

/*===========================================================================

    EDIT HISTORY FOR FILE
    $Header: //components/rel/core.tz/1.0.7.1/securemsm/trustzone/qsapps/common/crypto_cipher_test_vectors.h#1 $
    $DateTime: 2020/01/14 12:35:09 $
    $Author: pwbldsvc $

# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
 11/10/16    shl     added more test cases for cbc and cts

===========================================================================*/
#ifndef __CRYPTO_CIPHER_TEST_VECTORS_H__
#define __CRYPTO_CIPHER_TEST_VECTORS_H__

#include <comdef.h>
#include "crypto_common_test_vectors.h"
#include "qsee_cipher.h"
#include "qsee_uf_aes.h"
#include "stddef.h"

//CE CCM Vectors
static UINT8_A aesccm_iv_1[] =
{
    0x07, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static UINT8_A aesccm128_key_1[] =
{
    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
    0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f
};

static UINT8_A aesccm128_nonce_1[] =
{
    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16
};

//8 bytes of Associated header data with 8 bytes of padding, 4 bytes of PT = payload
static UINT8_A aesccm128_plain_text_1[] =
{
    0x00, 0x00,                                     //Padding
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, //Associated header data
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,             //Padding
    0x20, 0x21, 0x22, 0x23,                         //PT = payload
};

//8 bytes of Associated header data with 8 bytes of padding, 4 bytes of CT, 4 bytes of MAC
static UINT8_A aesccm128_cipher_text_1[] =
{
    0x00, 0x00,                                     //Padding
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, //Associated header data
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,             //Padding
    0x71, 0x62, 0x01, 0x5b,                         //CT
    0x4d, 0xac, 0x25, 0x5d                          //MAC
};

static UINT8_A aesccm_iv_2[] =
{
    0x06, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
    0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static UINT8_A aesccm128_key_2[] =
{
    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
    0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f
};

static UINT8_A aesccm128_nonce_2[] =
{
    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17
};

//16 bytes of Associated header data with 16 bytes of padding, 16 bytes of PT = payload
static UINT8_A aesccm128_plain_text_2[] =
{
    0x00, 0x00,                                     //Padding
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, //Associated header data
    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //Padding
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, //PT = payload
    0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f
};

//16 bytes of Associated header data with 16 bytes of padding, 16 bytes of CT, 6 bytes of MAC
static UINT8_A aesccm128_cipher_text_2[] =
{
    0x00, 0x00,                                     //Padding
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, //Associated header data
    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //Padding
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xd2, 0xa1, 0xf0, 0xe0, 0x51, 0xea, 0x5f, 0x62, //CT
    0x08, 0x1a, 0x77, 0x92, 0x07, 0x3d, 0x59, 0x3d,
    0x1f, 0xc6, 0x4f, 0xbf, 0xac, 0xcd              //MAC
};

static UINT8_A aesccm_iv_3[] =
{
    0x02, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
    0x17, 0x18, 0x19, 0x1a, 0x1b, 0x00, 0x00, 0x00
};

static UINT8_A aesccm128_key_3[] =
{
    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
    0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f
};

static UINT8_A aesccm128_nonce_3[] =
{
    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
    0x18, 0x19, 0x1a, 0x1b,
};

//20 bytes of Associated header data with 12 bytes of padding, 24 bytes of PT = payload
static UINT8_A aesccm128_plain_text_3[] =
{
    0x00, 0x00,                                     //Padding
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, //Associated header data
    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
    0x10, 0x11, 0x12, 0x13,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //Padding
    0x00, 0x00,
    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, //PT = payload
    0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
};

//20 bytes of Associated header data with 12 bytes of padding, 24 bytes of CT, 8 bytes of MAC
static UINT8_A aesccm128_cipher_text_3[] =
{
    0x00, 0x00,                                     //Padding
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, //Associated header data
    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
    0x10, 0x11, 0x12, 0x13,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //Padding
    0x00, 0x00,
    0xe3, 0xb2, 0x01, 0xa9, 0xf5, 0xb7, 0x1a, 0x7a, //CT
    0x9b, 0x1c, 0xea, 0xec, 0xcd, 0x97, 0xe7, 0x0b,
    0x61, 0x76, 0xaa, 0xd9, 0xa4, 0x42, 0x8a, 0xa5,
    0x48, 0x43, 0x92, 0xfb, 0xc1, 0xb0, 0x99, 0x51, //MAC
};

typedef struct
{
    QSEE_CIPHER_ALGO_ET  alg;
    QSEE_CIPHER_MODE_ET  mode;
    uint8 *pt;
    uint32 pt_len;
    uint8 *key;
    uint32 key_len;
    uint8 *iv;
    uint8 *nonce;
    uint32 nonce_len;
    uint32 payload_len;
    uint8 *ct;
    uint32 ct_len;
    uint8 *ct2;
    uint32 header_len;
    uint32 sw_verify;
}__attribute__ ((packed)) aes_ccm_vector_type;

static aes_ccm_vector_type aes_ccm_test_vectors[] =
{
    {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CCM,
        aesccm128_plain_text_1, sizeof(aesccm128_plain_text_1), aesccm128_key_1,
        sizeof(aesccm128_key_1), aesccm_iv_1, aesccm128_nonce_1, sizeof(aesccm128_nonce_1),
        4, aesccm128_cipher_text_1, sizeof(aesccm128_cipher_text_1), aes_large_cipher_text3, 8, 0},

    {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CCM,
        aesccm128_plain_text_2, sizeof(aesccm128_plain_text_2), aesccm128_key_2,
        sizeof(aesccm128_key_2), aesccm_iv_2, aesccm128_nonce_2, sizeof(aesccm128_nonce_2),
        16, aesccm128_cipher_text_2, sizeof(aesccm128_cipher_text_2), aes_large_cipher_text3, 16, 0},

    {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CCM,
        aesccm128_plain_text_3, sizeof(aesccm128_plain_text_3), aesccm128_key_3,
        sizeof(aesccm128_key_3), aesccm_iv_3, aesccm128_nonce_3, sizeof(aesccm128_nonce_3),
        24, aesccm128_cipher_text_3, sizeof(aesccm128_cipher_text_3), aes_large_cipher_text3, 20, 0}
};

static aes_ccm_vector_type aes_ccm_test_vectors_1 =
{
    QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CCM,
    aes_large_plain_text2, 0, aesccm128_key_1, sizeof(aesccm128_key_1),
    aesccm_iv_1, aesccm128_nonce_1, sizeof(aesccm128_nonce_1),
    0, aes_large_cipher_text2, 0, aes_large_cipher_text3, 0, 1
};

//SW AES - CCM Vectors
//Key data
static UINT8_A ccm128_key_1[] =
{
    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f
};

//IV/Nonce
static UINT8_A ccm128_iv_1[] =
{
    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16
};

//Header data
static UINT8_A ccm128_header_data_1[] =
{
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07
};

//Plain text
static UINT8_A ccm128_plain_text_1[] =
{
    0x20, 0x21, 0x22, 0x23
};

//Cipher text
static UINT8_A ccm128_cipher_text_1[] =
{
    0x71, 0x62, 0x01, 0x5b,
};

//MAC Data
static UINT8_A ccm128_mac_data_1[] =
{
    0x4d, 0xac, 0x25, 0x5d
};

//Key data
static UINT8_A ccm128_key_2[] =
{
    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f
};

//IV/Nonce
static UINT8_A ccm128_iv_2[] =
{
    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17
};

//Header data
static UINT8_A ccm128_header_data_2[] =
{
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
};

//Plain text
static UINT8_A ccm128_plain_text_2[] =
{
    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
};

//Cipher text
static UINT8_A ccm128_cipher_text_2[] =
{
    0xd2, 0xa1, 0xf0, 0xe0, 0x51, 0xea, 0x5f, 0x62, 0x08, 0x1a, 0x77, 0x92, 0x07, 0x3d, 0x59, 0x3d,
};

//MAC Data
static UINT8_A ccm128_mac_data_2[] =
{
    0x1f, 0xc6, 0x4f, 0xbf, 0xac, 0xcd
};

//Key data
static UINT8_A ccm128_key_3[] =
{
    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f
};

//IV/Nonce
static UINT8_A ccm128_iv_3[] =
{
    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b,
};

//Header data
static UINT8_A ccm128_header_data_3[] =
{
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13
};

//Plain text
static UINT8_A ccm128_plain_text_3[] =
{
    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37
};

//Cipher text
static UINT8_A ccm128_cipher_text_3[] =
{
    0xe3, 0xb2, 0x01, 0xa9, 0xf5, 0xb7, 0x1a, 0x7a, 0x9b, 0x1c, 0xea, 0xec, 0xcd, 0x97, 0xe7, 0x0b,
    0x61, 0x76, 0xaa, 0xd9, 0xa4, 0x42, 0x8a, 0xa5,
};

//MAC Data
static UINT8_A ccm128_mac_data_3[] =
{
    0x48, 0x43, 0x92, 0xfb, 0xc1, 0xb0, 0x99, 0x51
};

typedef struct
{
    uint8*               pt;
    uint32               pt_len;
    uint8*               key;
    uint32               key_len;
    uint8*               iv;
    uint32               iv_len;
    uint8*               ct;
    uint8*               header;
    uint32               header_len;
    uint8*               mac;
    uint32               mac_len;
} __attribute__ ((packed)) uf_aes_ccm_vector_type;

/* AES CCM test vectors array */
uf_aes_ccm_vector_type aes_ccm_test_vectors_uf[] =
{
    { ccm128_plain_text_1, sizeof(ccm128_plain_text_1), ccm128_key_1, sizeof(ccm128_key_1),
        ccm128_iv_1, sizeof(ccm128_iv_1), ccm128_cipher_text_1, ccm128_header_data_1,
        sizeof(ccm128_header_data_1), ccm128_mac_data_1, sizeof(ccm128_mac_data_1) }
    ,

        { ccm128_plain_text_2, sizeof(ccm128_plain_text_2), ccm128_key_2, sizeof(ccm128_key_2),
            ccm128_iv_2, sizeof(ccm128_iv_2), ccm128_cipher_text_2, ccm128_header_data_2,
            sizeof(ccm128_header_data_2), ccm128_mac_data_2, sizeof(ccm128_mac_data_2) }
    ,

        { ccm128_plain_text_3, sizeof(ccm128_plain_text_3), ccm128_key_3, sizeof(ccm128_key_3),
            ccm128_iv_3, sizeof(ccm128_iv_3), ccm128_cipher_text_3, ccm128_header_data_3,
            sizeof(ccm128_header_data_3), ccm128_mac_data_3, sizeof(ccm128_mac_data_3) }
    ,
};

/* AES-128 ECB test vectors */
static UINT8_A aes_plain_text_1[] =
{
    0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
    0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a
};

static UINT8_A aes_key_1[] =
{
    0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
    0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
};

static UINT8_A aes_cipher_text_1[] =
{
    0x3a, 0xd7, 0x7b, 0xb4, 0x0d, 0x7a, 0x36, 0x60,
    0xa8, 0x9e, 0xca, 0xf3, 0x24, 0x66, 0xef, 0x97
};

/* AES-128 CBC test vectors */
static UINT8_A aes_plain_text_2[] =
{
    0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
    0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a
};

static UINT8_A aes_key_2[] =
{
    0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
    0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
};

static UINT8_A aes_iv_2[] =
{
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
    0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
};

static UINT8_A aes_cipher_text_2[] =
{
    0x76, 0x49, 0xab, 0xac, 0x81, 0x19, 0xb2, 0x46,
    0xce, 0xe9, 0x8e, 0x9b, 0x12, 0xe9, 0x19, 0x7d
};

/* AES-128 CTR test vectors */
static UINT8_A aes_plain_text_3[] =
{
    0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
    0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a
};

static UINT8_A aes_key_3[] =
{
    0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
    0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
};

static UINT8_A aes_iv_3[] =
{
    0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,
    0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff
};

static UINT8_A aes_cipher_text_3[] =
{
    0x87, 0x4d, 0x61, 0x91, 0xb6, 0x20, 0xe3, 0x26,
    0x1b, 0xef, 0x68, 0x64, 0x99, 0x0d, 0xb6, 0xce
};

static UINT8_A aes_iv_4[] =
{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

/* AES-256 ECB test vectors */
static UINT8_A aes256_plain_text_1[] =
{
    0x06, 0x9A, 0x00, 0x7F, 0xC7, 0x6A, 0x45, 0x9F,
    0x98, 0xBA, 0xF9, 0x17, 0xFE, 0xDF, 0x95, 0x21
};

static UINT8_A aes256_key_1[] =
{
    0x08, 0x09, 0x0A, 0x0B, 0x0D, 0x0E, 0x0F, 0x10,
    0x12, 0x13, 0x14, 0x15, 0x17, 0x18, 0x19, 0x1A,
    0x1C, 0x1D, 0x1E, 0x1F, 0x21, 0x22, 0x23, 0x24,
    0x26, 0x27, 0x28, 0x29, 0x2B, 0x2C, 0x2D, 0x2E
};

static UINT8_A aes256_cipher_text_1[] =
{
    0x08, 0x0e, 0x95, 0x17, 0xeb, 0x16, 0x77, 0x71,
    0x9a, 0xcf, 0x72, 0x80, 0x86, 0x04, 0x0a, 0xe3
};

/* AES-256 CBC test vectors */
static UINT8_A aes256_plain_text_2[] =
{
    0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
    0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a
};

static UINT8_A aes256_key_2[] =
{
    0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe,
    0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
    0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7,
    0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4
};

static UINT8_A aes256_iv_2[] =
{
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
    0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
};

static UINT8_A aes256_cipher_text_2[] =
{
    0xf5, 0x8c, 0x4c, 0x04, 0xd6, 0xe5, 0xf1, 0xba,
    0x77, 0x9e, 0xab, 0xfb, 0x5f, 0x7b, 0xfb, 0xd6
};

/* AES-256 CTR test vectors */
static UINT8_A aes256_plain_text_3[] =
{
    0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
    0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a
};

static UINT8_A aes256_key_3[] =
{
    0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe,
    0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81,
    0x1f, 0x35, 0x2c, 0x07, 0x3b, 0x61, 0x08, 0xd7,
    0x2d, 0x98, 0x10, 0xa3, 0x09, 0x14, 0xdf, 0xf4

};

static UINT8_A aes256_iv_3[] =
{
    0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7,
    0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff
};

static UINT8_A aes256_cipher_text_3[] =
{
    0x60, 0x1e, 0xc3, 0x13, 0x77, 0x57, 0x89, 0xa5,
    0xb7, 0xa7, 0xf5, 0x04, 0xbb, 0xf3, 0xd2, 0x28
};

typedef struct aes_vector_type
{
    QSEE_CIPHER_ALGO_ET  alg;
    QSEE_CIPHER_MODE_ET  mode;
    uint8*               pt;
    uint32               pt_len;
    uint8*               key;
    uint32               key_len;
    uint8*               iv;
    uint8*               ct;
} __attribute__ ((packed)) aes_vector_type_t;

typedef struct
{
    QSEE_CIPHER_ALGO_ET  alg;
    QSEE_CIPHER_MODE_ET  mode;
    uint8*               pt;
    uint32               pt_len;
    uint8*               key;
    uint32               key_len;
    uint8*               iv;
    uint8*               ct;
    uint8*               ct2;
} __attribute__ ((packed)) aes_vector_t_2;

/* AES-128 and AES-256 test vectors array */
aes_vector_type_t aes_test_vectors[] =
{
    {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CTS, aes_plain_text_2,
        sizeof(aes_plain_text_2), aes_key_2, 16,
        aes_iv_2, aes_cipher_text_2}
    ,
        {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_ECB, aes_plain_text_1,
            sizeof(aes_plain_text_1), aes_key_1, 16, NULL,
            aes_cipher_text_1}
    ,
        {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CBC, aes_plain_text_2,
            sizeof(aes_plain_text_2), aes_key_2, 16,
            aes_iv_2, aes_cipher_text_2}
    ,
        {QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CTR, aes_plain_text_3,
            sizeof(aes_plain_text_3), aes_key_3, 16,
            aes_iv_3, aes_cipher_text_3}
    ,
        {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_ECB, aes256_plain_text_1,
            sizeof(aes256_plain_text_1), aes256_key_1, 32,
            NULL, aes256_cipher_text_1}
    ,
        {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_CBC, aes256_plain_text_2,
            sizeof(aes256_plain_text_2), aes256_key_2, 32,
            aes256_iv_2, aes256_cipher_text_2}
    ,
        {QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_CTR, aes256_plain_text_3,
            sizeof(aes256_plain_text_3), aes256_key_3, 32,
            aes256_iv_3, aes256_cipher_text_3}
    ,
};

aes_vector_t_2 aes_test_vectors_2 =
{
    QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_CBC, NULL, 0,
    aes_key_1, sizeof(aes_key_1), aes_iv_2, NULL, NULL
};


UINT8_A plain_text[] = 
{
   0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
   0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
   0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
   0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10
};

UINT8_A key_128[] = 
{
   0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
};

// no iv needed for ecb
UINT8_A ecb_cipher_text[] = 
{
   0x3a, 0xd7, 0x7b, 0xb4, 0x0d, 0x7a, 0x36, 0x60, 0xa8, 0x9e, 0xca, 0xf3, 0x24, 0x66, 0xef, 0x97,
   0xf5, 0xd3, 0xd5, 0x85, 0x03, 0xb9, 0x69, 0x9d, 0xe7, 0x85, 0x89, 0x5a, 0x96, 0xfd, 0xba, 0xaf,
   0x43, 0xb1, 0xcd, 0x7f, 0x59, 0x8e, 0xce, 0x23, 0x88, 0x1b, 0x00, 0xe3, 0xed, 0x03, 0x06, 0x88,
   0x7b, 0x0c, 0x78, 0x5e, 0x27, 0xe8, 0xad, 0x3f, 0x82, 0x23, 0x20, 0x71, 0x04, 0x72, 0x5d, 0xd4
};

UINT8_A iv_cbc[] = 
{
   0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f
};

UINT8_A cbc_cipher_text[] = 
{
   0x76, 0x49, 0xab, 0xac, 0x81, 0x19, 0xb2, 0x46, 0xce, 0xe9, 0x8e, 0x9b, 0x12, 0xe9, 0x19, 0x7d,
   0x50, 0x86, 0xcb, 0x9b, 0x50, 0x72, 0x19, 0xee, 0x95, 0xdb, 0x11, 0x3a, 0x91, 0x76, 0x78, 0xb2,
   0x73, 0xbe, 0xd6, 0xb8, 0xe3, 0xc1, 0x74, 0x3b, 0x71, 0x16, 0xe6, 0x9e, 0x22, 0x22, 0x95, 0x16,
   0x3f, 0xf1, 0xca, 0xa1, 0x68, 0x1f, 0xac, 0x09, 0x12, 0x0e, 0xca, 0x30, 0x75, 0x86, 0xe1, 0xa7
};


UINT8_A key_cts[] = 
{
   0x63, 0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x20, 0x74, 0x65, 0x72, 0x69, 0x79, 0x61, 0x6b, 0x69
};

UINT8_A iv_cts[] = 
{
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

UINT8_A plain_text_cts_1[] = 
{
   0x49, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x74, 0x68, 0x65, 
   0x20
};

UINT8_A cipher_text_cts_1[] = 
{
   0xc6, 0x35, 0x35, 0x68, 0xf2, 0xbf, 0x8c, 0xb4, 0xd8, 0xa5, 0x80, 0x36, 0x2d, 0xa7, 0xff, 0x7f, 
   0x97
};

UINT8_A plain_text_cts_2[] = 
{
   0x49, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x74, 0x68, 0x65, 
   0x20, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x47, 0x61, 0x75, 0x27, 0x73, 0x20
};

UINT8_A cipher_text_cts_2[] = 
{
   0xfc, 0x00, 0x78, 0x3e, 0x0e, 0xfd, 0xb2, 0xc1, 0xd4, 0x45, 0xd4, 0xc8, 0xef, 0xf7, 0xed, 0x22, 
   0x97, 0x68, 0x72, 0x68, 0xd6, 0xec, 0xcc, 0xc0, 0xc0, 0x7b, 0x25, 0xe2, 0x5e, 0xcf, 0xe5
};

UINT8_A plain_text_cts_3[] = 
{
   0x49, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x74, 0x68, 0x65, 
   0x20, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x47, 0x61, 0x75, 0x27, 0x73, 0x20, 0x43
};

UINT8_A cipher_text_cts_3[] = 
{
   0x97, 0x68, 0x72, 0x68, 0xd6, 0xec, 0xcc, 0xc0, 0xc0, 0x7b, 0x25, 0xe2, 0x5e, 0xcf, 0xe5, 0x84, 
   0x39, 0x31, 0x25, 0x23, 0xa7, 0x86, 0x62, 0xd5, 0xbe, 0x7f, 0xcb, 0xcc, 0x98, 0xeb, 0xf5, 0xa8
};

UINT8_A plain_text_cts_4[] = 
{
   0x49, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6c, 0x69, 0x6b, 0x65, 0x20, 0x74, 0x68, 0x65, 
   0x20, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x20, 0x47, 0x61, 0x75, 0x27, 0x73, 0x20, 0x43, 
   0x68, 0x69, 0x63, 0x6b, 0x65, 0x6e, 0x2c, 0x20, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2c
};

UINT8_A cipher_text_cts_4[] = 
{
   0x97, 0x68, 0x72, 0x68, 0xd6, 0xec, 0xcc, 0xc0, 0xc0, 0x7b, 0x25, 0xe2, 0x5e, 0xcf, 0xe5, 0x84, 
   0xb3, 0xff, 0xfd, 0x94, 0x0c, 0x16, 0xa1, 0x8c, 0x1b, 0x55, 0x49, 0xd2, 0xf8, 0x38, 0x02, 0x9e, 
   0x39, 0x31, 0x25, 0x23, 0xa7, 0x86, 0x62, 0xd5, 0xbe, 0x7f, 0xcb, 0xcc, 0x98, 0xeb, 0xf5  
};


typedef struct uf_aes_vector_type
{
    SW_Cipher_Alg_Type   alg;
    SW_CipherModeType    mode;
    uint8*               pt;
    uint32               pt_len;
    uint8*               key;
    uint32               key_len;
    uint8*               iv;
    uint8*               ct;
} __attribute__ ((packed)) uf_aes_vector_type_t;

/* AES-128 test vectors array */
uf_aes_vector_type_t sw_aes_test_vectors[] =
{
    {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_ECB, aes_plain_text_1,
        sizeof(aes_plain_text_1), aes_key_1, 16, NULL,
        aes_cipher_text_1}
    ,
        {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CBC, aes_plain_text_2,
            sizeof(aes_plain_text_2), aes_key_2, 16,
            aes_iv_2, aes_cipher_text_2}
    ,
        {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CTR, aes_plain_text_3,
            sizeof(aes_plain_text_3), aes_key_3, 16,
            aes_iv_3, aes_cipher_text_3}
    ,
        {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_ECB, plain_text,
            sizeof(plain_text), key_128, 16,
            NULL, ecb_cipher_text}
    ,
        {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CBC, plain_text,
            sizeof(plain_text), key_128, 16,
            iv_cbc, cbc_cipher_text}
    ,
        {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CTS, plain_text_cts_1,
            sizeof(plain_text_cts_1), key_cts, 16,
            iv_cts, cipher_text_cts_1}
    ,
        {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CTS, plain_text_cts_2,
            sizeof(plain_text_cts_2), key_cts, 16,
            iv_cts, cipher_text_cts_2}
    ,
        {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CTS, plain_text_cts_3,
            sizeof(plain_text_cts_3), key_cts, 16,
            iv_cts, cipher_text_cts_3}
    ,
        {SW_CIPHER_ALG_AES128, SW_CIPHER_MODE_CTS, plain_text_cts_4,
            sizeof(plain_text_cts_4), key_cts, 16,
            iv_cts, cipher_text_cts_4}
    ,

};

/* AES GCM test vectors */
#define MAX_TESTS   6

int key_index_gcm[MAX_TESTS] =
{ 0, 0, 1, 1, 1, 1 };

unsigned char key_gcm[MAX_TESTS][32] =
{
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
        0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08,
        0xfe, 0xff, 0xe9, 0x92, 0x86, 0x65, 0x73, 0x1c,
        0x6d, 0x6a, 0x8f, 0x94, 0x67, 0x30, 0x83, 0x08 },
};

size_t iv_len_gcm[MAX_TESTS] =
{ 12, 12, 12, 12, 8, 60 };

int iv_index_gcm[MAX_TESTS] =
{ 0, 0, 1, 1, 1, 2 };

unsigned char iv_gcm[MAX_TESTS][64] =
{
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00 },
    { 0xca, 0xfe, 0xba, 0xbe, 0xfa, 0xce, 0xdb, 0xad,
        0xde, 0xca, 0xf8, 0x88 },
    { 0x93, 0x13, 0x22, 0x5d, 0xf8, 0x84, 0x06, 0xe5,
        0x55, 0x90, 0x9c, 0x5a, 0xff, 0x52, 0x69, 0xaa,
        0x6a, 0x7a, 0x95, 0x38, 0x53, 0x4f, 0x7d, 0xa1,
        0xe4, 0xc3, 0x03, 0xd2, 0xa3, 0x18, 0xa7, 0x28,
        0xc3, 0xc0, 0xc9, 0x51, 0x56, 0x80, 0x95, 0x39,
        0xfc, 0xf0, 0xe2, 0x42, 0x9a, 0x6b, 0x52, 0x54,
        0x16, 0xae, 0xdb, 0xf5, 0xa0, 0xde, 0x6a, 0x57,
        0xa6, 0x37, 0xb3, 0x9b },
};

size_t add_len_gcm[MAX_TESTS] =
{ 0, 0, 0, 20, 20, 20 };

int add_index_gcm[MAX_TESTS] =
{ 0, 0, 0, 1, 1, 1 };

unsigned char additional_gcm[MAX_TESTS][64] =
{
    { 0x00 },
    { 0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,
        0xfe, 0xed, 0xfa, 0xce, 0xde, 0xad, 0xbe, 0xef,
        0xab, 0xad, 0xda, 0xd2 },
};

size_t pt_len_gcm[MAX_TESTS] =
{ 0, 16, 64, 60, 60, 60 };

int pt_index_gcm[MAX_TESTS] =
{ 0, 0, 1, 1, 1, 1 };

unsigned char pt_gcm[MAX_TESTS][64] =
{
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0xd9, 0x31, 0x32, 0x25, 0xf8, 0x84, 0x06, 0xe5,
        0xa5, 0x59, 0x09, 0xc5, 0xaf, 0xf5, 0x26, 0x9a,
        0x86, 0xa7, 0xa9, 0x53, 0x15, 0x34, 0xf7, 0xda,
        0x2e, 0x4c, 0x30, 0x3d, 0x8a, 0x31, 0x8a, 0x72,
        0x1c, 0x3c, 0x0c, 0x95, 0x95, 0x68, 0x09, 0x53,
        0x2f, 0xcf, 0x0e, 0x24, 0x49, 0xa6, 0xb5, 0x25,
        0xb1, 0x6a, 0xed, 0xf5, 0xaa, 0x0d, 0xe6, 0x57,
        0xba, 0x63, 0x7b, 0x39, 0x1a, 0xaf, 0xd2, 0x55 },
};

unsigned char ct_gcm[MAX_TESTS * 3][64] =
{
    { 0x00 },
    { 0x03, 0x88, 0xda, 0xce, 0x60, 0xb6, 0xa3, 0x92,
        0xf3, 0x28, 0xc2, 0xb9, 0x71, 0xb2, 0xfe, 0x78 },
    { 0x42, 0x83, 0x1e, 0xc2, 0x21, 0x77, 0x74, 0x24,
        0x4b, 0x72, 0x21, 0xb7, 0x84, 0xd0, 0xd4, 0x9c,
        0xe3, 0xaa, 0x21, 0x2f, 0x2c, 0x02, 0xa4, 0xe0,
        0x35, 0xc1, 0x7e, 0x23, 0x29, 0xac, 0xa1, 0x2e,
        0x21, 0xd5, 0x14, 0xb2, 0x54, 0x66, 0x93, 0x1c,
        0x7d, 0x8f, 0x6a, 0x5a, 0xac, 0x84, 0xaa, 0x05,
        0x1b, 0xa3, 0x0b, 0x39, 0x6a, 0x0a, 0xac, 0x97,
        0x3d, 0x58, 0xe0, 0x91, 0x47, 0x3f, 0x59, 0x85 },
    { 0x42, 0x83, 0x1e, 0xc2, 0x21, 0x77, 0x74, 0x24,
        0x4b, 0x72, 0x21, 0xb7, 0x84, 0xd0, 0xd4, 0x9c,
        0xe3, 0xaa, 0x21, 0x2f, 0x2c, 0x02, 0xa4, 0xe0,
        0x35, 0xc1, 0x7e, 0x23, 0x29, 0xac, 0xa1, 0x2e,
        0x21, 0xd5, 0x14, 0xb2, 0x54, 0x66, 0x93, 0x1c,
        0x7d, 0x8f, 0x6a, 0x5a, 0xac, 0x84, 0xaa, 0x05,
        0x1b, 0xa3, 0x0b, 0x39, 0x6a, 0x0a, 0xac, 0x97,
        0x3d, 0x58, 0xe0, 0x91 },
    { 0x61, 0x35, 0x3b, 0x4c, 0x28, 0x06, 0x93, 0x4a,
        0x77, 0x7f, 0xf5, 0x1f, 0xa2, 0x2a, 0x47, 0x55,
        0x69, 0x9b, 0x2a, 0x71, 0x4f, 0xcd, 0xc6, 0xf8,
        0x37, 0x66, 0xe5, 0xf9, 0x7b, 0x6c, 0x74, 0x23,
        0x73, 0x80, 0x69, 0x00, 0xe4, 0x9f, 0x24, 0xb2,
        0x2b, 0x09, 0x75, 0x44, 0xd4, 0x89, 0x6b, 0x42,
        0x49, 0x89, 0xb5, 0xe1, 0xeb, 0xac, 0x0f, 0x07,
        0xc2, 0x3f, 0x45, 0x98 },
    { 0x8c, 0xe2, 0x49, 0x98, 0x62, 0x56, 0x15, 0xb6,
        0x03, 0xa0, 0x33, 0xac, 0xa1, 0x3f, 0xb8, 0x94,
        0xbe, 0x91, 0x12, 0xa5, 0xc3, 0xa2, 0x11, 0xa8,
        0xba, 0x26, 0x2a, 0x3c, 0xca, 0x7e, 0x2c, 0xa7,
        0x01, 0xe4, 0xa9, 0xa4, 0xfb, 0xa4, 0x3c, 0x90,
        0xcc, 0xdc, 0xb2, 0x81, 0xd4, 0x8c, 0x7c, 0x6f,
        0xd6, 0x28, 0x75, 0xd2, 0xac, 0xa4, 0x17, 0x03,
        0x4c, 0x34, 0xae, 0xe5 },
    { 0x00 },
    { 0x98, 0xe7, 0x24, 0x7c, 0x07, 0xf0, 0xfe, 0x41,
        0x1c, 0x26, 0x7e, 0x43, 0x84, 0xb0, 0xf6, 0x00 },
    { 0x39, 0x80, 0xca, 0x0b, 0x3c, 0x00, 0xe8, 0x41,
        0xeb, 0x06, 0xfa, 0xc4, 0x87, 0x2a, 0x27, 0x57,
        0x85, 0x9e, 0x1c, 0xea, 0xa6, 0xef, 0xd9, 0x84,
        0x62, 0x85, 0x93, 0xb4, 0x0c, 0xa1, 0xe1, 0x9c,
        0x7d, 0x77, 0x3d, 0x00, 0xc1, 0x44, 0xc5, 0x25,
        0xac, 0x61, 0x9d, 0x18, 0xc8, 0x4a, 0x3f, 0x47,
        0x18, 0xe2, 0x44, 0x8b, 0x2f, 0xe3, 0x24, 0xd9,
        0xcc, 0xda, 0x27, 0x10, 0xac, 0xad, 0xe2, 0x56 },
    { 0x39, 0x80, 0xca, 0x0b, 0x3c, 0x00, 0xe8, 0x41,
        0xeb, 0x06, 0xfa, 0xc4, 0x87, 0x2a, 0x27, 0x57,
        0x85, 0x9e, 0x1c, 0xea, 0xa6, 0xef, 0xd9, 0x84,
        0x62, 0x85, 0x93, 0xb4, 0x0c, 0xa1, 0xe1, 0x9c,
        0x7d, 0x77, 0x3d, 0x00, 0xc1, 0x44, 0xc5, 0x25,
        0xac, 0x61, 0x9d, 0x18, 0xc8, 0x4a, 0x3f, 0x47,
        0x18, 0xe2, 0x44, 0x8b, 0x2f, 0xe3, 0x24, 0xd9,
        0xcc, 0xda, 0x27, 0x10 },
    { 0x0f, 0x10, 0xf5, 0x99, 0xae, 0x14, 0xa1, 0x54,
        0xed, 0x24, 0xb3, 0x6e, 0x25, 0x32, 0x4d, 0xb8,
        0xc5, 0x66, 0x63, 0x2e, 0xf2, 0xbb, 0xb3, 0x4f,
        0x83, 0x47, 0x28, 0x0f, 0xc4, 0x50, 0x70, 0x57,
        0xfd, 0xdc, 0x29, 0xdf, 0x9a, 0x47, 0x1f, 0x75,
        0xc6, 0x65, 0x41, 0xd4, 0xd4, 0xda, 0xd1, 0xc9,
        0xe9, 0x3a, 0x19, 0xa5, 0x8e, 0x8b, 0x47, 0x3f,
        0xa0, 0xf0, 0x62, 0xf7 },
    { 0xd2, 0x7e, 0x88, 0x68, 0x1c, 0xe3, 0x24, 0x3c,
        0x48, 0x30, 0x16, 0x5a, 0x8f, 0xdc, 0xf9, 0xff,
        0x1d, 0xe9, 0xa1, 0xd8, 0xe6, 0xb4, 0x47, 0xef,
        0x6e, 0xf7, 0xb7, 0x98, 0x28, 0x66, 0x6e, 0x45,
        0x81, 0xe7, 0x90, 0x12, 0xaf, 0x34, 0xdd, 0xd9,
        0xe2, 0xf0, 0x37, 0x58, 0x9b, 0x29, 0x2d, 0xb3,
        0xe6, 0x7c, 0x03, 0x67, 0x45, 0xfa, 0x22, 0xe7,
        0xe9, 0xb7, 0x37, 0x3b },
    { 0x00 },
    { 0xce, 0xa7, 0x40, 0x3d, 0x4d, 0x60, 0x6b, 0x6e,
        0x07, 0x4e, 0xc5, 0xd3, 0xba, 0xf3, 0x9d, 0x18 },
    { 0x52, 0x2d, 0xc1, 0xf0, 0x99, 0x56, 0x7d, 0x07,
        0xf4, 0x7f, 0x37, 0xa3, 0x2a, 0x84, 0x42, 0x7d,
        0x64, 0x3a, 0x8c, 0xdc, 0xbf, 0xe5, 0xc0, 0xc9,
        0x75, 0x98, 0xa2, 0xbd, 0x25, 0x55, 0xd1, 0xaa,
        0x8c, 0xb0, 0x8e, 0x48, 0x59, 0x0d, 0xbb, 0x3d,
        0xa7, 0xb0, 0x8b, 0x10, 0x56, 0x82, 0x88, 0x38,
        0xc5, 0xf6, 0x1e, 0x63, 0x93, 0xba, 0x7a, 0x0a,
        0xbc, 0xc9, 0xf6, 0x62, 0x89, 0x80, 0x15, 0xad },
    { 0x52, 0x2d, 0xc1, 0xf0, 0x99, 0x56, 0x7d, 0x07,
        0xf4, 0x7f, 0x37, 0xa3, 0x2a, 0x84, 0x42, 0x7d,
        0x64, 0x3a, 0x8c, 0xdc, 0xbf, 0xe5, 0xc0, 0xc9,
        0x75, 0x98, 0xa2, 0xbd, 0x25, 0x55, 0xd1, 0xaa,
        0x8c, 0xb0, 0x8e, 0x48, 0x59, 0x0d, 0xbb, 0x3d,
        0xa7, 0xb0, 0x8b, 0x10, 0x56, 0x82, 0x88, 0x38,
        0xc5, 0xf6, 0x1e, 0x63, 0x93, 0xba, 0x7a, 0x0a,
        0xbc, 0xc9, 0xf6, 0x62 },
    { 0xc3, 0x76, 0x2d, 0xf1, 0xca, 0x78, 0x7d, 0x32,
        0xae, 0x47, 0xc1, 0x3b, 0xf1, 0x98, 0x44, 0xcb,
        0xaf, 0x1a, 0xe1, 0x4d, 0x0b, 0x97, 0x6a, 0xfa,
        0xc5, 0x2f, 0xf7, 0xd7, 0x9b, 0xba, 0x9d, 0xe0,
        0xfe, 0xb5, 0x82, 0xd3, 0x39, 0x34, 0xa4, 0xf0,
        0x95, 0x4c, 0xc2, 0x36, 0x3b, 0xc7, 0x3f, 0x78,
        0x62, 0xac, 0x43, 0x0e, 0x64, 0xab, 0xe4, 0x99,
        0xf4, 0x7c, 0x9b, 0x1f },
    { 0x5a, 0x8d, 0xef, 0x2f, 0x0c, 0x9e, 0x53, 0xf1,
        0xf7, 0x5d, 0x78, 0x53, 0x65, 0x9e, 0x2a, 0x20,
        0xee, 0xb2, 0xb2, 0x2a, 0xaf, 0xde, 0x64, 0x19,
        0xa0, 0x58, 0xab, 0x4f, 0x6f, 0x74, 0x6b, 0xf4,
        0x0f, 0xc0, 0xc3, 0xb7, 0x80, 0xf2, 0x44, 0x45,
        0x2d, 0xa3, 0xeb, 0xf1, 0xc5, 0xd8, 0x2c, 0xde,
        0xa2, 0x41, 0x89, 0x97, 0x20, 0x0e, 0xf8, 0x2e,
        0x44, 0xae, 0x7e, 0x3f },
};

unsigned char tag_gcm[MAX_TESTS * 3][16] =
{
    { 0x58, 0xe2, 0xfc, 0xce, 0xfa, 0x7e, 0x30, 0x61,
        0x36, 0x7f, 0x1d, 0x57, 0xa4, 0xe7, 0x45, 0x5a },
    { 0xab, 0x6e, 0x47, 0xd4, 0x2c, 0xec, 0x13, 0xbd,
        0xf5, 0x3a, 0x67, 0xb2, 0x12, 0x57, 0xbd, 0xdf },
    { 0x4d, 0x5c, 0x2a, 0xf3, 0x27, 0xcd, 0x64, 0xa6,
        0x2c, 0xf3, 0x5a, 0xbd, 0x2b, 0xa6, 0xfa, 0xb4 },
    { 0x5b, 0xc9, 0x4f, 0xbc, 0x32, 0x21, 0xa5, 0xdb,
        0x94, 0xfa, 0xe9, 0x5a, 0xe7, 0x12, 0x1a, 0x47 },
    { 0x36, 0x12, 0xd2, 0xe7, 0x9e, 0x3b, 0x07, 0x85,
        0x56, 0x1b, 0xe1, 0x4a, 0xac, 0xa2, 0xfc, 0xcb },
    { 0x61, 0x9c, 0xc5, 0xae, 0xff, 0xfe, 0x0b, 0xfa,
        0x46, 0x2a, 0xf4, 0x3c, 0x16, 0x99, 0xd0, 0x50 },
    { 0xcd, 0x33, 0xb2, 0x8a, 0xc7, 0x73, 0xf7, 0x4b,
        0xa0, 0x0e, 0xd1, 0xf3, 0x12, 0x57, 0x24, 0x35 },
    { 0x2f, 0xf5, 0x8d, 0x80, 0x03, 0x39, 0x27, 0xab,
        0x8e, 0xf4, 0xd4, 0x58, 0x75, 0x14, 0xf0, 0xfb },
    { 0x99, 0x24, 0xa7, 0xc8, 0x58, 0x73, 0x36, 0xbf,
        0xb1, 0x18, 0x02, 0x4d, 0xb8, 0x67, 0x4a, 0x14 },
    { 0x25, 0x19, 0x49, 0x8e, 0x80, 0xf1, 0x47, 0x8f,
        0x37, 0xba, 0x55, 0xbd, 0x6d, 0x27, 0x61, 0x8c },
    { 0x65, 0xdc, 0xc5, 0x7f, 0xcf, 0x62, 0x3a, 0x24,
        0x09, 0x4f, 0xcc, 0xa4, 0x0d, 0x35, 0x33, 0xf8 },
    { 0xdc, 0xf5, 0x66, 0xff, 0x29, 0x1c, 0x25, 0xbb,
        0xb8, 0x56, 0x8f, 0xc3, 0xd3, 0x76, 0xa6, 0xd9 },
    { 0x53, 0x0f, 0x8a, 0xfb, 0xc7, 0x45, 0x36, 0xb9,
        0xa9, 0x63, 0xb4, 0xf1, 0xc4, 0xcb, 0x73, 0x8b },
    { 0xd0, 0xd1, 0xc8, 0xa7, 0x99, 0x99, 0x6b, 0xf0,
        0x26, 0x5b, 0x98, 0xb5, 0xd4, 0x8a, 0xb9, 0x19 },
    { 0xb0, 0x94, 0xda, 0xc5, 0xd9, 0x34, 0x71, 0xbd,
        0xec, 0x1a, 0x50, 0x22, 0x70, 0xe3, 0xcc, 0x6c },
    { 0x76, 0xfc, 0x6e, 0xce, 0x0f, 0x4e, 0x17, 0x68,
        0xcd, 0xdf, 0x88, 0x53, 0xbb, 0x2d, 0x55, 0x1b },
    { 0x3a, 0x33, 0x7d, 0xbf, 0x46, 0xa7, 0x92, 0xc4,
        0x5e, 0x45, 0x49, 0x13, 0xfe, 0x2e, 0xa8, 0xf2 },
    { 0xa4, 0x4a, 0x82, 0x66, 0xee, 0x1c, 0x8e, 0xb0,
        0xc8, 0xb5, 0xd4, 0xcf, 0x5a, 0xe9, 0xf1, 0x9a },
};

//Triple DES vectors

//CBC vectors
static UINT8_A triple_des_iv_1_cbc[] =
{
    0x21, 0xC1, 0xB0, 0xA1, 0xD8, 0x50, 0x6C, 0x28
};

static UINT8_A triple_des_key_1_cbc[] =
{
    0x9A, 0x72, 0xED, 0x27, 0x5C, 0x8E, 0x8B, 0x3F,
    0x17, 0xAF, 0x0D, 0x56, 0xC9, 0x14, 0x42, 0x9A,
    0x9A, 0x72, 0xED, 0x27, 0x5C, 0x8E, 0x8B, 0x3F
};

static UINT8_A triple_des_plain_text_1_cbc[] =
{
    0x3F, 0xD5, 0xBF, 0xAB, 0xFF, 0x94, 0x5F, 0x8B,
    0x8F, 0x84, 0x67, 0x83, 0x93, 0x80, 0x69, 0x81,
    0x94, 0x81, 0xCA, 0x40, 0x65, 0x20, 0x12, 0xD1,
    0x89, 0x68, 0x64, 0xF5, 0xB2, 0x7A, 0x59, 0x3D,
    0x8C, 0xDF, 0xC6, 0x6F, 0xE3, 0x37, 0xD1, 0xDA,
    0x48, 0xAC, 0x24, 0x56, 0x12, 0x2B, 0x89, 0x15,
    0xE4, 0xCB, 0xF2, 0x65, 0xF9, 0x32, 0x5C, 0xD8,
    0x2E, 0x6C, 0x17, 0x36, 0x2B, 0xDA, 0x35, 0xAC
};

static UINT8_A triple_des_cipher_text_1_cbc[] =
{
    0xF5, 0xEB, 0x5A, 0x83, 0x52, 0x97, 0x21, 0xAC,
    0x07, 0x60, 0x6B, 0x58, 0x2D, 0xF7, 0x9F, 0x2B,
    0x5B, 0x68, 0x20, 0x53, 0x2C, 0x4F, 0xD7, 0x0F,
    0x5B, 0xDD, 0x23, 0xE7, 0x69, 0xA7, 0x55, 0x17,
    0x62, 0x94, 0x51, 0x31, 0x24, 0xCE, 0x84, 0x35,
    0x45, 0x16, 0xB9, 0x80, 0xBE, 0x7C, 0x8B, 0xF0,
    0x70, 0x3E, 0x8C, 0x63, 0x6E, 0x52, 0x83, 0xD9,
    0xBC, 0x57, 0xFF, 0x5A, 0xFF, 0x41, 0x89, 0xB8
};

static UINT8_A triple_des_iv_2_cbc[] =
{
    0x6E, 0xAB, 0x13, 0xB8, 0x36, 0xEE, 0xF5, 0xC3
};

static UINT8_A triple_des_key_2_cbc[] =
{
    0x21, 0x28, 0xCA, 0x88, 0xFC, 0xB8, 0x3C, 0xB7,
    0x22, 0xF3, 0xDB, 0x35, 0x74, 0xA9, 0x5C, 0xC5,
    0x50, 0x99, 0x48, 0x99, 0xE8, 0x21, 0xD4, 0x8B
};

static UINT8_A triple_des_plain_text_2_cbc[] =
{
    0x4E, 0xBD, 0x88, 0xB7, 0xBA, 0xBC, 0xEF, 0x94,
    0x51, 0x07, 0x81, 0x35, 0x1A, 0x9B, 0x74, 0x6C,
    0x04, 0xDA, 0x15, 0x4C, 0x33, 0x42, 0x4C, 0x00,
    0xB6, 0x20, 0x9B, 0x6C, 0x6B, 0x9D, 0x21, 0x25,
    0x65, 0x8B, 0xB4, 0xE4, 0x2B, 0x46, 0x32, 0x85,
    0xFC, 0xFA, 0xDB, 0x3A, 0x91, 0x76, 0x18, 0x09,
    0x5C, 0xA4, 0xC9, 0xE9, 0x46, 0xC4, 0x8F, 0xE5,
    0xCB, 0x79, 0x24, 0x0D, 0xEA, 0x9D, 0xAC, 0x7B,
    0xBE, 0x06, 0x8B, 0xE9, 0x49, 0x99, 0x71, 0x10,
    0x7E, 0x6F, 0x25, 0x01, 0x33, 0x79, 0xE8, 0x22,
    0x58, 0xCB, 0x35, 0x7E, 0xEC, 0xEE, 0x55, 0x41,
    0x51, 0xC7, 0xC0, 0xAE, 0x15, 0xE4, 0xA8, 0xED,
    0x3A, 0x16, 0xBE, 0x85, 0x71, 0x7B, 0xC2, 0x1C,
    0xC2, 0x7E, 0x5E, 0xB4, 0x98, 0xA0, 0x61, 0xDF,
    0xB6, 0x5B, 0x03, 0x62, 0x8B, 0xAF, 0x44, 0xB8,
    0xE8, 0x68, 0xAE, 0x27, 0xCB, 0x5F, 0x0B, 0x87
};

static UINT8_A triple_des_cipher_text_2_cbc[] =
{
    0x4F, 0x76, 0x86, 0xDA, 0x38, 0x4D, 0xAA, 0x3B,
    0x0C, 0x20, 0x04, 0x76, 0x00, 0x94, 0x22, 0x69,
    0xE0, 0x16, 0x4E, 0x72, 0x9C, 0xBB, 0x44, 0x6E,
    0x33, 0x0B, 0x40, 0x49, 0xC2, 0x93, 0x96, 0xC2,
    0xA1, 0x17, 0x7F, 0x78, 0xF3, 0xC9, 0x54, 0x89,
    0xC5, 0x2D, 0x18, 0x07, 0x45, 0xBC, 0x09, 0x85,
    0xC3, 0xB4, 0x17, 0xCB, 0x2C, 0x24, 0xC1, 0xE8,
    0xFA, 0x4D, 0x59, 0x95, 0x7B, 0x62, 0x7D, 0x9A,
    0x53, 0xD2, 0x41, 0x8F, 0x2F, 0x0A, 0x8F, 0x36,
    0x13, 0xDB, 0xFC, 0xAA, 0x8F, 0x09, 0x01, 0x04,
    0x3B, 0x2E, 0x92, 0xDD, 0xF8, 0x56, 0x3B, 0xD4,
    0x3D, 0xCC, 0xEA, 0xAB, 0xEF, 0x6C, 0x26, 0xAA,
    0x4E, 0x1C, 0x6C, 0xBD, 0x9E, 0x0E, 0x70, 0xC2,
    0xF7, 0x45, 0x41, 0x35, 0xE2, 0x70, 0x34, 0x08,
    0xD7, 0x01, 0x27, 0x75, 0xC9, 0x09, 0xE2, 0x62,
    0x8C, 0x03, 0x04, 0xFB, 0x4A, 0xDE, 0xAA, 0x11
};

//ECB vectors
static UINT8_A triple_des_key_1_ecb[] =
{
    0x21, 0x28, 0xCA, 0x88, 0xFC, 0xB8, 0x3C, 0xB7,
    0x22, 0xF3, 0xDB, 0x35, 0x74, 0xA9, 0x5C, 0xC5,
    0x50, 0x99, 0x48, 0x99, 0xE8, 0x21, 0xD4, 0x8B
};

static UINT8_A triple_des_plain_text_1_ecb[] =
{
    0x69, 0xA7, 0xEF, 0x44, 0x63, 0x07, 0x1C, 0x13,
    0xA4, 0x47, 0x70, 0x82, 0xBE, 0x36, 0x3B, 0x65,
    0x52, 0x9F, 0xD5, 0xFD, 0x46, 0xE8, 0x2B, 0xE0,
    0x0A, 0xA6, 0xC9, 0x79, 0x19, 0x8A, 0x62, 0x53,
    0x92, 0x11, 0x66, 0x4D, 0x10, 0x21, 0xB4, 0xEB,
    0xDB, 0xCD, 0x6F, 0x15, 0xA5, 0x91, 0x27, 0x2B,
    0x96, 0xD7, 0xC8, 0xE0, 0x00, 0xD7, 0xA3, 0xFB,
    0x47, 0x49, 0xE8, 0xE2, 0x74, 0x33, 0x92, 0xD8,
    0x43, 0xDC, 0x1A, 0xEB, 0x82, 0x72, 0x4A, 0x15,
    0x7D, 0xFF, 0xCC, 0x71, 0x87, 0x51, 0x5E, 0x5C,
    0x86, 0x12, 0xE3, 0x13, 0x8F, 0x53, 0x84, 0xD9,
    0x84, 0x41, 0x5E, 0xCA, 0xFA, 0xB8, 0x16, 0x7C,
    0x40, 0xCD, 0x76, 0xAA, 0xFD, 0x12, 0x0E, 0xC4,
    0x93, 0x13, 0xBC, 0xD3, 0xE9, 0xA4, 0xB1, 0xE9,
    0x1C, 0xB7, 0xB5, 0xF5, 0x38, 0x84, 0x99, 0x75,
    0xD9, 0xA5, 0x95, 0x4E, 0xC4, 0xC5, 0xB8, 0xA6
};

static UINT8_A triple_des_cipher_text_1_ecb[] =
{
    0xDA, 0x72, 0x1D, 0x0F, 0x23, 0x6F, 0xDD, 0x0B,
    0x3A, 0xD0, 0x0C, 0xC7, 0x09, 0x02, 0xAE, 0x3F,
    0x37, 0xDE, 0x22, 0xBB, 0x5C, 0x89, 0x49, 0x85,
    0x1C, 0xB0, 0x6D, 0x80, 0x78, 0xC6, 0x56, 0xFC,
    0x31, 0x9D, 0xDF, 0xBB, 0xD9, 0xBA, 0x65, 0x99,
    0x47, 0xCB, 0xA7, 0x61, 0x9A, 0xE5, 0x5B, 0xAD,
    0x01, 0xAD, 0xA7, 0x07, 0xA3, 0x8F, 0xE8, 0xE3,
    0xA4, 0xE0, 0x0B, 0x97, 0xE8, 0xBB, 0x0A, 0x46,
    0x7C, 0xD5, 0x16, 0x17, 0xAD, 0x6E, 0x4E, 0x46,
    0x37, 0xA2, 0x08, 0xAF, 0xBF, 0xF1, 0x64, 0xB7,
    0x17, 0xC6, 0xDA, 0xA4, 0x1F, 0x29, 0xC2, 0xB8,
    0x24, 0xAE, 0x4B, 0xA7, 0x5F, 0x06, 0x10, 0x3C,
    0x85, 0x98, 0xE9, 0xF1, 0xEA, 0xF7, 0xF2, 0x17,
    0xA7, 0x2D, 0x80, 0xFF, 0xF3, 0xF7, 0x11, 0x8D,
    0x0D, 0xF8, 0xAD, 0x2D, 0x0E, 0x69, 0x4B, 0x2D,
    0x57, 0x5E, 0xD4, 0x14, 0x2C, 0xBF, 0xA6, 0x34
};

static UINT8_A triple_des_key_2_ecb[] =
{
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01,
    0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF, 0x01, 0x23
};

static UINT8_A triple_des_plain_text_2_ecb[] =
{
    0x54, 0x68, 0x65, 0x20, 0x71, 0x75, 0x66, 0x63,
    0x6B, 0x20, 0x62, 0x72, 0x6F, 0x77, 0x6E, 0x20,
    0x66, 0x6F, 0x78, 0x20, 0x6A, 0x75, 0x6D, 0x70
};

static UINT8_A triple_des_cipher_text_2_ecb[] =
{
    0xA8, 0x26, 0xFD, 0x8C, 0xE5, 0x3B, 0x85, 0x5F,
    0xCC, 0xE2, 0x1C, 0x81, 0x12, 0x25, 0x6F, 0xE6,
    0x68, 0xD5, 0xC0, 0x5D, 0xD9, 0xB6, 0xB9, 0x00
};

static UINT8_A triple_des_key_3_ecb[] =
{
    0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,
    0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0x01,
    0x45, 0x67, 0x89, 0xab, 0xcd, 0xef, 0x01, 0x23,
};

static UINT8_A triple_des_plain_text_3_ecb[] =
{
    0x54, 0x68, 0x65, 0x20, 0x71, 0x75, 0x66, 0x63,
};

static UINT8_A triple_des_cipher_text_3_ecb[] =
{
    0xa8, 0x26, 0xfd, 0x8c, 0xe5, 0x3b, 0x85, 0x5f,
};

typedef struct
{
    QSEE_CIPHER_ALGO_ET  alg;
    QSEE_CIPHER_MODE_ET  mode;
    uint8*               pt;
    uint32               pt_len;
    uint8*               key;
    uint8*               iv;
    uint8*               ct;
} __attribute__ ((packed)) triple_des_vector_t;

typedef struct
{
    QSEE_CIPHER_ALGO_ET  alg;
    QSEE_CIPHER_MODE_ET  mode;
    uint8*               pt;
    uint32               pt_len;
    uint8*               key;
    uint8*               iv;
    uint8*               ct;
    uint8*               ct2;
} __attribute__ ((packed)) triple_des_vector_t_2;

triple_des_vector_t triple_des_test_vectors[] =
{
    {QSEE_CIPHER_ALGO_TRIPLE_DES, QSEE_CIPHER_MODE_CBC, triple_des_plain_text_1_cbc, sizeof(triple_des_plain_text_1_cbc),
        triple_des_key_1_cbc, triple_des_iv_1_cbc, triple_des_cipher_text_1_cbc},
    {QSEE_CIPHER_ALGO_TRIPLE_DES, QSEE_CIPHER_MODE_CBC, triple_des_plain_text_2_cbc, sizeof(triple_des_plain_text_2_cbc),
        triple_des_key_2_cbc, triple_des_iv_2_cbc, triple_des_cipher_text_2_cbc},
    {QSEE_CIPHER_ALGO_TRIPLE_DES, QSEE_CIPHER_MODE_ECB, triple_des_plain_text_1_ecb, sizeof(triple_des_plain_text_1_ecb),
        triple_des_key_1_ecb, NULL, triple_des_cipher_text_1_ecb},
    {QSEE_CIPHER_ALGO_TRIPLE_DES, QSEE_CIPHER_MODE_ECB, triple_des_plain_text_2_ecb, sizeof(triple_des_plain_text_2_ecb),
        triple_des_key_2_ecb, NULL, triple_des_cipher_text_2_ecb},
    {QSEE_CIPHER_ALGO_TRIPLE_DES, QSEE_CIPHER_MODE_ECB, triple_des_plain_text_3_ecb, sizeof(triple_des_plain_text_3_ecb),
        triple_des_key_3_ecb, NULL, triple_des_cipher_text_3_ecb},
};

triple_des_vector_t_2 triple_des_test_vectors_2 =
{
    QSEE_CIPHER_ALGO_TRIPLE_DES, QSEE_CIPHER_MODE_CBC, triple_des_plain_text_1_cbc, sizeof(triple_des_plain_text_1_cbc),
    triple_des_key_1_cbc, triple_des_iv_1_cbc, triple_des_cipher_text_1_cbc, triple_des_cipher_text_1_cbc
};

/* AES-XTS-128 test vectors */
//Vector 1 in "IEEE Std 1619-2007"
static UINT8_A aesxts128_plain_text_1[] =
{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static UINT8_A aesxts128_key1_1[] =
{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static UINT8_A aesxts128_key2_1[] =
{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static UINT8_A aesxts128_iv_1[] =
{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static UINT8_A aesxts128_cipher_text_1[] =
{
    0x91, 0x7c, 0xf6, 0x9e, 0xbd, 0x68, 0xb2, 0xec,
    0x9b, 0x9f, 0xe9, 0xa3, 0xea, 0xdd, 0xa6, 0x92,
    0xcd, 0x43, 0xd2, 0xf5, 0x95, 0x98, 0xed, 0x85,
    0x8c, 0x02, 0xc2, 0x65, 0x2f, 0xbf, 0x92, 0x2e
};

//Vector 2 in "IEEE Std 1619-2007"
static UINT8_A aesxts128_plain_text_2[] =
{
    0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
    0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
    0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
    0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44
};

static UINT8_A aesxts128_key1_2[] =
{
    0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
    0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11
};

static UINT8_A aesxts128_key2_2[] =
{
    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22,
    0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22
};

static UINT8_A aesxts128_iv_2[] =
{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x33, 0x33, 0x33, 0x33, 0x33
};

static UINT8_A aesxts128_cipher_text_2[] =
{
    0xc4, 0x54, 0x18, 0x5e, 0x6a, 0x16, 0x93, 0x6e,
    0x39, 0x33, 0x40, 0x38, 0xac, 0xef, 0x83, 0x8b,
    0xfb, 0x18, 0x6f, 0xff, 0x74, 0x80, 0xad, 0xc4,
    0x28, 0x93, 0x82, 0xec, 0xd6, 0xd3, 0x94, 0xf0
};

//Vector 5 in "IEEE Std 1619-2007"
static UINT8_A aesxts128_plain_text_3[] =
{
    0x27, 0xa7, 0x47, 0x9b, 0xef, 0xa1, 0xd4, 0x76, 0x48, 0x9f, 0x30, 0x8c, 0xd4, 0xcf, 0xa6, 0xe2,
    0xa9, 0x6e, 0x4b, 0xbe, 0x32, 0x08, 0xff, 0x25, 0x28, 0x7d, 0xd3, 0x81, 0x96, 0x16, 0xe8, 0x9c,
    0xc7, 0x8c, 0xf7, 0xf5, 0xe5, 0x43, 0x44, 0x5f, 0x83, 0x33, 0xd8, 0xfa, 0x7f, 0x56, 0x00, 0x00,
    0x05, 0x27, 0x9f, 0xa5, 0xd8, 0xb5, 0xe4, 0xad, 0x40, 0xe7, 0x36, 0xdd, 0xb4, 0xd3, 0x54, 0x12,
    0x32, 0x80, 0x63, 0xfd, 0x2a, 0xab, 0x53, 0xe5, 0xea, 0x1e, 0x0a, 0x9f, 0x33, 0x25, 0x00, 0xa5,
    0xdf, 0x94, 0x87, 0xd0, 0x7a, 0x5c, 0x92, 0xcc, 0x51, 0x2c, 0x88, 0x66, 0xc7, 0xe8, 0x60, 0xce,
    0x93, 0xfd, 0xf1, 0x66, 0xa2, 0x49, 0x12, 0xb4, 0x22, 0x97, 0x61, 0x46, 0xae, 0x20, 0xce, 0x84,
    0x6b, 0xb7, 0xdc, 0x9b, 0xa9, 0x4a, 0x76, 0x7a, 0xae, 0xf2, 0x0c, 0x0d, 0x61, 0xad, 0x02, 0x65,
    0x5e, 0xa9, 0x2d, 0xc4, 0xc4, 0xe4, 0x1a, 0x89, 0x52, 0xc6, 0x51, 0xd3, 0x31, 0x74, 0xbe, 0x51,
    0xa1, 0x0c, 0x42, 0x11, 0x10, 0xe6, 0xd8, 0x15, 0x88, 0xed, 0xe8, 0x21, 0x03, 0xa2, 0x52, 0xd8,
    0xa7, 0x50, 0xe8, 0x76, 0x8d, 0xef, 0xff, 0xed, 0x91, 0x22, 0x81, 0x0a, 0xae, 0xb9, 0x9f, 0x91,
    0x72, 0xaf, 0x82, 0xb6, 0x04, 0xdc, 0x4b, 0x8e, 0x51, 0xbc, 0xb0, 0x82, 0x35, 0xa6, 0xf4, 0x34,
    0x13, 0x32, 0xe4, 0xca, 0x60, 0x48, 0x2a, 0x4b, 0xa1, 0xa0, 0x3b, 0x3e, 0x65, 0x00, 0x8f, 0xc5,
    0xda, 0x76, 0xb7, 0x0b, 0xf1, 0x69, 0x0d, 0xb4, 0xea, 0xe2, 0x9c, 0x5f, 0x1b, 0xad, 0xd0, 0x3c,
    0x5c, 0xcf, 0x2a, 0x55, 0xd7, 0x05, 0xdd, 0xcd, 0x86, 0xd4, 0x49, 0x51, 0x1c, 0xeb, 0x7e, 0xc3,
    0x0b, 0xf1, 0x2b, 0x1f, 0xa3, 0x5b, 0x91, 0x3f, 0x9f, 0x74, 0x7a, 0x8a, 0xfd, 0x1b, 0x13, 0x0e,
    0x94, 0xbf, 0xf9, 0x4e, 0xff, 0xd0, 0x1a, 0x91, 0x73, 0x5c, 0xa1, 0x72, 0x6a, 0xcd, 0x0b, 0x19,
    0x7c, 0x4e, 0x5b, 0x03, 0x39, 0x36, 0x97, 0xe1, 0x26, 0x82, 0x6f, 0xb6, 0xbb, 0xde, 0x8e, 0xcc,
    0x1e, 0x08, 0x29, 0x85, 0x16, 0xe2, 0xc9, 0xed, 0x03, 0xff, 0x3c, 0x1b, 0x78, 0x60, 0xf6, 0xde,
    0x76, 0xd4, 0xce, 0xcd, 0x94, 0xc8, 0x11, 0x98, 0x55, 0xef, 0x52, 0x97, 0xca, 0x67, 0xe9, 0xf3,
    0xe7, 0xff, 0x72, 0xb1, 0xe9, 0x97, 0x85, 0xca, 0x0a, 0x7e, 0x77, 0x20, 0xc5, 0xb3, 0x6d, 0xc6,
    0xd7, 0x2c, 0xac, 0x95, 0x74, 0xc8, 0xcb, 0xbc, 0x2f, 0x80, 0x1e, 0x23, 0xe5, 0x6f, 0xd3, 0x44,
    0xb0, 0x7f, 0x22, 0x15, 0x4b, 0xeb, 0xa0, 0xf0, 0x8c, 0xe8, 0x89, 0x1e, 0x64, 0x3e, 0xd9, 0x95,
    0xc9, 0x4d, 0x9a, 0x69, 0xc9, 0xf1, 0xb5, 0xf4, 0x99, 0x02, 0x7a, 0x78, 0x57, 0x2a, 0xee, 0xbd,
    0x74, 0xd2, 0x0c, 0xc3, 0x98, 0x81, 0xc2, 0x13, 0xee, 0x77, 0x0b, 0x10, 0x10, 0xe4, 0xbe, 0xa7,
    0x18, 0x84, 0x69, 0x77, 0xae, 0x11, 0x9f, 0x7a, 0x02, 0x3a, 0xb5, 0x8c, 0xca, 0x0a, 0xd7, 0x52,
    0xaf, 0xe6, 0x56, 0xbb, 0x3c, 0x17, 0x25, 0x6a, 0x9f, 0x6e, 0x9b, 0xf1, 0x9f, 0xdd, 0x5a, 0x38,
    0xfc, 0x82, 0xbb, 0xe8, 0x72, 0xc5, 0x53, 0x9e, 0xdb, 0x60, 0x9e, 0xf4, 0xf7, 0x9c, 0x20, 0x3e,
    0xbb, 0x14, 0x0f, 0x2e, 0x58, 0x3c, 0xb2, 0xad, 0x15, 0xb4, 0xaa, 0x5b, 0x65, 0x50, 0x16, 0xa8,
    0x44, 0x92, 0x77, 0xdb, 0xd4, 0x77, 0xef, 0x2c, 0x8d, 0x6c, 0x01, 0x7d, 0xb7, 0x38, 0xb1, 0x8d,
    0xeb, 0x4a, 0x42, 0x7d, 0x19, 0x23, 0xce, 0x3f, 0xf2, 0x62, 0x73, 0x57, 0x79, 0xa4, 0x18, 0xf2,
    0x0a, 0x28, 0x2d, 0xf9, 0x20, 0x14, 0x7b, 0xea, 0xbe, 0x42, 0x1e, 0xe5, 0x31, 0x9d, 0x05, 0x68
};

static UINT8_A aesxts128_key1_3[] =
{
    0x27, 0x18, 0x28, 0x18, 0x28, 0x45, 0x90, 0x45,
    0x23, 0x53, 0x60, 0x28, 0x74, 0x71, 0x35, 0x26
};

static UINT8_A aesxts128_key2_3[] =
{
    0x31, 0x41, 0x59, 0x26, 0x53, 0x58, 0x97, 0x93,
    0x23, 0x84, 0x62, 0x64, 0x33, 0x83, 0x27, 0x95
};

static UINT8_A aesxts128_iv_3[] =
{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01
};

static UINT8_A aesxts128_cipher_text_3[] =
{
    0x26, 0x4d, 0x3c, 0xa8, 0x51, 0x21, 0x94, 0xfe, 0xc3, 0x12, 0xc8, 0xc9, 0x89, 0x1f, 0x27, 0x9f,
    0xef, 0xdd, 0x60, 0x8d, 0x0c, 0x02, 0x7b, 0x60, 0x48, 0x3a, 0x3f, 0xa8, 0x11, 0xd6, 0x5e, 0xe5,
    0x9d, 0x52, 0xd9, 0xe4, 0x0e, 0xc5, 0x67, 0x2d, 0x81, 0x53, 0x2b, 0x38, 0xb6, 0xb0, 0x89, 0xce,
    0x95, 0x1f, 0x0f, 0x9c, 0x35, 0x59, 0x0b, 0x8b, 0x97, 0x8d, 0x17, 0x52, 0x13, 0xf3, 0x29, 0xbb,
    0x1c, 0x2f, 0xd3, 0x0f, 0x2f, 0x7f, 0x30, 0x49, 0x2a, 0x61, 0xa5, 0x32, 0xa7, 0x9f, 0x51, 0xd3,
    0x6f, 0x5e, 0x31, 0xa7, 0xc9, 0xa1, 0x2c, 0x28, 0x60, 0x82, 0xff, 0x7d, 0x23, 0x94, 0xd1, 0x8f,
    0x78, 0x3e, 0x1a, 0x8e, 0x72, 0xc7, 0x22, 0xca, 0xaa, 0xa5, 0x2d, 0x8f, 0x06, 0x56, 0x57, 0xd2,
    0x63, 0x1f, 0xd2, 0x5b, 0xfd, 0x8e, 0x5b, 0xaa, 0xd6, 0xe5, 0x27, 0xd7, 0x63, 0x51, 0x75, 0x01,
    0xc6, 0x8c, 0x5e, 0xdc, 0x3c, 0xdd, 0x55, 0x43, 0x5c, 0x53, 0x2d, 0x71, 0x25, 0xc8, 0x61, 0x4d,
    0xee, 0xd9, 0xad, 0xaa, 0x3a, 0xca, 0xde, 0x58, 0x88, 0xb8, 0x7b, 0xef, 0x64, 0x1c, 0x4c, 0x99,
    0x4c, 0x80, 0x91, 0xb5, 0xbc, 0xd3, 0x87, 0xf3, 0x96, 0x3f, 0xb5, 0xbc, 0x37, 0xaa, 0x92, 0x2f,
    0xbf, 0xe3, 0xdf, 0x4e, 0x5b, 0x91, 0x5e, 0x6e, 0xb5, 0x14, 0x71, 0x7b, 0xdd, 0x2a, 0x74, 0x07,
    0x9a, 0x50, 0x73, 0xf5, 0xc4, 0xbf, 0xd4, 0x6a, 0xdf, 0x7d, 0x28, 0x2e, 0x7a, 0x39, 0x3a, 0x52,
    0x57, 0x9d, 0x11, 0xa0, 0x28, 0xda, 0x4d, 0x9c, 0xd9, 0xc7, 0x71, 0x24, 0xf9, 0x64, 0x8e, 0xe3,
    0x83, 0xb1, 0xac, 0x76, 0x39, 0x30, 0xe7, 0x16, 0x2a, 0x8d, 0x37, 0xf3, 0x50, 0xb2, 0xf7, 0x4b,
    0x84, 0x72, 0xcf, 0x09, 0x90, 0x20, 0x63, 0xc6, 0xb3, 0x2e, 0x8c, 0x2d, 0x92, 0x90, 0xce, 0xfb,
    0xd7, 0x34, 0x6d, 0x1c, 0x77, 0x9a, 0x0d, 0xf5, 0x0e, 0xdc, 0xde, 0x45, 0x31, 0xda, 0x07, 0xb0,
    0x99, 0xc6, 0x38, 0xe8, 0x3a, 0x75, 0x59, 0x44, 0xdf, 0x2a, 0xef, 0x1a, 0xa3, 0x17, 0x52, 0xfd,
    0x32, 0x3d, 0xcb, 0x71, 0x0f, 0xb4, 0xbf, 0xbb, 0x9d, 0x22, 0xb9, 0x25, 0xbc, 0x35, 0x77, 0xe1,
    0xb8, 0x94, 0x9e, 0x72, 0x9a, 0x90, 0xbb, 0xaf, 0xea, 0xcf, 0x7f, 0x78, 0x79, 0xe7, 0xb1, 0x14,
    0x7e, 0x28, 0xba, 0x0b, 0xae, 0x94, 0x0d, 0xb7, 0x95, 0xa6, 0x1b, 0x15, 0xec, 0xf4, 0xdf, 0x8d,
    0xb0, 0x7b, 0x82, 0x4b, 0xb0, 0x62, 0x80, 0x2c, 0xc9, 0x8a, 0x95, 0x45, 0xbb, 0x2a, 0xae, 0xed,
    0x77, 0xcb, 0x3f, 0xc6, 0xdb, 0x15, 0xdc, 0xd7, 0xd8, 0x0d, 0x7d, 0x5b, 0xc4, 0x06, 0xc4, 0x97,
    0x0a, 0x34, 0x78, 0xad, 0xa8, 0x89, 0x9b, 0x32, 0x91, 0x98, 0xeb, 0x61, 0xc1, 0x93, 0xfb, 0x62,
    0x75, 0xaa, 0x8c, 0xa3, 0x40, 0x34, 0x4a, 0x75, 0xa8, 0x62, 0xae, 0xbe, 0x92, 0xee, 0xe1, 0xce,
    0x03, 0x2f, 0xd9, 0x50, 0xb4, 0x7d, 0x77, 0x04, 0xa3, 0x87, 0x69, 0x23, 0xb4, 0xad, 0x62, 0x84,
    0x4b, 0xf4, 0xa0, 0x9c, 0x4d, 0xbe, 0x8b, 0x43, 0x97, 0x18, 0x4b, 0x74, 0x71, 0x36, 0x0c, 0x95,
    0x64, 0x88, 0x0a, 0xed, 0xdd, 0xb9, 0xba, 0xa4, 0xaf, 0x2e, 0x75, 0x39, 0x4b, 0x08, 0xcd, 0x32,
    0xff, 0x47, 0x9c, 0x57, 0xa0, 0x7d, 0x3e, 0xab, 0x5d, 0x54, 0xde, 0x5f, 0x97, 0x38, 0xb8, 0xd2,
    0x7f, 0x27, 0xa9, 0xf0, 0xab, 0x11, 0x79, 0x9d, 0x7b, 0x7f, 0xfe, 0xfb, 0x27, 0x04, 0xc9, 0x5c,
    0x6a, 0xd1, 0x2c, 0x39, 0xf1, 0xe8, 0x67, 0xa4, 0xb7, 0xb1, 0xd7, 0x81, 0x8a, 0x4b, 0x75, 0x3d,
    0xfd, 0x2a, 0x89, 0xcc, 0xb4, 0x5e, 0x00, 0x1a, 0x03, 0xa8, 0x67, 0xb1, 0x87, 0xf2, 0x25, 0xdd
};

//Vector 11 in "IEEE Std 1619-2007"
static UINT8_A aesxts256_plain_text_4[] =
{
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
    0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
    0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
    0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
    0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
    0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
    0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
    0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
    0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
    0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
    0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
    0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f,
    0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f,
    0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f,
    0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f,
    0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f,
    0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f,
    0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f,
    0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f,
    0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f,
    0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf,
    0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf,
    0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
    0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
    0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef,
    0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff,
};

static UINT8_A aesxts256_key1_4[] =
{
    0x27, 0x18, 0x28, 0x18, 0x28, 0x45, 0x90, 0x45,
    0x23, 0x53, 0x60, 0x28, 0x74, 0x71, 0x35, 0x26,
    0x62, 0x49, 0x77, 0x57, 0x24, 0x70, 0x93, 0x69,
    0x99, 0x59, 0x57, 0x49, 0x66, 0x96, 0x76, 0x27
};

static UINT8_A aesxts256_key2_4[] =
{
    0x31, 0x41, 0x59, 0x26, 0x53, 0x58, 0x97, 0x93,
    0x23, 0x84, 0x62, 0x64, 0x33, 0x83, 0x27, 0x95,
    0x02, 0x88, 0x41, 0x97, 0x16, 0x93, 0x99, 0x37,
    0x51, 0x05, 0x82, 0x09, 0x74, 0x94, 0x45, 0x92
};

static UINT8_A aesxts256_iv_4[] =
{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff
};

static UINT8_A aesxts256_cipher_text_4[] =
{
    0x77, 0xa3, 0x12, 0x51, 0x61, 0x8a, 0x15, 0xe6, 0xb9, 0x2d, 0x1d, 0x66, 0xdf, 0xfe, 0x7b, 0x50,
    0xb5, 0x0b, 0xad, 0x55, 0x23, 0x05, 0xba, 0x02, 0x17, 0xa6, 0x10, 0x68, 0x8e, 0xff, 0x7e, 0x11,
    0xe1, 0xd0, 0x22, 0x54, 0x38, 0xe0, 0x93, 0x24, 0x2d, 0x6d, 0xb2, 0x74, 0xfd, 0xe8, 0x01, 0xd4,
    0xca, 0xe0, 0x6f, 0x20, 0x92, 0xc7, 0x28, 0xb2, 0x47, 0x85, 0x59, 0xdf, 0x58, 0xe8, 0x37, 0xc2,
    0x46, 0x9e, 0xe4, 0xa4, 0xfa, 0x79, 0x4e, 0x4b, 0xbc, 0x7f, 0x39, 0xbc, 0x02, 0x6e, 0x3c, 0xb7,
    0x2c, 0x33, 0xb0, 0x88, 0x8f, 0x25, 0xb4, 0xac, 0xf5, 0x6a, 0x2a, 0x98, 0x04, 0xf1, 0xce, 0x6d,
    0x3d, 0x6e, 0x1d, 0xc6, 0xca, 0x18, 0x1d, 0x4b, 0x54, 0x61, 0x79, 0xd5, 0x55, 0x44, 0xaa, 0x77,
    0x60, 0xc4, 0x0d, 0x06, 0x74, 0x15, 0x39, 0xc7, 0xe3, 0xcd, 0x9d, 0x2f, 0x66, 0x50, 0xb2, 0x01,
    0x3f, 0xd0, 0xee, 0xb8, 0xc2, 0xb8, 0xe3, 0xd8, 0xd2, 0x40, 0xcc, 0xae, 0x2d, 0x4c, 0x98, 0x32,
    0x0a, 0x74, 0x42, 0xe1, 0xc8, 0xd7, 0x5a, 0x42, 0xd6, 0xe6, 0xcf, 0xa4, 0xc2, 0xec, 0xa1, 0x79,
    0x8d, 0x15, 0x8c, 0x7a, 0xec, 0xdf, 0x82, 0x49, 0x0f, 0x24, 0xbb, 0x9b, 0x38, 0xe1, 0x08, 0xbc,
    0xda, 0x12, 0xc3, 0xfa, 0xf9, 0xa2, 0x11, 0x41, 0xc3, 0x61, 0x3b, 0x58, 0x36, 0x7f, 0x92, 0x2a,
    0xaa, 0x26, 0xcd, 0x22, 0xf2, 0x3d, 0x70, 0x8d, 0xae, 0x69, 0x9a, 0xd7, 0xcb, 0x40, 0xa8, 0xad,
    0x0b, 0x6e, 0x27, 0x84, 0x97, 0x3d, 0xcb, 0x60, 0x56, 0x84, 0xc0, 0x8b, 0x8d, 0x69, 0x98, 0xc6,
    0x9a, 0xac, 0x04, 0x99, 0x21, 0x87, 0x1e, 0xbb, 0x65, 0x30, 0x1a, 0x46, 0x19, 0xca, 0x80, 0xec,
    0xb4, 0x85, 0xa3, 0x1d, 0x74, 0x42, 0x23, 0xce, 0x8d, 0xdc, 0x23, 0x94, 0x82, 0x8d, 0x6a, 0x80,
    0x47, 0x0c, 0x09, 0x2f, 0x5b, 0xa4, 0x13, 0xc3, 0x37, 0x8f, 0xa6, 0x05, 0x42, 0x55, 0xc6, 0xf9,
    0xdf, 0x44, 0x95, 0x86, 0x2b, 0xbb, 0x32, 0x87, 0x68, 0x1f, 0x93, 0x1b, 0x68, 0x7c, 0x88, 0x8a,
    0xbf, 0x84, 0x4d, 0xfc, 0x8f, 0xc2, 0x83, 0x31, 0xe5, 0x79, 0x92, 0x8c, 0xd1, 0x2b, 0xd2, 0x39,
    0x0a, 0xe1, 0x23, 0xcf, 0x03, 0x81, 0x8d, 0x14, 0xde, 0xdd, 0xe5, 0xc0, 0xc2, 0x4c, 0x8a, 0xb0,
    0x18, 0xbf, 0xca, 0x75, 0xca, 0x09, 0x6f, 0x2d, 0x53, 0x1f, 0x3d, 0x16, 0x19, 0xe7, 0x85, 0xf1,
    0xad, 0xa4, 0x37, 0xca, 0xb9, 0x2e, 0x98, 0x05, 0x58, 0xb3, 0xdc, 0xe1, 0x47, 0x4a, 0xfb, 0x75,
    0xbf, 0xed, 0xbf, 0x8f, 0xf5, 0x4c, 0xb2, 0x61, 0x8e, 0x02, 0x44, 0xc9, 0xac, 0x0d, 0x3c, 0x66,
    0xfb, 0x51, 0x59, 0x8c, 0xd2, 0xdb, 0x11, 0xf9, 0xbe, 0x39, 0x79, 0x1a, 0xbe, 0x44, 0x7c, 0x63,
    0x09, 0x4f, 0x7c, 0x45, 0x3b, 0x7f, 0xf8, 0x7c, 0xb5, 0xbb, 0x36, 0xb7, 0xc7, 0x9e, 0xfb, 0x08,
    0x72, 0xd1, 0x70, 0x58, 0xb8, 0x3b, 0x15, 0xab, 0x08, 0x66, 0xad, 0x8a, 0x58, 0x65, 0x6c, 0x5a,
    0x7e, 0x20, 0xdb, 0xdf, 0x30, 0x8b, 0x24, 0x61, 0xd9, 0x7c, 0x0e, 0xc0, 0x02, 0x4a, 0x27, 0x15,
    0x05, 0x52, 0x49, 0xcf, 0x3b, 0x47, 0x8d, 0xdd, 0x47, 0x40, 0xde, 0x65, 0x4f, 0x75, 0xca, 0x68,
    0x6e, 0x0d, 0x73, 0x45, 0xc6, 0x9e, 0xd5, 0x0c, 0xdc, 0x2a, 0x8b, 0x33, 0x2b, 0x1f, 0x88, 0x24,
    0x10, 0x8a, 0xc9, 0x37, 0xeb, 0x05, 0x05, 0x85, 0x60, 0x8e, 0xe7, 0x34, 0x09, 0x7f, 0xc0, 0x90,
    0x54, 0xfb, 0xff, 0x89, 0xee, 0xae, 0xea, 0x79, 0x1f, 0x4a, 0x7a, 0xb1, 0xf9, 0x86, 0x82, 0x94,
    0xa4, 0xf9, 0xe2, 0x7b, 0x42, 0xaf, 0x81, 0x00, 0xcb, 0x9d, 0x59, 0xce, 0xf9, 0x64, 0x58, 0x03
};

/* AES-XTS test vectors */
typedef struct
{
    QSEE_CIPHER_ALGO_ET  alg;
    QSEE_CIPHER_MODE_ET  mode;
    uint8 *pt;
    uint32 pt_len;
    uint8 *key;
    uint32 key_len;
    uint8 *xts_key;
    uint32 xts_key_len;
    uint32 xts_du_size;
    uint8 *iv;
    uint8 *ct;
}__attribute__ ((packed)) aes_xts_vector_t;

aes_xts_vector_t aes_xts_test_vectors[] =
{
    { QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_XTS, aesxts128_plain_text_1, sizeof(aesxts128_plain_text_1),
        aesxts128_key1_1, sizeof(aesxts128_key1_1), aesxts128_key2_1, sizeof(aesxts128_key2_1),
        32, aesxts128_iv_1, aesxts128_cipher_text_1 },
    { QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_XTS, aesxts128_plain_text_1, sizeof(aesxts128_plain_text_1),
        aesxts128_key1_1, sizeof(aesxts128_key1_1), aesxts128_key2_1, sizeof(aesxts128_key2_1),
        0, aesxts128_iv_1, aesxts128_cipher_text_1 },
    { QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_XTS, aesxts128_plain_text_2, sizeof(aesxts128_plain_text_2),
        aesxts128_key1_2, sizeof(aesxts128_key1_2), aesxts128_key2_2, sizeof(aesxts128_key2_2),
        32, aesxts128_iv_2, aesxts128_cipher_text_2 },
    { QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_XTS, aesxts128_plain_text_2, sizeof(aesxts128_plain_text_2),
        aesxts128_key1_2, sizeof(aesxts128_key1_2), aesxts128_key2_2, sizeof(aesxts128_key2_2),
        0, aesxts128_iv_2, aesxts128_cipher_text_2 },
    { QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_XTS, aesxts128_plain_text_3, sizeof(aesxts128_plain_text_3),
        aesxts128_key1_3, sizeof(aesxts128_key1_3), aesxts128_key2_3, sizeof(aesxts128_key2_3),
        512, aesxts128_iv_3, aesxts128_cipher_text_3 },
    { QSEE_CIPHER_ALGO_AES_128, QSEE_CIPHER_MODE_XTS, aesxts128_plain_text_3, sizeof(aesxts128_plain_text_3),
        aesxts128_key1_3, sizeof(aesxts128_key1_3), aesxts128_key2_3, sizeof(aesxts128_key2_3),
        0, aesxts128_iv_3, aesxts128_cipher_text_3 },
    { QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_XTS,aesxts256_plain_text_4, sizeof(aesxts256_plain_text_4),
        aesxts256_key1_4, sizeof(aesxts256_key1_4), aesxts256_key2_4, sizeof(aesxts256_key2_4),
        512, aesxts256_iv_4, aesxts256_cipher_text_4 },
    { QSEE_CIPHER_ALGO_AES_256, QSEE_CIPHER_MODE_XTS, aesxts256_plain_text_4, sizeof(aesxts256_plain_text_4),
        aesxts256_key1_4, sizeof(aesxts256_key1_4), aesxts256_key2_4, sizeof(aesxts256_key2_4),
        0, aesxts256_iv_4, aesxts256_cipher_text_4 }
};

#endif // __CRYPTO_CIPHER_TEST_VECTORS_H__
