#ifndef __IRESETTIMER_H
#define __IRESETTIMER_H

// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"

// Copyright (c) 2015 Qualcomm Technologies, Inc.  All Rights Reserved.

// Qualcomm Technologies Proprietary and Confidential.

/**
 * @brief
 * A reset timer maintains a coutdown timer that, on expiration, triggers a
 * reset of the device.
 *
 * @details
 *
 * In the expected usage, a TA will set the reset timer to ensure that it is
 * invoked again by the REE within a certain amount of time.  At that point,
 * the TA may reset the expiration time or stop the timer.  If the REE fails
 * to invoke the TA, then it will fail to reset the timer before expiration
 * and TrustZone software will trigger a warm boot of the device.
 */

#define IResetTimer_OP_setDelay 0
#define IResetTimer_OP_stop 1

static inline int32_t
IResetTimer_release(Object self)
{
  return Object_invoke(self, Object_OP_release, 0, 0);
}

static inline int32_t
IResetTimer_retain(Object self)
{
  return Object_invoke(self, Object_OP_retain, 0, 0);
}

static inline int32_t
IResetTimer_setDelay(Object self, int32_t milliseconds_val)
{
  ObjectArg a[1];
  a[0].b = (ObjectBuf) { &milliseconds_val, sizeof(int32_t) };

  return Object_invoke(self, IResetTimer_OP_setDelay, a, ObjectCounts_pack(1, 0, 0, 0));
}

static inline int32_t
IResetTimer_stop(Object self)
{
  return Object_invoke(self, IResetTimer_OP_stop, 0, 0);
}


#endif /* __IRESETTIMER_H */
