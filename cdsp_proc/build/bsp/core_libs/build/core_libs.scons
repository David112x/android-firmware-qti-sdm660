#===============================================================================
#
# Basic skeleton image scrip
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2009-2012 by Qualcomm Technologies, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header: //components/rel/dspbuild.adsp/3.0/bsp/core_libs/build/core_libs.scons#14 $
#  $DateTime: 2017/03/06 06:27:23 $
#  $Change: 12594144 $
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 2015/01/12 sm      Add 'CORE_ADSP_ROOT' to the build tags.
#===============================================================================

import os, re
Import('env')
#------------------------------------------------------------------------------
# Init image vars 
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Init aliases array.
# first alias (0th elemten in array) is always unique name, there should
# never be two images with the same unique name
aliases = ['core_libs', 'adsp_proc', 'adsp_mpd_core_images', 'adsp_spd_core_images',
           'msm8998_ADSP', 'sdm845_ADSP', 'sdm660_ADSP', 'sdm830_ADSP'
          ]

#------------------------------------------------------------------------------
# Init environment variables
devcfg_bldr = '${BUILD_ROOT}/core/bsp/build/scripts/devcfg_builder.py'
if env['CHIPSET'] in ['sdm845','sdm660', 'sdm830'] or not env.PathExists(devcfg_bldr):
   devcfg_bldr = '${BUILD_ROOT}/core/kernel/devcfg/scripts/devcfg_builder.py'
build_tools = ['buildspec_builder.py',
            '${BUILD_ROOT}/core/bsp/build/scripts/mbn_builder.py',
            '${BUILD_ROOT}/core/bsp/build/scripts/dnt_builder.py',
            '${BUILD_ROOT}/core/bsp/build/scripts/tms_builder_servreg.py',
            devcfg_bldr,
            '${BUILD_ROOT}/core/bsp/build/scripts/cmm_builder.py',
            '${BUILD_ROOT}/core/bsp/build/scripts/swe_builder.py',
            '${BUILD_ROOT}/core/bsp/build/scripts/sleep_lpr_builder.py']


if env.get('CHIPSET') in ["msm8994", "msm8992", "msm8952", "sdm660", "sdm830"]:
   build_tools += [
            '${BUILD_ROOT}/core/bsp/build/scripts/island_builder.py']

# Define the SCons image build tags.
build_tags = ['CORE_ADSP_ROOT', 'CORE_Q6_ROOT', 'ROOT_PD', 'QDSS_EN_IMG','AVS_ADSP','VIDEO_ADSP', 'QMIMSGS_ADSP', 
              'IMAGE_TREE_VERSION_AUTO_GENERATE', 'IMAGE_TREE_UUID_AUTO_GENERATE'
             ]
if env['CHIPSET'] in ['sdm660', 'sdm830']:
   build_tags += [
            'CORE_SLPI_ADSP_ROOT']
            
# Deprecated Build Tags
deprecated_build_tags = ['CORE_QDSP6_SW',
   'CORE_ADSP','CBSP_QDSP6_SW_IMAGE']

env.InitImageVars(
   alias_list=aliases,  # aliases list
   proc='qdsp6',      # proc (depending on tool chain arm, hexago, etc)
   config='adsp',
   plat='qurt',           # platform (l4, blast, foo, bar, etc)
#build_tags = ['BASIC_IMAGE_EXAMPLE'],
   build_tags = build_tags,
   deprecated_build_tags = deprecated_build_tags,
   tools = build_tools
)
#------------------------------------------------------------------------------
# Image_cfg.xml setup
#------------------------------------------------------------------------------
if env['CHIPSET'] in ['sdm845', 'sdm660', 'sdm830']:
   env.Replace(IMAGE_CONFIG_XML = env.subst("${BUILD_ROOT}/build/chipset/${CHIPSET}/adsp/image_cfg_core_root.xml"))

#------------------------------------------------------------------------------
# Check if we need to load this script or just bail-out
#------------------------------------------------------------------------------
if not env.CheckAlias():
   Return()

#---------------------------------------------------------------------------
# Include PWRDB to the build via USES_PWRDB flag
#---------------------------------------------------------------------------
env.AddUsesFlags('USES_PWRDB')

#---------------------------------------------------------------------------
# Load in CBSP uses and path variables
#---------------------------------------------------------------------------
env.LoadToolScript('build_utils', toolpath = ['${BUILD_ROOT}/build/scripts'])
env.InitTargetVariation()
env.InitBuildConfig()
if 'USES_UNIFIED_DEVCFG' not in env: 
   env.Replace(USES_DEVCFG = 'yes')
   env.Replace(DEVCONFIG_ASSOC_FLAG = 'DAL_DEVCFG_IMG')
env.AddUsesFlags('USES_SERVICE_REGISTRY_PLAYBOOK')
if ('USES_FEATURE_DYNAMIC_LOADING_GLOBAL' in env) :
   env.Replace(USES_FEATURE_DYNAMIC_LOADING = 'yes')
   #import pdb; pdb.set_trace()
   env.LoadToolScript('sharedlib_symbols', toolpath = ['${BUILD_ROOT}/core/bsp/build/scripts'])
   env.LoadToolScript('dlinker_symbols', toolpath = ['${BUILD_ROOT}/core/bsp/build/scripts'])

#Add ADSP Image specific linker inputs here
env.LoadToolScript('hexagon_adsp', toolpath = ['${BUILD_ROOT}/build'])
env.PrintInfo("Building Q6 Image for %s"%env['IMAGE'])

if 'USES_MULTI_PD' in env:
   env.PrintInfo("This adsp core image is being built for Multi PD version")
   env.AddUsesFlags('USES_MPD')
   env.AddUsesFlags('USES_QURTOS_IMG') #this is the flag to be used for mpd builds to compile for guest os
   env.Append(CPPDEFINES=["MULTI_PD_BUILD"])
if env['CHIPSET'] in ['sdm660', 'sdm830']:
   env.AddUsesFlags('USES_SLPI_ADSP_IMG')
else:
   env.PrintInfo("This adsp core image is being built for Single PD version")
env.AddUsesFlags('USES_RCINIT_PLAYBOOK')
#---------------------------------------------------------------------------
# Include PWRDB to the build via USES_PWRDB flag
#---------------------------------------------------------------------------
env.AddUsesFlags('USES_PWRDB')

#if image wants to own "main": # image calls core_main to init cbsp
env.Append(CPPDEFINES=["COREMAIN_EXCLUDE_MAIN"])


#---------------------------------------------------------------------------
# Load in the tools-set init scripts
#---------------------------------------------------------------------------
if 'USES_MALLOC_WRAPPER_ENABLED' in env:
    env.Append(CFLAGS='-DMALLOC_WRAPPER ')

#Append sim flag if building for sim
if 'USES_AVS_TEST' in env:
    env.Append(CFLAGS='-DSIM')


#top level control enable/disable Power Collapse feature
#define the flag to disable PC
if 'USES_FEATURE_DISABLE_SLEEP_MODES' in env:
    env.Append(CPPDEFINES=['FEATURE_DISABLE_SLEEP_MODES'])

#---------------------------------------------------------------------------
# Libs/Objs
#---------------------------------------------------------------------------
image_libs = []
image_objs = []
img_shlibs = []
#---------------------------------------------------------------------------
# Libraries Section
#---------------------------------------------------------------------------
if 'USES_UNIFIED_DEVCFG' in env: 
    #-----LoadAreas other than 'core' for devcfg XMLs if any---------------
    devcfg_env = env.Clone()
    # Pop all of the deprecated build tags from the devcfg_env dictionary.
    for keys in env.get('DEPRECATED_BUILD_TAGS'):
        devcfg_env.Dictionary().pop(keys)
    # Pop all of the build tags from the devcfg_env dictionary.
    for keys in env.get('BUILD_TAGS'):
        devcfg_env.Dictionary().pop(keys) 
    # Retrieve the Device Configuration build tag from the environment.
    devcfg_build_tag =   env.get('DEVCFG').getFeature('devcfgImgBuildTag')
    # Set the Device Configuration tag as the only valid tag in the devcfg_env.
    devcfg_env.Replace(BUILD_TAGS = [devcfg_build_tag])
    # Remove all of the deprecated build tags from the devcfg_env.
    devcfg_env.Replace(DEPRECATED_BUILD_TAGS = [])
    devcfg_env.Dictionary().pop('USES_RCINIT')
    # Add the Device Configuration tag into the devcfg_env dictionary, mimicing the
    # behavior in InitImageVars.
    devcfg_env.Dictionary()[devcfg_build_tag] = env['PROC']

    if 'AUDIO_IN_USERPD' not in devcfg_env and 'BUILD_BAREBONE' not in devcfg_env:
       # load AVS libs/objs build rules.
       avs_path = devcfg_env.RealPath('${BUILD_ROOT}/avs')
       if devcfg_env.PathExists(avs_path):
          au_name_items = devcfg_env.LoadAreaSoftwareUnits('avs')
          #image_libs.extend(au_name_items['LIBS'])
          image_objs.extend(au_name_items['OBJS'])

    # load qdsp6 libs/objs build rules.
    qdsp6_path = devcfg_env.RealPath('${BUILD_ROOT}/qdsp6')
    if devcfg_env.PathExists(qdsp6_path):
       au_name_items = devcfg_env.LoadAreaSoftwareUnits('qdsp6')
       #image_libs.extend(au_name_items['LIBS'])
       image_objs.extend(au_name_items['OBJS'])

    platform_path = devcfg_env.RealPath('${BUILD_ROOT}/platform')
    if 'USES_PLATFORM_FS' in devcfg_env:
       if devcfg_env.PathExists(platform_path):
          au_name_items = devcfg_env.LoadAreaSoftwareUnits('platform')
          #image_libs.extend(au_name_items['LIBS'])
          image_objs.extend(au_name_items['OBJS'])

    performance_path = devcfg_env.RealPath('${BUILD_ROOT}/performance')
    if devcfg_env.PathExists(performance_path):
       au_name_items = devcfg_env.LoadAreaSoftwareUnits('performance')
       #image_libs.extend(au_name_items['LIBS'])
       image_objs.extend(au_name_items['OBJS'])
       
    if env.get('CHIPSET') != "msm8996" or env.get('CHIPSET') != "msm8998" :
        sensor_path = devcfg_env.RealPath('${BUILD_ROOT}/Sensors')
        if devcfg_env.PathExists(sensor_path):
           au_name_items = devcfg_env.LoadAreaSoftwareUnits('Sensors')
           #image_libs.extend(au_name_items['LIBS'])
           image_objs.extend(au_name_items['OBJS'])

#----------------------------------------------------------------------------
    dynmod_path = env.RealPath('${BUILD_ROOT}/build/dynamic_modules_nonavs/${SHORT_BUILDPATH}')
    # import pdb; pdb.set_trace()
    if env.PathExists(dynmod_path):
       so_list = os.listdir(dynmod_path) 
       print so_list
       for so in so_list:
           if re.search('.so',so) is not None:
              env.HashLib(dynmod_path+'/'+so, DEVCFG_IMG = [devcfg_build_tag])
           if re.search('shell_0',so) is not None:
              env.HashLib(dynmod_path+'/'+so, DEVCFG_IMG = [devcfg_build_tag])
    lib_to_hash = env.RealPath('${BUILD_ROOT}/build/bsp/fastrpc_shell_img/build/${SHORT_BUILDPATH}/fastrpc_shell_0_debug')
    if env.PathExists(lib_to_hash):
        env.HashLib(lib_to_hash, DEVCFG_IMG = [devcfg_build_tag])

    if os.environ.get('OEM_ROOT')!=None: 
       print "OEM_ROOT env in device config", os.environ.get('OEM_ROOT')
       dynmod_oem_path = env.RealPath(os.environ.get('OEM_ROOT')+'/build/dynamic_modules_hash')
       if env.PathExists(dynmod_oem_path):
          so_list = os.listdir(dynmod_oem_path) 
          print so_list
          for so in so_list:
             if re.search('.so',so) is not None:
               env.HashLib(dynmod_oem_path+'/'+so, DEVCFG_IMG = [devcfg_build_tag])
       else:
          print "Exiting Hash on OEM_PATH\n"
   
# load au_name libs/objs build rules.
au_name_items = env.LoadAreaSoftwareUnits('core')
image_libs.extend(au_name_items['LIBS'])
image_objs.extend(au_name_items['OBJS'])
if env.GetUsesFlag('USES_FEATURE_DYNAMIC_LOADING'):
   img_shlibs.extend(au_name_items['SHARED_LIBS'])


image_units = [image_objs, image_libs, img_shlibs]

if 'USES_ISLAND' in env:
   island_list = env.GenerateIslandList()
   image_units += [
      island_list,
   ]

#--- RCINIT Playbook Extension, Library Specific Details -------------------

PLAYLISTS = [ ] # NONE USED

# Follows all LoadAreaSoftwareUnits(). Precedes Link Step Details.
# Image Owner supplies PLAYLISTS. Avoid other customization this step.

# FOR SCONS TOOL EMITTERS TO PLACE OUTPUT PROPERLY
if not os.path.exists(env.RealPath('${SHORT_BUILDPATH}')):
   if Execute(Mkdir(env.RealPath('${SHORT_BUILDPATH}'))):
      raise

# ONLY WHEN DNT_BUILDER SCONS TOOL LOADED
if 'USES_RCINIT' in env and 'USES_RCINIT_PLAYBOOK' in env:

   # NEVER POLLUTE ENV CONSTRUCTION ENVIRONMENT WHICH GETS INHERITED
   playbook_env = env.Clone()

   # PLAYLIST OUTPUT THIS LIBRARY
   rcinit_out_rcpl = playbook_env.RealPath('${SHORT_BUILDPATH}/rcinit_playlist.rcpl')
   playbook_env.AddRCInitPlaylist(build_tags, rcinit_out_rcpl)
   playbook_env.AddArtifact(build_tags, rcinit_out_rcpl)
   playbook_env.Depends(build_tags, rcinit_out_rcpl)     # Manage explicit detail outside of AU
   image_units.append(rcinit_out_rcpl)                   # Manage explicit detail outside of AU

   # PLAYBOOK TXT OUTPUT THIS LIBRARY
   rcinit_out_txt = playbook_env.RealPath('${SHORT_BUILDPATH}/rcinit_playlist.txt')
   playbook_env.AddRCInitPlaybook(build_tags, rcinit_out_txt, None)
   playbook_env.AddArtifact(build_tags, rcinit_out_txt)
   playbook_env.Depends(rcinit_out_txt, rcinit_out_rcpl) # Manage explicit detail outside of AU
   image_units.append(rcinit_out_txt)                    # Manage explicit detail outside of AU

#--- RCINIT Playbook Extension, Library Specific Details -------------------

#--- SERVICE REGISTRY Playbook Extension, Library Specific Details ------------BEGIN
#build_tags = ['CORE_QDSP6_SW', 'BUILD_TEST_MODEM', 'QDSS_EN_IMG','AVS_ADSP','VIDEO_ADSP', 'QMIMSGS_ADSP', 'CORE_ADSP',
#              'IMAGE_TREE_VERSION_AUTO_GENERATE',
#              'IMAGE_TREE_UUID_AUTO_GENERATE', 'CORE_ADSP_ROOT', 'ROOT_PD'
#             ]
SERVREG_PLAYLISTS = [ ] # NONE USED

# FOR SCONS TOOL EMITTERS TO PLACE OUTPUT PROPERLY
if not os.path.exists(env.RealPath('${SHORT_BUILDPATH}')):
   if Execute(Mkdir(env.RealPath('${SHORT_BUILDPATH}'))):
      raise

# ONLY WHEN DNT_BUILDER_SREG SCONS TOOL LOADED
if 'USES_SERVICE_REGISTRY' in env and 'USES_SERVICE_REGISTRY_PLAYBOOK' in env:

   # NEVER POLLUTE ENV CONSTRUCTION ENVIRONMENT WHICH GETS INHERITED
   playbook_servreg_env = env.Clone()

   # PLAYLIST OUTPUT THIS LIBRARY
   servreg_out_pl = playbook_servreg_env.RealPath('${SHORT_BUILDPATH}/servreg_playlist.pl')
   playbook_servreg_env.AddServRegPlaylist(build_tags, servreg_out_pl)
   playbook_servreg_env.Depends(build_tags, servreg_out_pl)
   image_units.append(servreg_out_pl)

#--- SERVICE REGISTRY Playbook Extension, Library Specific Details ------------END

#------------------------------------------------------------------------------
# Putting the image together
#------------------------------------------------------------------------------

if 'IMAGE_BUILD_LOCAL_FILES' in env:
   #-------------------------------------------------------------------------
   # Local Files
   #-------------------------------------------------------------------------

   # this is where local files are created, for example link scripts (lcs)
   # for qdsp6 like images, or scatter load files (scl) for amr like images.
   local_itmes= []

   image_units += local_itmes

   #------------------------------------------------------------------------------
   # Dynamic Loading Info
   #------------------------------------------------------------------------------
   if env.GetUsesFlag('USES_FEATURE_DYNAMIC_LOADING'):
      dll_itmes= []
      
      dlexpose_sym_lst= env.RealPath('${SHORT_BUILDPATH}/DLEXPOSE_CORE_SYMS_${BUILD_ID}.txt')
      dlexpose_sym_lst_node = env.DLExposeGenerateList([dlexpose_sym_lst], None)
      dll_itmes += dlexpose_sym_lst_node
      
      if(len(img_shlibs) !=0) :
         sh_libs_sym_lst= env.RealPath('${SHORT_BUILDPATH}/SHLIBS_CORE_SYMS_${BUILD_ID}.txt')
         sh_libs_sym_lst_node = env.SharedLibGenerateList([sh_libs_sym_lst], img_shlibs)
         dll_itmes += sh_libs_sym_lst_node
      
         sym_lst= env.RealPath('${SHORT_BUILDPATH}/CORE_SYMS_${BUILD_ID}.txt')
         sym_lst_node = env.ConsolidateSymsList([sym_lst], [dlexpose_sym_lst_node[0], sh_libs_sym_lst_node[0]])
         dll_itmes += sym_lst_node
      
      else:
         sym_lst= env.RealPath('${SHORT_BUILDPATH}/CORE_SYMS_${BUILD_ID}.txt')
         sym_lst_node = env.ConsolidateSymsList([sym_lst], [dlexpose_sym_lst_node[0]])
         dll_itmes += sym_lst_node
      
      image_units += dll_itmes

   
if 'IMAGE_BUILD_LINK' in env:
   #-------------------------------------------------------------------------
   # Link image
   #-------------------------------------------------------------------------

   # this is where the rule to "link" is done.
   #image_elf = env.AddProgram("${SHORT_BUILDPATH}/${TARGET_NAME}", image_objs, LIBS=image_libs)

   # this is just to create something for testing
   image_elf = env.ListFileBuilder("${SHORT_BUILDPATH}/${TARGET_NAME}.txt", [image_objs, image_libs],
         add_header=False, relative_path="${BUILD_ROOT}/build/ms", posix=True)
   
   if env.GetUsesFlag('USES_FEATURE_DYNAMIC_LOADING') and len(img_shlibs) !=0 :
      shlib_elf = env.ListFileBuilder("${SHORT_BUILDPATH}/${TARGET_NAME}" + "_SYMS.txt", [img_shlibs],
         add_header=False, relative_path="${BUILD_ROOT}/build/ms", posix=True)

if 'IMAGE_BUILD_POST_LINK' in env:
   #-------------------------------------------------------------------------
   # Post process image
   #-------------------------------------------------------------------------

   # this is where any aditional rules after linking are done.
   if 'USES_CMMBUILDER' in env:
      if 'USES_CMMBUILDER_V2' in env:
         cmmfiles = env.CreateCMMImageFile([],[])
         image_units += [cmmfiles]
      else:
         cmm_image_list_file=env.RealPath('${BUILD_ROOT}/build/bsp/core_libs/build/${SHORT_BUILDPATH}/cmmoutputlist.txt')
         cmmfiles = env.CreateCMMImageFile(cmm_image_list_file,[])
         image_units += [cmmfiles]
   #=========================================================================
   # Define targets needed
   #
   image_units += [
      image_elf,
   ]
  
   if env.GetUsesFlag('USES_FEATURE_DYNAMIC_LOADING') and len(img_shlibs) !=0 :
      image_units += [
      shlib_elf,
      ]
 
#=========================================================================
# Finish up...
env.BindAliasesToTargets(image_units)
env.CMMBuilder(None, None)
