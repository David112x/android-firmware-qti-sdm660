#===============================================================================
#
# Basic core_user_libs image scrip
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2014 by Qualcomm Technologies, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header: //components/rel/dspbuild.adsp/3.0/bsp/core_user_libs/build/core_user_libs.scons#12 $
#  $DateTime: 2017/03/06 06:27:23 $
#  $Change: 12594144 $
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
#
#===============================================================================
import os, re
Import('env')
#------------------------------------------------------------------------------
# Image_cfg.xml setup
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
# Init image vars
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Init aliases array.
# first alias (0th element in array) is always unique name, there should
# never be two images with the same unique name
aliases = ['core_user_libs', 'adsp_mpd_images', 'adsp_mpd_core_images',
           'sdm845_ADSP', 'sdm660_ADSP', 'sdm830_ADSP'
          ]
build_tags = ['CORE_QDSP6_AUDIO_SW', 'CORE_USER_PD', 'QDSS_EN_IMG', 'CORE_ADSP_USER']
#build_tags = ['CORE_USER_PD','MULTIMEDIA_USER_PD','CORE_QDSP6_AUDIO_PD']
if env['CHIPSET'] in ['sdm845', 'sdm660', 'sdm830']:
   env.Replace(IMAGE_CONFIG_XML = env.subst("${BUILD_ROOT}/build/chipset/${CHIPSET}/adsp/image_cfg_core_user.xml"))
   devcfg_bldr = '${BUILD_ROOT}/core/kernel/devcfg/scripts/devcfg_builder.py'
else:
   devcfg_bldr = '${BUILD_ROOT}/core/bsp/build/scripts/devcfg_builder.py'
build_tools = ['buildspec_builder.py',
                '${BUILD_ROOT}/core/bsp/build/scripts/dnt_builder.py',
                '${BUILD_ROOT}/core/bsp/build/scripts/mbn_builder.py',
                '${BUILD_ROOT}/core/bsp/build/scripts/tms_builder_servreg.py',
                devcfg_bldr,
                '${BUILD_ROOT}/core/bsp/build/scripts/cmm_builder.py',
                '${BUILD_ROOT}/core/bsp/build/scripts/swe_builder.py']

#------------------------------------------------------------------------------
# init environment variables
env.InitImageVars(
   alias_list=aliases,                                               # aliases
   proc='qdsp6',                                                     # proc
   config='adsp',                                                # config type, proc_name
   plat='qurt',
   build_tags = build_tags,     #build_tags
   tools = build_tools
   )

#------------------------------------------------------------------------------
# Check if we need to load this script or just bail-out
#------------------------------------------------------------------------------
if not env.CheckAlias():
   Return()

#---------------------------------------------------------------------------
# Load in CBSP uses and path variables
#---------------------------------------------------------------------------
env.LoadToolScript('build_utils', toolpath = ['${BUILD_ROOT}/build/scripts'])
env.InitTargetVariation()
env.InitBuildConfig()

# if 'BUILD_BAREBONE' in env:
   # print "AUDIO_IN_USERPD or BUILD_BAREBONE in core_user_libs.scons env, bypass core-user_libs compilation"
   # Return()

env.Replace(USES_AUDIO_IMG = 'yes')
env.AddUsesFlags('USES_SERVICE_REGISTRY_PLAYBOOK')
if 'USES_UNIFIED_DEVCFG' not in env: 
   env.Replace(USES_DEVCFG = 'yes')
   env.Replace(DEVCONFIG_ASSOC_FLAG = 'DEVCFG_CORE_QDSP6_AUDIO_SW')

#if image wants to own "main": # image calls core_main to init cbsp
env.Append(CPPDEFINES=["MULTI_PD_BUILD"])
if 'BUILD_BAREBONE' not in env:
   env.Append(CPPDEFINES=["COREMAIN_EXCLUDE_MAIN"])
   env.Append(CPPDEFINES=["TASK_EXCLUDE_MAIN"])

#SWE PD BUILDER
env.Append(USES_QDSS_SWE_MULTIPD = True)



#---------------------------------------------------------------------------
# Set the image entry for relocatable images for MPSS.DPM.X.X builds.
#---------------------------------------------------------------------------
if env['MSM_ID'] in ['8x10', '8916', '8936', '8994']:
   env.Replace(HEXAGON_IMAGE_ENTRY = '0xB0000000')
env.AddUsesFlags('USES_RCINIT_PLAYBOOK') # MUST OCCUR BEFORE FIRST LoadAreaSoftwareUnits
#---------------------------------------------------------------------------
# Load in the tools scripts
#---------------------------------------------------------------------------

env.LoadToolScript('hexagon_adsp', toolpath = ['${BUILD_ROOT}/build'])
#env.LoadToolScript('hexagon', toolpath = ['${BUILD_ROOT}/tools/build/scons/scripts'])
#env.LoadToolScript('qdsp6_defs', toolpath = ['${BUILD_ROOT}/tools/build/scons/scripts'])
#env.LoadToolScript('sleep_lpr_builder', toolpath = ['${BUILD_ROOT}/core/bsp/build/scripts'])

#Load scripts needed for dynamic loading
if ('USES_FEATURE_DYNAMIC_LOADING_GLOBAL' in env) :
   env.Replace(USES_FEATURE_DYNAMIC_LOADING = 'yes')
   env.LoadToolScript('sharedlib_symbols', toolpath = ['${BUILD_ROOT}/core/bsp/build/scripts'])
   env.LoadToolScript('dlinker_symbols', toolpath = ['${BUILD_ROOT}/core/bsp/build/scripts'])


#---------------------------------------------------------------------------
# Set the Kernel Target Configuration
#---------------------------------------------------------------------------

if 'USES_ADSPPM_INTEGRATION_ENABLED' in env:
    if env.get('CHIPSET') == "msm8996":
       env.Append(CFLAGS='-DADSPPM_INTEGRATION=1')
    elif env.get('CHIPSET') in ['msm8998', 'sdm660', 'sdm830', 'sdm845']:
       env.Append(CFLAGS='-DADSPPM_INTEGRATION=1')
    else:
       env.Append(CFLAGS='-DADSPPM_INTEGRATION=1')
else:
    env.Append(CFLAGS='-DADSPPM_INTEGRATION=0')  

# Change the image entry point.
env.Replace(HEXAGON_IMAGE_ENTRY='0xb0000000')
# These lines need to be cleaned up still.  We should be reading the linkflags, and only modifying what we need.
if os.environ.get('COMPILER') == ('gcc'):
   env.Replace(LINKFLAGS = "-m${Q6VERSION} --wrap malloc --wrap calloc --wrap free --wrap realloc --wrap memalign -g -G0 -nostdlib ${HEXAGONLD_MAP_CMD} ${TARGET.posix}.map --section-start .start=${HEXAGON_IMAGE_ENTRY} --gc-sections ${LFLAGS}")
else: # LLVM linker flags: only difference is removed -T${BUILD_ROOT}/Sensors/build/${CHIPSET}/sensors.linker
   env.Replace(LINKFLAGS = "-m${Q6VERSION} --wrap malloc --wrap calloc --wrap free --wrap realloc --wrap memalign -g -G0 -nostdlib ${HEXAGONLD_MAP_CMD} ${TARGET.posix}.map --section-start .start=${HEXAGON_IMAGE_ENTRY} ${LFLAGS}")



env.Replace(QDSP6OBJS3  = [
         '${QDSP6_LIBDIR}/libqurt.a',
         '${QDSP6_LIBDIR}/libqurtcfs.a',
         '${QDSP6_LIBDIR}/libqurtkernel.a',
         '${QDSP6_LIBDIR}/libqube_compat.a',
         '${QDSP6_LIBDIR}/libtimer.a',
         '${QDSP6_LIBDIR}/libposix.a',
         '${QDSP6_RELEASE_LIB_DIR}/libc.a',
         '${QDSP6_RELEASE_LIB_DIR}/libqcc.a',
         '${QDSP6_RELEASE_LIB_DIR}/libstdc++.a',
         '${QDSP6_RELEASE_LIB_DIR}/libdl.a',
         ])

env.Replace(LINKOBJGRP = "${QDSP6OBJS1} " \
   "--start-group $_LIBFLAGS_POSIX ${QDSP6OBJS2} $SOURCES.posix $_LISTFILES ${QDSP6OBJS3} --end-group " \
   "${QDSP6OBJS4} "
)

env.Replace(DYNLINKFLAGS = "")


#---------------------------------------------------------------------------
# Libs/Objs
#---------------------------------------------------------------------------
image_libs = []
image_objs = []
img_shlibs = []

#---------------------------------------------------------------------------
# Libraries Section
#---------------------------------------------------------------------------
# Temporary workaround for 8.1.alpha2 tools. To be removed when fix from tools is available
if 'USES_UNIFIED_DEVCFG' in env: 

    #-----LoadAreas other than 'core' for devcfg artifacts if any---------------
    devcfg_env = env.Clone()
    # Pop all of the deprecated build tags from the devcfg_env dictionary.
    for keys in env.get('DEPRECATED_BUILD_TAGS'):
        devcfg_env.Dictionary().pop(keys)
    # Pop all of the build tags from the devcfg_env dictionary.
    for keys in env.get('BUILD_TAGS'):
        devcfg_env.Dictionary().pop(keys) 
    # Retrieve the Device Configuration build tag from the environment.
    devcfg_build_tag =   env.get('DEVCFG').getFeature('devcfgImgBuildTag')
    # Set the Device Configuration tag as the only valid tag in the devcfg_env.
    devcfg_env.Replace(BUILD_TAGS = [devcfg_build_tag])
    # Remove all of the deprecated build tags from the devcfg_env.
    devcfg_env.Replace(DEPRECATED_BUILD_TAGS = [])
    devcfg_env.Dictionary().pop('USES_RCINIT')
    # Add the Device Configuration tag into the devcfg_env dictionary, mimicing the
    # behavior in InitImageVars.
    devcfg_env.Dictionary()[devcfg_build_tag] = env['PROC']

    avs_path = devcfg_env.RealPath('${BUILD_ROOT}/avs')
    if devcfg_env.PathExists(avs_path) and 'BUILD_BAREBONE' not in env:
       au_name_items = devcfg_env.LoadAreaSoftwareUnits('avs') 
       image_objs.extend(au_name_items['OBJS'])   
    #----------------------------------------------------------------------------
    dynmod_path = env.RealPath('${BUILD_ROOT}/build/dynamic_modules_avs/${SHORT_BUILDPATH}')
    if env.PathExists(dynmod_path):
       so_list = os.listdir(dynmod_path) 
       print so_list
       for so in so_list:
           if re.search('.so',so) is not None:
              env.HashLib(dynmod_path+'/'+so, DEVCFG_IMG = [devcfg_build_tag]) 

    if os.environ.get('OEM_ROOT')!=None: 
       print "OEM_ROOT env in device config", os.environ.get('OEM_ROOT')
       dynmod_oem_path = env.RealPath(os.environ.get('OEM_ROOT')+'/build/dynamic_modules_hash')
       if env.PathExists(dynmod_oem_path):
          so_list = os.listdir(dynmod_oem_path) 
          print so_list
          for so in so_list:
             if re.search('.so',so) is not None:
               env.HashLib(dynmod_oem_path+'/'+so, DEVCFG_IMG = [devcfg_build_tag])
       else:
          print "Exiting Hash on OEM_PATH\n"
       

# load Core USER PD
au_name_items = env.LoadAreaSoftwareUnits('core')
image_libs.extend(au_name_items['LIBS'])
image_objs.extend(au_name_items['OBJS'])
if env.GetUsesFlag('USES_FEATURE_DYNAMIC_LOADING'):
   img_shlibs.extend(au_name_items['SHARED_LIBS'])
#cfs='${QDSP6_RELEASE_DIR}/qc/lib/${Q6VERSION}/G0/libdl.a'
#image_libs.append(cfs)
image_units = [image_objs, image_libs]

image_name = env.get('IMAGE_NAME').lower()
if 'QDSS_TRACER_SWE_MULTIPD' in env:
   env.SaveSWEListBuilder(['${BUILD_ROOT}/build/bsp/' + image_name + '/build/${SHORT_BUILDPATH}/sweevent_list.txt'],None)


#--- RCINIT Playbook Extension, Library Specific Details ------------------- BEG
#--- SERVICE REGISTRY Playbook Extension, Library Specific Details ------------BEGIN
#build_tags = ['CORE_QDSP6_SW', 'BUILD_TEST_MODEM', 'QDSS_EN_IMG','AVS_ADSP','VIDEO_ADSP', 'QMIMSGS_ADSP', 'CORE_ADSP',
#              'IMAGE_TREE_VERSION_AUTO_GENERATE',
#              'IMAGE_TREE_UUID_AUTO_GENERATE', 'CORE_ADSP_ROOT', 'ROOT_PD'
#             ]
SERVREG_PLAYLISTS = [ ] # NONE USED

# FOR SCONS TOOL EMITTERS TO PLACE OUTPUT PROPERLY
if not os.path.exists(env.RealPath('${SHORT_BUILDPATH}')):
   if Execute(Mkdir(env.RealPath('${SHORT_BUILDPATH}'))):
      raise

# ONLY WHEN DNT_BUILDER_SREG SCONS TOOL LOADED
if 'USES_SERVICE_REGISTRY' in env and 'USES_SERVICE_REGISTRY_PLAYBOOK' in env:

   # NEVER POLLUTE ENV CONSTRUCTION ENVIRONMENT WHICH GETS INHERITED
   playbook_servreg_env = env.Clone()

   # PLAYLIST OUTPUT THIS LIBRARY
   servreg_out_pl = playbook_servreg_env.RealPath('${SHORT_BUILDPATH}/servreg_playlist.pl')
   playbook_servreg_env.AddServRegPlaylist(build_tags, servreg_out_pl)
   playbook_servreg_env.Depends(build_tags, servreg_out_pl)
   image_units.append(servreg_out_pl)

#--- SERVICE REGISTRY Playbook Extension, Library Specific Details ------------END

PLAYLISTS = [ ] # NONE USED

# Follows all LoadAreaSoftwareUnits(). Precedes Link Step Details.
# Image Owner supplies PLAYLISTS. Avoid other customization this step.

# FOR SCONS TOOL EMITTERS TO PLACE OUTPUT PROPERLY
if not os.path.exists(env.RealPath('${SHORT_BUILDPATH}')):
   if Execute(Mkdir(env.RealPath('${SHORT_BUILDPATH}'))):
      raise

# ONLY WHEN DNT_BUILDER SCONS TOOL LOADED
if 'USES_RCINIT' in env and 'USES_RCINIT_PLAYBOOK' in env:

   # NEVER POLLUTE ENV CONSTRUCTION ENVIRONMENT WHICH GETS INHERITED
   playbook_env = env.Clone()

   # PLAYLIST OUTPUT THIS LIBRARY
   rcinit_out_rcpl = playbook_env.RealPath('${SHORT_BUILDPATH}/rcinit_playlist.rcpl')
   playbook_env.AddRCInitPlaylist(build_tags, rcinit_out_rcpl)
   playbook_env.AddArtifact(build_tags, rcinit_out_rcpl)
   playbook_env.Depends(build_tags, rcinit_out_rcpl)     # Manage explicit detail outside of AU
   image_units.append(rcinit_out_rcpl)                   # Manage explicit detail outside of AU

   # PLAYBOOK TXT OUTPUT THIS LIBRARY
   rcinit_out_txt = playbook_env.RealPath('${SHORT_BUILDPATH}/rcinit_playlist.txt')
   playbook_env.AddRCInitPlaybook(build_tags, rcinit_out_txt, None)
   playbook_env.AddArtifact(build_tags, rcinit_out_txt)
   playbook_env.Depends(rcinit_out_txt, rcinit_out_rcpl) # Manage explicit detail outside of AU
   image_units.append(rcinit_out_txt)                    # Manage explicit detail outside of AU

#--- RCINIT Playbook Extension, Library Specific Details ------------------- END


#------------------------------------------------------------------------------
# Putting the image toghther
#------------------------------------------------------------------------------

if 'IMAGE_BUILD_LINK' in env:
   #-------------------------------------------------------------------------
   # Link image
   #-------------------------------------------------------------------------
   image_units = []

   # this is  to generate lf file
   image_elf = env.ListFileBuilder("${SHORT_BUILDPATH}/${TARGET_NAME}.txt", [image_objs, image_libs], relative_path="${BUILD_ROOT}/build/ms", posix=True)

   if env.GetUsesFlag('USES_FEATURE_DYNAMIC_LOADING'):
      shlib_elf = None
      if(len(img_shlibs) !=0) : 
          shlib_elf = env.ListFileBuilder("${SHORT_BUILDPATH}/${TARGET_NAME}" + "_SYMS.txt", [img_shlibs],
             add_header=False, relative_path="${BUILD_ROOT}/build/ms", posix=True)

#------------------------------------------------------------------------------
# Dynamic Loading list file generation
#------------------------------------------------------------------------------
if env.GetUsesFlag('USES_FEATURE_DYNAMIC_LOADING') and 'IMAGE_BUILD_LINK' in env:
  dll_itmes= []
  
  dlexpose_sym_lst= env.RealPath('${SHORT_BUILDPATH}/DLEXPOSE_CORE_USER_SYMS_${BUILD_ID}.txt')
  dlexpose_sym_lst_node = env.DLExposeGenerateList([dlexpose_sym_lst], None)
  dll_itmes += dlexpose_sym_lst_node
  
  if(len(img_shlibs) !=0) :
     sh_libs_sym_lst= env.RealPath('${SHORT_BUILDPATH}/SHLIBS_CORE_USER_SYMS_${BUILD_ID}.txt')
     sh_libs_sym_lst_node = env.SharedLibGenerateList([sh_libs_sym_lst], img_shlibs)
     dll_itmes += sh_libs_sym_lst_node
  
     sym_lst= env.RealPath('${SHORT_BUILDPATH}/CORE_USER_SYMS_${BUILD_ID}.txt')
     sym_lst_node = env.ConsolidateSymsList([sym_lst], [dlexpose_sym_lst_node[0], sh_libs_sym_lst_node[0]])
     dll_itmes += sym_lst_node
  
  else:
     sym_lst= env.RealPath('${SHORT_BUILDPATH}/CORE_USER_SYMS_${BUILD_ID}.txt')
     sym_lst_node = env.ConsolidateSymsList([sym_lst], [dlexpose_sym_lst_node[0]])
     dll_itmes += sym_lst_node
  
  image_units += dll_itmes

if 'IMAGE_BUILD_POST_LINK' in env:
   #-------------------------------------------------------------------------
   # Post process image
   #-------------------------------------------------------------------------

   # this is where any aditional rules after linking are done.

   #=========================================================================
   # Define targets needed
   #
   image_units += [
      image_elf,
   ]

   if env.GetUsesFlag('USES_FEATURE_DYNAMIC_LOADING'):
    image_units += [shlib_elf]

#=========================================================================
# Finish up...
env.BindAliasesToTargets(image_units)
