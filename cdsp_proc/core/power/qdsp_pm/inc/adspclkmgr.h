/*
* Copyright (c) 2015 Qualcomm Technologies, Inc.
* All Rights Reserved.
* Qualcomm Technologies, Inc. Confidential and Proprietary.
*/

/*
@file: adspclkmgr.h
@brief: Header for ADSPPM ADSP Clock Manager.

$Header: //components/rel/core.qdsp6/1.0.c2/power/qdsp_pm/inc/adspclkmgr.h#1 $
*/

#ifndef _ADSPCLKMGR_H_
#define _ADSPCLKMGR_H_

#include "adsppm.h"

// Enumeration for observable events generated by the MIPS Manager
typedef enum
{
    ADSPCLKMGR_CLOCK_CHANGE_EVENT = 0,
} AdsppmAdspClkManagerEventId;

// Event handler type for ADSP Clock Manager events
typedef void (*AdsppmAdspClkEventHandler)(AdsppmAdspClkManagerEventId event,
    void* param);

/**
 * @fn AdspClkMgr_Init
 * @brief Initialize the ADSP Clock Manager
 *        Requires that the DCVS Manager is already initialized
 */
Adsppm_Status AdspClkMgr_Init(void);

/**
 * @fn AdspClkMgr_IssueAdspClkRequest
 * @brief Aggregates current ADSP clock value with requests from SysMon DCVS
 */
Adsppm_Status AdspClkMgr_IssueAdspClkRequest(uint32 clientsAdspClkVote,
    uint32 dcvsAdspClkFloorVote);

// Get the current ADSP clock frequency vote
Adsppm_Status AdspClkMgr_GetAdspClockFreqVote(uint32* adspClockFreqVote);

// Register as an observer for an event
Adsppm_Status AdspClkMgr_RegisterEvent(AdsppmAdspClkManagerEventId event,
    AdsppmAdspClkEventHandler handler, void* param);

// Unregister as an observer for a previously registered event
Adsppm_Status AdspClkMgr_UnregisterEvent(AdsppmAdspClkManagerEventId event,
    AdsppmAdspClkEventHandler handler);

/**
 * @fn AdspClkMgr_GetInfo
 * @brief Get DCVS ADSP clock aggregation information for testing purposes
 */
Adsppm_Status AdspClkMgr_GetInfo(
    AdsppmInfoDcvsAdspClockType* pDcvsAdspClockInfo);


#endif /* _ADSPCLKMGR_H_ */

