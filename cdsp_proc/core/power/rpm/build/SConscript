import os
import fnmatch
import itertools

Import('env')
env = env.Clone()

SRCPATH = ".."
env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

CBSP_API = [
   'POWER',
   'MPROC',
   'DEBUGTOOLS',
   'DAL',
   'SERVICES',
   'KERNEL',
]

env.RequirePublicApi(CBSP_API)
env.RequireRestrictedApi(CBSP_API)

env.PublishPrivateApi('RPM', [
   '${BUILD_ROOT}/core/power/rpm/common',   
])

env.Append(CPPDEFINES=['RPM_EDGE_TYPE=SMD_QDSP_RPM'])
env.Append(CPPDEFINES=['ULOG_RPM_LOCK_TYPE=ULOG_LOCK_OS'])
env.Append(CPPDEFINES=['DALSYS_RPM_SYNC_TYPE=DALSYS_SYNC_ATTR_RESOURCE'])

#-------------------------------------------------------------------------------
# Override RPM Communication mode if desired.
#
# CR 929664:
# Allows the Image Team to enable or disable the feature via
# the SCons USES_DISABLE_RPM_COMMUNICATION parameter in the build command
#
#-------------------------------------------------------------------------------
if 'USES_DISABLE_RPM_COMMUNICATION' in env:
    env.Append(CPPDEFINES=['FEATURE_DISABLE_RPM_COMMUNICATION'])
    env.PrintWarning('OVERRIDE: RPM Communication Disabled via USES_FLAGS.')

TARGET_SRCPATH = ''
if env['MSM_ID'] in ['660']:
    TARGET_SRCPATH = os.path.join(SRCPATH, 'client_660')


source_patterns = ['*.c', '*.cpp']
sources = []
for root, dirnames, filenames in os.walk(TARGET_SRCPATH):
    matches = itertools.chain(*[fnmatch.filter(filenames, pattern) for pattern in source_patterns])
    matches = ['${BUILDPATH}' + os.path.join(root, filename)[2:] for filename in matches]
    sources.extend(matches)

COMMON_SRCPATH = os.path.join(SRCPATH, 'common')

for root, dirnames, filenames in os.walk(COMMON_SRCPATH):
    matches = itertools.chain(*[fnmatch.filter(filenames, pattern) for pattern in source_patterns])
    matches = ['${BUILDPATH}' + os.path.join(root, filename)[2:] for filename in matches]
    sources.extend(matches) 

env.AddLibrary(['QDSP6_SW_IMAGE', 'CBSP_QDSP6_SW_IMAGE'], '${BUILDPATH}/rpm.lib', sources)

if env['MSM_ID'] in ['660']:
    # Handling system init.
    RCINIT_IMG = ['CORE_QDSP6_SW', 'CBSP_QDSP_SW_IMAGE']
    env.AddRCInitFunc(
         RCINIT_IMG,
         {
             'sequence_group'             : 'RCINIT_GROUP_0',
             'init_name'                  : 'rpm',
             'init_function'              : 'rpmclient_init',
             'dependencies'               : ['glink', 'xport_rpm', 'xport_smd', 'npa', 'smd']
        }
    )
else:
    # Handling system init.
    RCINIT_IMG = ['CORE_QDSP6_SW', 'CBSP_QDSP_SW_IMAGE']
    env.AddRCInitFunc(
         RCINIT_IMG,
         {
             'sequence_group'             : 'RCINIT_GROUP_0',
             'init_name'                  : 'rpm',
             'init_function'              : 'rpmclient_init',
             'dependencies'               : ['smd','npa']
        }
    )


# Task for testing things.
#env.AddRCInitTask(
#    RCINIT_IMG,
#    {
#        'sequence_group'             : 'RCINIT_GROUP_0',    # required
#        'thread_name'                : 'rpmtest',           # required
#        'thread_entry'               : 'rpm_test_task',
#        'stack_size_bytes'           : '8192',
#        'priority_amss_order'        : 'SLEEP_PRI_ORDER',
#        'cpu_affinity'               : 'REX_ANY_SMT_MASK',
#        'dependencies'               : ['rpm']
#        }
#    )

