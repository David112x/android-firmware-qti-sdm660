#============================================================================
#
# FS_OSAL Lib
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2015 by QUALCOMM Technologies, Inc.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#----------------------------------------------------------------------------
#
#  $Header: //components/rel/core.qdsp6/1.0.c2/storage/fs_osal/build/fs_osal.scons#1 $  $DateTime: 2020/02/10 01:57:30 $  $Author: pwbldsvc $
#  $Change: 22511909 $
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when        who  what, where, why
# ----------  ---  ----------------------------------------------------------
# 2015-03-09  dks  Create
#
#============================================================================
Import('env')
env = env.Clone()

#----------------------------------------------------------------------------
# Source PATH
#----------------------------------------------------------------------------
SRCDIR = "${BUILD_ROOT}/core/storage/fs_osal/src"

env.VariantDir('${BUILDPATH}', SRCDIR, duplicate=0)

#----------------------------------------------------------------------------
# Internal depends within CoreBSP
#----------------------------------------------------------------------------
CBSP_API = [
   'DAL',
   'DEBUGTOOLS',
   'MPROC',
   'SERVICES',
   'STORAGE',
   'SYSTEMDRIVERS',
   # needs to be last as it may contain wrong comdef.h
   'KERNEL',
]

env.RequirePublicApi(CBSP_API)
env.RequireRestrictedApi(CBSP_API)


#----------------------------------------------------------------------------
# Sources, libraries
#----------------------------------------------------------------------------
FS_OSAL_SOURCES = [
         '${BUILDPATH}/fs_os_common.c',
         '${BUILDPATH}/fs_os_malloc.c',
         '${BUILDPATH}/fs_os_posix.c',
         '${BUILDPATH}/fs_os_qurt.c',
         '${BUILDPATH}/fs_os_string.c',
         '${BUILDPATH}/fs_os_timetick.c',
        ]

fs_osal_obj = env.Object(FS_OSAL_SOURCES)

#----------------------------------------------------------------------------
# Get the build configuration flags and print them
#----------------------------------------------------------------------------
cpp_flags = []
cpp_flags = env['CPPDEFINES']


env.LoadToolScript('${BUILD_ROOT}/core/storage/fs_osal/build/' \
                   'fs_write_list_builder.py')
fs_osal_cpp_flags = env.FsWriteList ('${BUILDPATH}/fs_osal_cpp_flags.txt',
                                 FS_OSAL_SOURCES, FS_WRITE_LIST=cpp_flags)


env.Depends (fs_osal_obj, fs_osal_cpp_flags);   


#----------------------------------------------------------------------------
# Add Libraries to image
#----------------------------------------------------------------------------
FS_OSAL_DEST_IMAGES = [
   'CORE_APPS',                  # Domain(REX + TN)
   'CORE_MODEM',                 # Domain(Root + Modem)
   'MODEM_MODEM',                # Domain(Root + Modem)
   'CORE_QDSP6_MODEM_SW',        # Domain(User Modem)
   'CORE_QDSP6_SW',              # Domain(Root + Audio)
   'CORE_QDSP6_AUDIO_SW',        # Domain(User Audio)
   'CORE_QDSP6_SENSOR_SW',       # Domain(User Sensors)
   'CORE_ROOT_PD',               # Domain(Root)
   'CORE_USER_PD',               # Domain(User)
   'CORE_ADSP_ROOT',             # Domain(Audio Root)
]

env.AddLibrary (FS_OSAL_DEST_IMAGES,'${BUILDPATH}/fs_osal', FS_OSAL_SOURCES)

#----------------------------------------------------------------------------
# RCINIT Initialization of the storage_diag
#----------------------------------------------------------------------------
RCINIT_IMG = FS_OSAL_DEST_IMAGES
env.AddRCInitFunc(RCINIT_IMG,
    {
      'sequence_group'             : 'RCINIT_GROUP_0',
      'init_name'                  : 'fs_os',
      'init_function'              : 'fs_os_init',
      'dependencies'               : ['timer_init', 'qmi_fw']
    })



