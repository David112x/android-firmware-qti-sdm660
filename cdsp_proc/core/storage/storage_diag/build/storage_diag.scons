#============================================================================
#
# Storage Diag module
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2014-2015 by QUALCOMM Technologies, Inc.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#----------------------------------------------------------------------------
#
#  $Header: //components/rel/core.qdsp6/1.0.c2/storage/storage_diag/build/storage_diag.scons#1 $  $DateTime: 2020/02/10 01:57:30 $  $Author: pwbldsvc $
#  $Change: 22511909 $
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when        who  what, where, why
# ----------  ---  ----------------------------------------------------------
# 2015-05-06  dks  Add OS abstraction layer
# 2015-01-05  dks  Build cpp flags
# 2014-09-19  dks  Add hooks to extract performance numbers.
# 2014-08-26  rp   Bring in changes from target-unit-testing.
# 2014-08-04  rp   Add multi-threaded command queue support.
# 2014-07-07  rp   Create
#
#============================================================================
Import('env')
env = env.Clone()

if env['IMAGE'] in ['cdsp']:
   Return()
   
#----------------------------------------------------------------------------
# Source PATH
#----------------------------------------------------------------------------
SRCPATH = "${BUILD_ROOT}/core/storage/storage_diag/src"

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#----------------------------------------------------------------------------
# Internal depends within CoreBSP
#----------------------------------------------------------------------------
CBSP_API = [
   'DAL',
   'DEBUGTOOLS',
   'SERVICES',
   'STORAGE',
   'MPROC',
   'SYSTEMDRIVERS',
   # needs to be last as it may contain wrong comdef.h
   'KERNEL',
]

env.RequirePublicApi(CBSP_API)
env.RequireRestrictedApi(CBSP_API)

#----------------------------------------------------------------------------
# Sources, libraries
#----------------------------------------------------------------------------

#----------------------------------------------------------------------------
# AMSS source files
#----------------------------------------------------------------------------

STORAGE_DIAG_SOURCES = [
  '${BUILDPATH}/storage_diag.c',
  '${BUILDPATH}/storage_diag_msg.c',
]
storage_diag_obj = env.Object(STORAGE_DIAG_SOURCES)

#----------------------------------------------------------------------------
# Pre-process Server config.
#----------------------------------------------------------------------------
storage_diag_config_pp = env.PreProcess('${BUILDPATH}/storage_diag_config_list.pp',
                                       '${BUILDPATH}/storage_diag_config_list.c')

#-------------------------------------------------------------------------------
# Configuartions
#-------------------------------------------------------------------------------
cpp_flags = []

if env.IsTargetEnable (['CORE_MODEM']):
  cpp_flags += ['STORAGE_DIAG_MPSS_BUILD']
else:
  cpp_flags += ['FEATURE_STORAGE_DIAG_COMPILE_WITHOUT_EFS']
  if env.IsTargetEnable (['CORE_USER_PD', 'CORE_QDSP6_SW', 'CORE_ADSP_ROOT']):
    cpp_flags += ['STORAGE_DIAG_ADSP_BUILD']
  elif env.IsTargetEnable (['CORE_QDSP6_SENSOR_SW']):
    cpp_flags += ['STORAGE_DIAG_SENSORS_BUILD']
  elif env.IsTargetEnable (['CORE_APPS']):
    cpp_flags += ['STORAGE_DIAG_SPARROW_BUILD']

if env.IsTargetEnable (['CORE_APPS','CORE_ADSP_ROOT','CORE_USER_PD']):
  cpp_flags += ['FEATURE_STORAGE_DIAG_COMPILE_WITHOUT_EFS']
if env.IsTargetEnable (['CORE_APPS','CORE_ROOT_PD']):
  cpp_flags += ['FEATURE_STORAGE_DIAG_COMPILE_EFS_LIB']


env.Append (CPPDEFINES = cpp_flags);
env.LoadToolScript('${BUILD_ROOT}/core/storage/fs_osal/build/' \
                   'fs_write_list_builder.py')
storage_diag_cpp_flags = env.FsWriteList ('${BUILDPATH}/storage_diag_cpp_flags.txt',
                                          STORAGE_DIAG_SOURCES, FS_WRITE_LIST=cpp_flags)
env.Depends (storage_diag_obj, [storage_diag_config_pp, storage_diag_cpp_flags]);


#----------------------------------------------------------------------------
# Add Libraries to image
#----------------------------------------------------------------------------

STORAGE_DIAG_DEST_IMAGES = [
  'CORE_APPS',                  # Domain(REX + TN)
  'CORE_MODEM',                 # Domain(Root + Modem)
  'MODEM_MODEM',                # Domain(Root + Modem)
  'CORE_QDSP6_MODEM_SW',        # Domain(User Modem)
  'CORE_QDSP6_SW',              # Domain(Root + Audio)
  'CORE_QDSP6_AUDIO_SW',        # Domain(User Audio)
  'CORE_QDSP6_SENSOR_SW',       # Domain(User Sensors)
  'CORE_ROOT_PD',               # Domain(Root)
  'CORE_USER_PD',               # Domain(User)
  'CORE_ADSP_ROOT',             # Domain(Audio Root)
]

if 'USES_STORAGE_DIAG' in env:
  env.AddLibrary(STORAGE_DIAG_DEST_IMAGES,'${BUILDPATH}/storage_diag',
                 STORAGE_DIAG_SOURCES)

#----------------------------------------------------------------------------
# RCINIT Initialization of the storage_diag
#----------------------------------------------------------------------------
if 'USES_STORAGE_DIAG' in env:
  RCINIT_IMG = STORAGE_DIAG_DEST_IMAGES
  env.AddRCInitFunc(
    RCINIT_IMG,
    {
      'sequence_group'             : 'RCINIT_GROUP_2',
      'init_name'                  : 'storage_diag',
      'init_function'              : 'storage_diag_init',
      'dependencies'               : ['timer_init', 'dog_init', 'qmi_fw']
    })


#-----------------------------------------------------------
# Pack rules. Remove sources when not needed.
#-----------------------------------------------------------
STORAGE_DIAG_PACK_SRC = env.FindFiles("*", "${BUILD_ROOT}/core/storage/storage_diag/")
if not 'USES_STORAGE_DIAG' in env:
  env.CleanPack(STORAGE_DIAG_DEST_IMAGES, STORAGE_DIAG_PACK_SRC)
