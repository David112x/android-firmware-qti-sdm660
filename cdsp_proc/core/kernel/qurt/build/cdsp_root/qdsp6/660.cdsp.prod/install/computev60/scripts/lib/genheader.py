#=============================================================================
#
#                                    genheader.py
#
# GENERAL DESCRIPTION
#
# EXTERNAL FUNCTIONS
#        None.
#
# INITIALIZATION AND SEQUENCING REQUIREMENTS
#        None.
#
#             Copyright (c) 2013  by Qualcomm Technologies, Inc.  All Rights Reserved.
#=============================================================================

import optparse         # Standard Python
import sys              # Standard Python

import genkernel        # QuRT script
import qurt             # QuRT script

class Config:           # Just an empty class to pass to genkernel.QurtVars()
    pass

def genheader_cmd(args):
    #
    #  Script entry point used to generate an include file for the QuRT
    #   "cust_config" variables and structures.
    #
    #  This is basically just a wrapper around the code in genkernel.py
    #   which actually provides the content for the include file.
    #

    parser = optparse.OptionParser('%prog genheader [-T tools_path] [[-I file] ...] output_file')

    #
    #  Allow for specifying the tools path directly instead of searching PATH
    #
    parser.add_option('-T',
                      '--tools_path')
    #
    #  Allow for auxiliary include files to be passed to the compiler
    #
    parser.add_option('-I',
                      '--include',
                      action='append',
                      default=[])
    #
    #  Legacy options allowed for backward compatibility but ignored
    #
    parser.add_option('--kernel',
                      action='store_true')
    parser.add_option('-L',
                      '--use_llvm',
                      action='store_true')

    opts, args = parser.parse_args(args)

    if len(args) > 1:
        parser.error('Multiple output files provided -- bailing out')

    cfg = Config()
    genkernel.QurtVars(cfg)
    cfg.compiler = qurt.qurt_get_compiler(opts.tools_path)
    cfg.includes = opts.include

    full_h_file = [
        '/* This file is automatically generated. */',
        '#ifndef   GEN_CONFIG_HEADER_USED',
        '#define   GEN_CONFIG_HEADER_USED',
        cfg.vars.get_declarations().strip(),
        '#endif /* GEN_CONFIG_HEADER_USED */',
        ''
        ]

    full_h_file = '\n'.join(full_h_file)

    if args:
        f = open(args[0], 'w')
        f.write(full_h_file)
        f.close()
    else:
        sys.stdout.write(full_h_file)

    return 0

