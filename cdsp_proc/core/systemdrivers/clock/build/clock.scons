#=============================================================================
# CLOCK DRIVER SHARED LIBRARY
#
# Target:    All
# Processor: All
#
#=============================================================================
# $Header: //components/dev/core.qdsp6/1.0/shantonu.core.qdsp6.1.0.clk_drv_ADSP_SL/systemdrivers/clock/build/clock.scons#1 $
#=============================================================================
#  Copyright 2016 Qualcomm Technologies Incorporated.
#  All Rights Reserved.
#  QUALCOMM Proprietary/GTDR
#=============================================================================

import os

Import('env')
env = env.Clone()


#------------------------------------------------------------------------------
# Add API folders
#------------------------------------------------------------------------------

CLOCK_BUILD_ROOT = os.getcwd();

env.PublishPrivateApi('SYSTEMDRIVERS_CLOCK', [
   CLOCK_BUILD_ROOT + "/../src/${IMAGE}",
   "${BUILD_ROOT}/core/systemdrivers/clock/config",
   "${BUILD_ROOT}/core/systemdrivers/clock/inc",
   "${BUILD_ROOT}/core/systemdrivers/clock/${BUILDPATH}",
   "${BUILD_ROOT}/core/systemdrivers/clock/config/${CHIPSET}/${IMAGE}",
   "${BUILD_ROOT}/core/systemdrivers/hal/clk/inc",
   "${BUILD_ROOT}/core/systemdrivers/clock/hw/${CHIPSET}/${IMAGE}/inc"
])

#-----------------------------------------------------------------------------
# Define paths
#-----------------------------------------------------------------------------

SRCPATH = "../"
SRCPATHSCRIPTS = env['BUILD_ROOT'] + '/core/systemdrivers/clock/scripts/'

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)


#-----------------------------------------------------------------------------
# Define any features or compiler flags
#-----------------------------------------------------------------------------


#-------------------------------------------------------------------------------
# Internal depends within CoreBSP
#-------------------------------------------------------------------------------

CBSP_API = [
   'DAL',
   'HAL',
   'SERVICES',
   'SYSTEMDRIVERS',
   'SYSTEMDRIVERS_PMIC',
   'POWER',
   'KERNEL',
   'DEBUGTRACE',
   'DEBUGTOOLS'
]

env.RequirePublicApi(CBSP_API)
env.RequireRestrictedApi(CBSP_API)

#-------------------------------------------------------------------------------
# Define sources
#-------------------------------------------------------------------------------

CLOCK_SOURCES = [
   '${BUILDPATH}/src/${IMAGE}/ClockDriver.c',
   '${BUILDPATH}/src/${IMAGE}/ClockLegacy.c',
   '${BUILDPATH}/src/${IMAGE}/ClockSources.c',
   '${BUILDPATH}/src/${IMAGE}/ClockVoltage.c',
   '${BUILDPATH}/src/${IMAGE}/ClockFwk.c'
]


CLOCK_BIST_SOURCES = [
   '${BUILDPATH}/src/${IMAGE}/ClockBIST.c'
]

#-------------------------------------------------------------------------------
# Add CMM scripts to T32 menu
#-------------------------------------------------------------------------------

CMM_ARGUMENT = env['CHIPSET']

try:
  if env['IMAGE_NAME'] in ['ADSP_PROC']:
    env.AddCMMScripts ('ADSP', [SRCPATHSCRIPTS], { 'Clock.cmm' : ['Clocks', CMM_ARGUMENT] }, 'SystemDrivers')
  elif env['IMAGE_NAME'] in ['CDSP_PROC']:
    env.AddCMMScripts ('CDSP', [SRCPATHSCRIPTS], { 'Clock.cmm' : ['Clocks', CMM_ARGUMENT] }, 'SystemDrivers')
except:
  pass

   
#-------------------------------------------------------------------------------
# Define objects
#-------------------------------------------------------------------------------

ClockShared_lib   = env.Library('${BUILDPATH}/Clock',     CLOCK_SOURCES)
ClockBIST_lib     = env.Library('${BUILDPATH}/ClockBIST', CLOCK_BIST_SOURCES)


#-------------------------------------------------------------------------------
# Add Libraries to image
#-------------------------------------------------------------------------------

env.AddLibsToImage(
  ['QDSP6_SW_IMAGE', 'CBSP_QDSP6_SW_IMAGE'],
  [ClockShared_lib, ClockBIST_lib])


#-------------------------------------------------------------------------------
# Register initialization function and dependencies.
#-------------------------------------------------------------------------------

if 'USES_RCINIT' in env:
  RCINIT_IMG = ['QDSP6_SW_IMAGE', 'CBSP_QDSP6_SW_IMAGE']
  env.AddRCInitFunc(              # Code Fragment in TMC: NO
    RCINIT_IMG,                   # define TMC_RCINIT_INIT_CLK_REGIME_INIT
    {
      'sequence_group' : 'RCINIT_GROUP_0',                            # required
      'init_name'      : 'clk_regime',                                # required
      'init_function'  : 'clk_regime_init',                           # required
      'dependencies'   : ['dalsys', 'npa', 'vcs', 'rpm', 'busywait', 'sys_m_smsm_init']
    })

#-----------------------------------------------------------------------------
# Invoke chipset build file
#-----------------------------------------------------------------------------

if 'msm8998' in env['CHIPSET']:
  env.SConscript('${BUILDPATH}/hw/msm8998/${IMAGE}/build/clock_hw.scons', exports='env')
if 'sdm660' in env['CHIPSET']:
  env.SConscript('${BUILDPATH}/hw/sdm660/${IMAGE}/build/clock_hw.scons', exports='env')

#---------------------------------------------------------------------------
# Invoke document generation SConscript
#---------------------------------------------------------------------------

if os.path.exists(env['BUILD_ROOT'] + '/core/api/systemdrivers/docsrc/clock/SConscript') :
  env.SConscript(
    '${BUILD_ROOT}/core/api/systemdrivers/docsrc/clock/SConscript',
    exports='env')


#-------------------------------------------------------------------------------
# DEVCFG - Clock XML
#-------------------------------------------------------------------------------

if 'USES_DEVCFG' in env:
   DEVCFG_IMG = ['DAL_DEVCFG_IMG']
   env.AddDevCfgInfo(DEVCFG_IMG, 
   {
    '8998_xml' : ['${BUILD_ROOT}/core/systemdrivers/clock/config/msm8998/${IMAGE}/ClockChipset.xml',
                  '${BUILD_ROOT}/core/systemdrivers/clock/config/msm8998/${IMAGE}/ClockImageBSP.c'],
    '660_xml'  : ['${BUILD_ROOT}/core/systemdrivers/clock/config/sdm660/${IMAGE}/ClockChipset.xml',
                  '${BUILD_ROOT}/core/systemdrivers/clock/config/sdm660/${IMAGE}/ClockImageBSP.c']
   })


clk_inc_root = '${INC_ROOT}'
env['CLK_INC_ROOT']= clk_inc_root
clock_tracer_inc="${CLK_INC_ROOT}/core/systemdrivers/clock/inc"

if env.IsTargetEnable(['CORE_SSC_SLPI_USER']):
  clock_tracer_inc=clock_tracer_inc+'/sensor'
elif env.IsTargetEnable(['CORE_AVS_SLPI_USER']):
  clock_tracer_inc=clock_tracer_inc+'/audio'

env.PublishPrivateApi('CLK_SYSTEMDRIVERS', [
   clock_tracer_inc])


if 'USES_QDSS_SWE' in env:
  env.Append(CCFLAGS = " -DCLOCK_TRACER_SWEVT")
  QDSS_IMG = ['QDSS_EN_IMG']
  events = [
    ['CLOCK_EVENT_INIT',               'Clock initialized'],
    ['CLOCK_EVENT_CLOCK_STATUS',       'Clock name: %plugin[1]<clock>. Requested state = %d (enable/disable), actual state (reference count) = %d.'],
    ['CLOCK_EVENT_CLOCK_FREQ',         'Clock name: %plugin[1]<clock>. Frequency = %d (KHz).'],
    ['CLOCK_EVENT_SOURCE_STATUS',      'Clock source %d. Status = %d (on/off)'],
    ['CLOCK_EVENT_SOURCE_FREQ',        'Source ID: %d. Frequency = %d (KHz)'],
    ['CLOCK_EVENT_PROC_SLEEP',         'Clock processor sleep.'],
    ['CLOCK_EVENT_PROC_RESTORE',       'Clock processor restore'],
    ['CLOCK_EVENT_XO',                 'XO lpr = %d (enable/disable)'],
    ['CLOCK_EVENT_CLOCK_LOG_STATE_NF', 'Clock name: %plugin[1]<clock>. Clock state = %d (enable/disable), reset state = %d'],
    ['CLOCK_EVENT_CLOCK_LOG_STATE',    'Clock name: %plugin[1]<clock>. Clock state = %d (enable/disable), reset state = %d, frequency = %d (KHz)'],
  ]

  env.AddSWEInfo(QDSS_IMG, events)

if 'QDSS_TRACER_SWE' in env:
   env.SWEBuilder(['${BUILDPATH}/src/ClockSWEventId.h'], None)
   env.Append(CPPPATH = ['${BUILD_ROOT}/core/systemdrivers/clock/build/${BUILDPATH}/src'])
