#===============================================================================
#
#
# GENERAL DESCRIPTION
#
# Copyright (c) 2011 - 2015 QUALCOMM Technologies Incorporated. All Rights Reserved
#
# Qualcomm Proprietary
#
# Export of this technology or software is regulated by the U.S. Government.
# Diversion contrary to U.S. law prohibited.
#
# All ideas, data and information contained in or disclosed by
# this document are confidential and proprietary information of
# Qualcomm Technologies Incorporated and all rights therein are expressly reserved.
# By accepting this material the recipient agrees that this material
# and the information contained therein are held in confidence and in
# trust and will not be used, copied, reproduced in whole or in part,
# nor its contents revealed in any manner to others without the express
# written permission of Qualcomm Technologies Incorporated.
#
#-------------------------------------------------------------------------------
#
# $Header: //source/qcom/qct/modem/rfa2/pmic/build/v6_0/main/latest/rfa_pmic.scons#9 $
# $DateTime: 2012/04/18 09:22:27 $ 
#
#                      EDIT HISTORY FOR FILE
#                      
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#  
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 05/12/15   pb      Added support for PAM testing
# 06/25/12   hs      Moved to core\systemdrivers.
# 03/30/12   hs      Added support for VBATT APP.
# 03/07/12   hs      Added support for BOOT builds.
# 03/12/12   hs      Updated.
# 03/07/12   hs      Added support for MPSS and RPM builds.
# 01/24/12   hs      Created
#===============================================================================

import os
Import('env')

env.Replace(PMIC_ROOT = [
   "${INC_ROOT}/core/systemdrivers/pmic",
])
env.Append(CPPDEFINES = 'PM_IMAGE_SSC_PROC')


if os.path.isfile(env['BUILD_ROOT'] + '/core/systemdrivers/pmic/config/' + env['CHIPSET'] + '/pmic_config.xml') :
   env.PublishProtectedApi( 'PMIC_CONFIG', [    
       '${PMIC_ROOT}/config/${CHIPSET}',
       ])
else:
   env.PublishProtectedApi( 'PMIC_CONFIG', [    
       '${PMIC_ROOT}/config/msm8974',
       ])

env.PublishPrivateApi( 'PMIC_COMMON', [
    '${PMIC_ROOT}/inc'
    ])

env.PublishPrivateApi( 'PMIC_COMMON_NPA', [
    '${PMIC_ROOT}/npa/inc'
    ])

env.PublishPrivateApi( 'PMIC_COMMON_FRAMEWORK', [
    '${PMIC_ROOT}/framework/src'
    ])

env.PublishPrivateApi( 'PMIC_COMMON_UTILS', [
    '${PMIC_ROOT}/utils/src'
    ])

#------- For PAM testing --------------------------------------------------------------
env.PublishPrivateApi( 'PMIC_COMMON_NPA_TEST', [ 
    '${PMIC_ROOT}/npa/test'
    ])
#---------------------------------------------------------------------

if 'USES_QDSS_SWE' in env:
   QDSS_IMG = ['QDSS_EN_IMG']
   events = [['PMIC_EVENT_FIRST=512','PMIC first event placeholder'],
             ['PMIC_EVENT_LAST=639','PMIC last event placeholder']
            ]
   env.AddSWEInfo(QDSS_IMG, events)


#-------------------------------------------------------------------------------
# Build Directives:  
#-------------------------------------------------------------------------------


#Import('env')

LIB_NAME        = 'pmic_common'

if 'msm8998' in env['CHIPSET'] or 'sdm660' in env['CHIPSET']:
    IMAGE_SOURCES   = ['CORE_QDSP6_SW']
else:
    IMAGE_SOURCES   = ['MODEM_MODEM','CORE_MODEM','CORE_QDSP6_SW', 'CBSP_QDSP6_SW_IMAGE']

LIB_NPA_SSC   = 'npa/src/ssc'
LIB_NPA         = 'npa/src'
LIB_FRAMEWORK   = 'framework/src'
LIB_UTILS       = 'utils/src'
#PAM testing
LIB_NPA_TEST    = 'npa/test'

from glob import glob

env = env.Clone()


#-------------------------------------------------------------------------------
# Source PATH:  
#-------------------------------------------------------------------------------
SRCPATH = ".."

#BUILDPATH =  image_name / processor_name, eg modem_libs / arm11 = directory where built objects stored
env.VariantDir('${BUILDPATH}', SRCPATH , duplicate=0)

    
env.RequirePublicApi([
    'BUSES',
    'DAL',
    'DEBUGTOOLS',
    'HWENGINES',
    'KERNEL',
    'MPROC',
    'SERVICES',
    'SYSTEMDRIVERS',
    'SYSTEMDRIVERS_PMIC',
    ],
    area='CORE')

        
env.RequirePrivateApi([        
    'PMIC_COMMON_NPA',
    'PMIC_COMMON',
    'PMIC_CONFIG',
    'PMIC_COMMON_FRAMEWORK',
    'PMIC_COMMON_UTILS'
    ])


LIB_SOURCES = [ ]  #empy list

SOURCE_FILES = [ ] 

#find all .c
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_NPA_SSC+'/*.c'))
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_NPA+'/*.c'))
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_FRAMEWORK+'/*.c'))
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_UTILS+'/*.c'))
#PAM testing
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_NPA_TEST+'/*.c'))

#find all .s files
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_NPA_SSC+'/*.s'))
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_NPA+'/*.s'))
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_FRAMEWORK+'/*.s'))
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_UTILS+'/*.s'))
#PAM testing
SOURCE_FILES.extend(glob(SRCPATH + '/'+LIB_NPA_TEST+'/*.s'))

for filename in SOURCE_FILES:
        LIB_SOURCES.append('${BUILDPATH}/' + filename.replace(SRCPATH,''))


#if LIB_SOURCES:
#        env.AddLibrary(IMAGE_SOURCES, '${BUILDPATH}/'+LIB_NAME,[
#        LIB_SOURCES,
#        ])


#this statement must appear outside of 'USES_NO_STRIP_NO_ODM' test so that the pre-built library will be added to the list file
env.AddBinaryLibrary(IMAGE_SOURCES, '${BUILDPATH}/'+LIB_NAME,[
    LIB_SOURCES,
    ])


CLEAN_SOURCES = env.FindFiles(['*.c', '*.h'], '${BUILD_ROOT}/core/systemdrivers/pmic/utils/src')
env.CleanPack(IMAGE_SOURCES, CLEAN_SOURCES)


if 'USES_RCINIT' in env:
  RCINIT_IMG = IMAGE_SOURCES
  env.AddRCInitFunc(              # Code Fragment in TMC: NO
    RCINIT_IMG,                   # define TMC_RCINIT_INIT_PMIC_INIT
    {
      'sequence_group' : 'RCINIT_GROUP_0',                            # required
      'init_name'      : 'pmic',                                      # required
      'init_function'  : 'pm_ssc_proc_npa_init',                    # required
      'dependencies'   : ['dalsys','npa', 'rpm', 'smd']
    })


#-------------------------------------------------------------------------------

if 'USES_DEVCFG' in env:
  DEVCFG_IMG = ['DAL_DEVCFG_IMG']
  env.AddDevCfgInfo(DEVCFG_IMG, 
  {
    '8996_xml' : ['${BUILD_ROOT}/core/systemdrivers/pmic/config/msm8996/pmic_config.xml',
                  '${BUILD_ROOT}/core/systemdrivers/pmic/config/msm8996/pm_lpass_settings.c',
                  '${BUILD_ROOT}/core/systemdrivers/pmic/config/msm8996/pm_lpass_proc_pam.c'],
    '660_xml' : ['${BUILD_ROOT}/core/systemdrivers/pmic/config/sdm660/pmic_config.xml',
              '${BUILD_ROOT}/core/systemdrivers/pmic/config/sdm660/pm_ssc_settings.c',
              '${BUILD_ROOT}/core/systemdrivers/pmic/config/sdm660/pm_config_ssc_npa_pam.c'],
  })
