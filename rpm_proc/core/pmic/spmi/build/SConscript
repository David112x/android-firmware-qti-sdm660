#===============================================================================
# SPMI Libs
#
# GENERAL DESCRIPTION
#    SPMI Build Script
#
# Copyright (c) 2013-2016 by Qualcomm Technologies Incorporated. All Rights Reserved.
#-------------------------------------------------------------------------------
#  $Header: //components/rel/rpm.bf/1.8/core/pmic/spmi/build/SConscript#5 $
#  $DateTime: 2018/08/10 07:09:32 $
#  $Change: 16855347 $
#===============================================================================
import os, re
Import('env')
#default vipertooth support using Starlord target specific files   
if env['MSM_ID'] in ['405']:
   env['MSM_ID'] = '660'

supported_targets = ['8996', '8998', '660', 'nicobar']
if env['MSM_ID'] not in supported_targets:
    env.PrintWarning('Bailing from SPMI scripts; no support for build targets other than %s' % supported_targets)
    Return()

#-------------------------------------------------------------------------------
# Load sub scripts
#-------------------------------------------------------------------------------
env.LoadSoftwareUnits()

#-------------------------------------------------------------------------------
# Setup
#-------------------------------------------------------------------------------

INC_DIRS = []

SRCPATH = "../src"

env = env.Clone()
env['CCFLAGS'] += '${ARMCC_STDC99_CMD}'


env.Append(CPPDEFINES = ["FEATURE_LIBRARY_ONLY"])   
env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

CHIP_FAMILY='bear'
    
#-------------------------------------------------------------------------------
# Logging
#-------------------------------------------------------------------------------
logLevel = 'SPMI_LOG_LEVEL_FATAL'

env.Append(CPPDEFINES = ["SPMI_LOG_COMPILE_LEVEL=" + logLevel])    

if env['MSM_ID'] in ['8998','660','nicobar']:
    SPMI_HWIO = 'v3'
else:   
    SPMI_HWIO = 'v2_1'


#-------------------------------------------------------------------------------
# Helper Functions
#-------------------------------------------------------------------------------
def getConfigFiles(target, pattern='*'):
    return getTargetFiles(target, pattern, SRCPATH + '/platform/config/' + CHIP_FAMILY)
    
def getTargetFiles(target, pattern, baseCfgDir):
    t = target
    
    # Look for an exact match
    file = env.GlobFiles(baseCfgDir + '/' + target + '/' + pattern, posix=True)
    
    if not file:
        if target[1] == 'x':
            # Try a slightly more specific version (e.g. 8x16 -> 8916)
            target = target[:1] + '[0-9]' + target[2:]
        else:
            # Try a slightly more generic version (e.g. 8916 -> 8x16)
            target = target[:1] + 'x' + target[2:]
            
        file = env.GlobFiles(baseCfgDir + '/' + target + '/' + pattern, posix=True)
        
    if not file:
        # Fallback to the default
        file = env.GlobFiles(baseCfgDir + '/default/' + pattern, posix=True)
    
    if not file:
        env.PrintDebugInfo('spmi', 'No SPMI files found for %s/%s/%s' % (baseCfgDir, t, pattern) )
        
    return file

#-------------------------------------------------------------------------------
# Private APIs
#-------------------------------------------------------------------------------
INC_DIRS = [
   '${INC_ROOT}/core/pmic/spmi/src/core',
   '${INC_ROOT}/core/pmic/spmi/src/core/hal',
   '${INC_ROOT}/core/pmic/spmi/src/core/hal/bear',
   '${INC_ROOT}/core/pmic/spmi/src/core/hal/bear/hw/' + SPMI_HWIO,
   '${INC_ROOT}/core/pmic/spmi/src/platform/config/bear',
   '${INC_ROOT}/core/pmic/spmi/src/platform/inc',
   '${INC_ROOT}/core/pmic/spmi/src/platform/os',
]

INC_DIRS.append('${INC_ROOT}/core/pmic/spmi/src/platform/os/rpm')
env.PublishPrivateApi('BUSES_SPMI', INC_DIRS)
 
#-------------------------------------------------------------------------------
# Internal depends within CoreBSP
#-------------------------------------------------------------------------------
CBSP_APIS = [
   'BUSES',
   'HAL',
   'DAL',
   'SYSTEMDRIVERS',
   'PMIC',
   'SERVICES',
   'POWER',
   'DEBUGTRACE',
   'SECUREMSM',  # for tzos_log   
   'BOOT',       # for boot_log
   'MINK'
]

env.RequirePublicApi(CBSP_APIS)
env.RequireRestrictedApi(CBSP_APIS)

#-------------------------------------------------------------------------------
# Sources & Libraries
#-------------------------------------------------------------------------------
MAIN_LIB_IMAGES = ['RPM_IMAGE']
              
SPMI_SOURCE_PATHS = [
   SRCPATH + '/core',
   SRCPATH + '/core/hal',
   SRCPATH + '/core/hal/bear',
   SRCPATH + '/core/hal/bear/hw/' + SPMI_HWIO,
]

SPMI_SOURCE_PATHS.append(SRCPATH + '/platform/os/rpm')

SPMI_SOURCES = []

for src_path in SPMI_SOURCE_PATHS:
   SPMI_SOURCES += env.GlobFiles(src_path + '/*.c', posix=True)

SPMI_BLD_SOURCES = [f.replace(SRCPATH, '${BUILDPATH}') for f in SPMI_SOURCES]

#-------------------------------------------------------------------------------
# DAL Config Files
#-------------------------------------------------------------------------------
spmi_config_cfile_path = getConfigFiles(env['MSM_ID'], '*.c')
spmi_config_cf = [f.replace(SRCPATH, '${BUILDPATH}') for f in spmi_config_cfile_path]

SPMI_BLD_SOURCES.append(spmi_config_cf)  


env.AddLibrary(MAIN_LIB_IMAGES, '${BUILDPATH}/Spmi', SPMI_BLD_SOURCES)

#-------------------------------------------------------------------------------
# QDSS SW Events
#-------------------------------------------------------------------------------
if 'USES_QDSS_SWE' in env:
   QDSS_IMG = ['QDSS_EN_IMG']
   events = [['SPMI_EVENT_FIRST=79', 'placeholder first spmi swevent'],
             ['SPMI_EVENT_FATAL_ERROR=80', 'spmi_fatal_error: (result %d) (file %x) (line %d)'],
             ['SPMI_EVENT_ERROR', 'spmi_error: (result %x) (file %x) (line %d)'],
             ['SPMI_EVENT_WARNING', 'spmi_warning: (file %x) (line %d)'],         
             ['SPMI_EVENT_LAST=100',     'placeholder last spmi swevent']
            ]
   env.AddSWEInfo(QDSS_IMG, events)

