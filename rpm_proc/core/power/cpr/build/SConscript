#===============================================================================
# CPR Libs
#
# GENERAL DESCRIPTION
#    CPR Build Script
#
# Copyright (c) 2015-2016 Qualcomm Technologies, Inc.
# All Rights Reserved.
# QUALCOMM Proprietary and Confidential.
#-------------------------------------------------------------------------------
#  $Header: //components/rel/rpm.bf/1.8/core/power/cpr/build/SConscript#6 $
#  $DateTime: 2018/08/10 07:09:32 $
#  $Change: 16855347 $
#===============================================================================
import os, sys, re
Import('env')
env = env.Clone()
#default vipertooth support using Starlord target specific files   
if env['MSM_ID'] in ['405']:
   env['MSM_ID'] = '660'

#-------------------------------------------------------------------------------
# Target Checks
#-------------------------------------------------------------------------------
# This check is used to build correct version of the new cpr driver depending
# on targets. Once we have PW that has all targets which supports same cpr
# implementation, this check can be skipped.
supported_cpr_targets = ['8998', '660', 'nicobar']
if env['MSM_ID'] not in supported_cpr_targets:
    env.PrintError('CPR driver not supported on this target')
    Return()

CPR_ROOT = "${BUILD_ROOT}/core/power/cpr"
TARGET_DIR  = '../target/${MSM_ID}'
GEN_DIR  = '${BUILDPATH}/target/${MSM_ID}'
CFG_FILE = env.RealPath(TARGET_DIR + '/Voltage Plan - ${MSM_ID}.xlsx')
env.VariantDir('${BUILDPATH}', CPR_ROOT, duplicate=0)

def set_image_params(image, loglevel, enableFatalAssert=1, cflags=''):
    env['CPR_LOG_LEVEL'] = loglevel
    env['CPR_LOG_ENABLE_FATAL_ASSERT'] = str(enableFatalAssert)
    env['CPR_IMAGE'] = image
    env['CPR_CFLAGS'] = cflags


if 'RPM_IMAGE' in env or env['TCFG_BID_IMAGE'] == 'RPM_PROC':
  if 'LLVM' in os.environ['ARMTOOLS'] :
    set_image_params('rpm', 'CPR_LOG_LEVEL_FATAL', cflags='-std=gnu99 ${ARM_OPT_SIZE} ${ARM_OPT_2}')
  else:
    set_image_params('rpm', 'CPR_LOG_LEVEL_FATAL', cflags='${ARMCC_STDC99_CMD} ${ARM_OPT_SIZE} ${ARM_OPT_2}')
elif 'MODEM_PROC' in env:
  if 'LLVM' in os.environ['ARMTOOLS'] :
    set_image_params('mpss', 'CPR_LOG_LEVEL_TRACE', cflags='-std=gnu99 ${ARM_OPT_SIZE} ${ARM_OPT_2}')
  else:
    set_image_params('mpss', 'CPR_LOG_LEVEL_TRACE', cflags='${ARMCC_STDC99_CMD} ${ARM_OPT_SIZE} ${ARM_OPT_2}')
elif 'PROC' in env and env['PROC'] == 'imc':
    set_image_params('imc', 'CPR_LOG_LEVEL_INFO')
else:
    env.PrintError('CPR driver not supported on this image')
    sys.exit(1)

if env['MSM_ID'] in ['8998'] and env['CPR_IMAGE'] == 'rpm':
    env['CPR_HAL_VERSION'] = 'v4'
else:
    env['CPR_HAL_VERSION'] = 'v3'

# Uses v4 stub functions in a v3 scenerio
# In a v4 scenerio we use the v4 hal functions and skip over the v3 stub functions.
if env['CPR_HAL_VERSION'] == 'v3':
    env.Append(CPPDEFINES = ['-DV3_HAL_VERSION'])

# Define macros for logging
if env['CPR_IMAGE'] == 'rpm':
    env.Append(CPPDEFINES = [
        ('CPR_IMAGE_LOG_NUM_CLOSED_LOOP_RAILS',2),
        ('CPR_IMAGE_LOG_SIZE',8),
    ])
else:
    env.Append(CPPDEFINES = [('SWEVENT(...)','')])  # remove SWEVENT for non-RPM image

#-------------------------------------------------------------------------------
# Internal depends within CoreBSP
#-------------------------------------------------------------------------------
CBSP_API = [
   'DAL',
   'DEBUGTOOLS', # CoreVerify.h
   'POWER',
   'SERVICES',
   'SYSTEMDRIVERS',
   'PMIC',
   'DEBUGTRACE',
   'MPROC',

   # needs to be last as it may contain wrong comdef.h
   'KERNEL',
]

env.RequirePublicApi(CBSP_API)
env.RequireRestrictedApi(CBSP_API)
env.RequirePublicApi(['RFA'], 'pmic')

env.PublishPrivateApi('CPR', [
    GEN_DIR,
    CPR_ROOT + '/common/hal/inc',
    CPR_ROOT + '/common/hal/${CPR_HAL_VERSION}/inc',
    CPR_ROOT + '/common/inc',
    CPR_ROOT + '/target/${MSM_ID}',
    CPR_ROOT + '/target/${MSM_ID}/hwio',
    CPR_ROOT + '/image/${CPR_IMAGE}/inc',
    CPR_ROOT + '/image/${CPR_IMAGE}/target/${MSM_ID}',
    ])

# Explicitly adding real path as scons was not able to include non-existent path for enablement.h
env.Append(CPPPATH = env.RealPath(GEN_DIR))

#-------------------------------------------------------------------------------
# Sources, libraries
#-------------------------------------------------------------------------------
def autogen(target, source, env):
    from subprocess import check_call
    args = ['python']
    args.extend([File(s).abspath for s in source])
    args.extend([File(s).abspath for s in target])
    check_call(args)


# Auto-generated files
VP_SRC     = TARGET_DIR + '/cpr_voltage_plan_${MSM_ID}.c'
GEN_VP_SRC = GEN_DIR    + '/cpr_voltage_plan_${MSM_ID}.c'

#check if XL and config files exist or else use the c files generated (especially for packed builds)
if os.path.isfile(CFG_FILE):
    # Add build command for auto-generated files
    gen_files = env.Command([VP_SRC],
                            '',
                            'python {dir}/../tools/cpr_cfg.py {img} {target} {dir}/{out}'.format(
                              img = env['CPR_IMAGE'],
                              dir = env.RealPath('.'),
                              target = env['MSM_ID'],
                              out = TARGET_DIR)
                            )
    # Scons does not detect a change in config files.
    # Build the files always to make sure a change in config file is reflected.
    env.AlwaysBuild(gen_files)

    print "configuration files exist" 

    # Copy generated files to buildpath for the variant to avoid race condition
    env.Command(GEN_VP_SRC, VP_SRC, Copy("$TARGET", "$SOURCE"))
else:
    print "configuration file does not exist, using c files"

CPR_C_SOURCES = [
    GEN_VP_SRC,
    '${BUILDPATH}/common/src/cpr.c',
    '${BUILDPATH}/common/src/cpr_rail.c',
    '${BUILDPATH}/common/src/cpr_measurements.c',
    '${BUILDPATH}/common/src/cpr_smem.c',
    '${BUILDPATH}/common/src/cpr_isr.c',
    '${BUILDPATH}/common/src/cpr_utils.c',
    '${BUILDPATH}/common/hal/${CPR_HAL_VERSION}/src/cpr_hal.c'
]

no_clean_list = [VP_SRC]

#
# Support multi-config
#
if env['MSM_ID'] in ['8998'] and env['CPR_IMAGE'] == 'mpss':
    CFG_FILE2   = env.RealPath(TARGET_DIR + '/Voltage Plan - 8997.xlsx')
    VP_SRC2     = TARGET_DIR + '/cpr_voltage_plan_8997.c'
    GEN_VP_SRC2 = GEN_DIR    + '/cpr_voltage_plan_8997.c'

    #check if XL and config files exist or else use the c files generated (especially for packed builds)
    if os.path.isfile(CFG_FILE2):
        gen_files2 = env.Command([VP_SRC2],
                                '',
                                'python {dir}/../tools/cpr_cfg.py {img} {target} {dir}/{out} {dir}/{out} {dir}/{out}'.format(
                                  img = env['CPR_IMAGE'],
                                  dir = env.RealPath('.'),
                                  target = '8997',
                                  out = TARGET_DIR,
                                  )
                                )

        # Scons does not detect a change in config files.
        # Build the files always to make sure a change in config file is reflected.
        env.AlwaysBuild(gen_files2)
        print "configuration files exist" 

        # Copy generated files to buildpath for the variant to avoid race condition
        env.Command(GEN_VP_SRC2, VP_SRC2, Copy("$TARGET", "$SOURCE"))
    else:
        print "configuration file does not exist, using c files"

    CPR_C_SOURCES.append(GEN_VP_SRC2)
    no_clean_list.append(VP_SRC2)

if env['MSM_ID'] in ['660'] and env['CPR_IMAGE'] == 'rpm':
    CFG_FILE2   = env.RealPath(TARGET_DIR + '/Voltage Plan - 630.xlsx')
    VP_SRC2     = TARGET_DIR + '/cpr_voltage_plan_630.c'
    GEN_VP_SRC2 = GEN_DIR    + '/cpr_voltage_plan_630.c'

    #check if XL and config files exist or else use the c files generated (especially for packed builds)
    if os.path.isfile(CFG_FILE2):
        gen_files2 = env.Command([VP_SRC2],
                                '',
                                'python {dir}/../tools/cpr_cfg.py {img} {target} {dir}/{out} {dir}/{out}'.format(
                                  img = env['CPR_IMAGE'],
                                  dir = env.RealPath('.'),
                                  target = '630',
                                  out = TARGET_DIR,
                                  )
                                )

        # Scons does not detect a change in config files.
        # Build the files always to make sure a change in config file is reflected.
        env.AlwaysBuild(gen_files2)
        print "configuration files exist" 

        # Copy generated files to buildpath for the variant to avoid race condition
        env.Command(GEN_VP_SRC2, VP_SRC2, Copy("$TARGET", "$SOURCE"))
    else:
        print "configuration file does not exist, using c files"

    CPR_C_SOURCES.append(GEN_VP_SRC2)
    no_clean_list.append(VP_SRC2)

CPR_CPP_SOURCES = [
]

for path in ['/image/${CPR_IMAGE}/src', '/image/${CPR_IMAGE}/target/${MSM_ID}']:
    CPR_C_SOURCES.extend(  (re.sub(r'\\','/',f).replace(env.subst(CPR_ROOT), '${BUILDPATH}') for f in env.FindFiles('*.c',   CPR_ROOT + path)))
    CPR_CPP_SOURCES.extend((re.sub(r'\\','/',f).replace(env.subst(CPR_ROOT), '${BUILDPATH}') for f in env.FindFiles('*.cpp', CPR_ROOT + path)))

#to prevent cpr_voltage_plan_${MSM_ID}.c from getting removed by clean build command
env.NoClean(no_clean_list)

#-------------------------------------------------------------------------------
# Add Libraries to image
#-------------------------------------------------------------------------------
if env['CPR_IMAGE'] == 'mpss':
    IMAGES=['MODEM_IMAGE', 'CBSP_MODEM_IMAGE', 'QDSP6_SW_IMAGE', 'CBSP_QDSP6_SW_IMAGE']
else:
    IMAGES=['CORE_RPM', 'IMC_IMAGE']

env.Append(CCFLAGS = " -DCPR_LOG_COMPILE_LEVEL=" + env['CPR_LOG_LEVEL'])
env.Append(CCFLAGS = " -DCPR_LOG_FATAL_ASSERT_ENABLED=" + env['CPR_LOG_ENABLE_FATAL_ASSERT'])

cEnv = env.Clone()
cEnv.Append(CCFLAGS = ' ' + env['CPR_CFLAGS'])

env.AddLibrary(IMAGES,'${BUILDPATH}/cpr_cpp.lib', CPR_CPP_SOURCES)
cEnv.AddLibrary(IMAGES,'${BUILDPATH}/cpr_c.lib', CPR_C_SOURCES)


#-------------------------------------------------------------------------------
# Pack out files
#-------------------------------------------------------------------------------
if env['CPR_IMAGE'] == 'mpss':
    ALL_TARGETS_FILES       = env.FindFiles(['*'], CPR_ROOT + '/target')
    ALL_IMAGE_TARGETS_FILES = env.FindFiles(['*'], CPR_ROOT + '/image/mpss/target')
    THIS_TARGET_FILES       = env.FindFiles(['*'], CPR_ROOT + '/target/${MSM_ID}')
    THIS_IMAGE_TARGET_FILES = env.FindFiles(['*'], CPR_ROOT + '/image/mpss/target/${MSM_ID}')
    THIS_TARGET_CFG_FILE    = env.FindFiles(['*.xlsx', '*.py'], CPR_ROOT + '/target/${MSM_ID}')
    TOOL_FILES              = env.FindFiles(['*'], CPR_ROOT + '/tools')

    # Pack out other target files
    PACK_OUT_FILES          = list((set(ALL_TARGETS_FILES) | set(ALL_IMAGE_TARGETS_FILES)) - set(THIS_TARGET_FILES) - set(THIS_IMAGE_TARGET_FILES))
    # Pack out Voltage Plan and tools
    PACK_OUT_FILES.extend(list(THIS_TARGET_CFG_FILE))
    PACK_OUT_FILES.extend(list(TOOL_FILES))

    env.CleanPack(['CORE_MODEM'], PACK_OUT_FILES)

#-----------------------------------------------------------------------------
# Register with RCINIT framework so that it can call our init function.
#-----------------------------------------------------------------------------
if 'USES_RCINIT' in env:
    if env['CPR_IMAGE'] == 'mpss':
        RCINIT_IMG = ['CORE_MODEM', 'CORE_QDSP6_SW']
        env.AddRCInitFunc(
            RCINIT_IMG,
            {
                'sequence_group'             : 'RCINIT_GROUP_0',
                'init_name'                  : 'CPR',
                'init_function'              : 'cpr_init',
                'dependencies'               : ['clk_regime','dalsys'], # TODO: Delete clock dependency when we don't need clock API
                                                                        # since Clock driver will vote for TURBO during init
                                                                        # and it will disturb settling.
                'policy_optin'               : ['default', 'ftm', ],
            })
        env.AddRCInitFunc(
            RCINIT_IMG,
            {
                'sequence_group'             : 'RCINIT_GROUP_0',
                'init_name'                  : 'CPR_warmup',
                'init_function'              : 'cpr_image_warmup_init',
                'dependencies'               : ['CPR','vcs_cpr'],
                'policy_optin'               : ['default', 'ftm', ],
            })

#-------------------------------------------------------------------------------
# RPM CPR Event Logging
#-------------------------------------------------------------------------------
if 'USES_QDSS_SWE' in env:
    if env['CPR_IMAGE'] == 'rpm':
        QDSS_IMG = ['QDSS_EN_IMG']
        events = [
            ['CPR_EVT_INIT=670', 'cpr_init (chip_version 0x%x) (foundry 0x%x) (cpr_rev 0x%x)'],

            ['CPR_EVT_RAIL_INIT=671', 'cpr_rail_init (rail_mode 0x%0.8x) (global_ceiling_uv %d) (global_floor_uv %d)'],

            ['CPR_EVT_RAIL_INIT_OPEN_LOOP=672', 'cpr_rail_init_open_loop (rail_mode 0x%0.8x) (ceiling_uv %d) (floor_uv %d)'],

            ['CPR_EVT_RAIL_INIT_SMEM=673', 'cpr_rail_init_smem (rail_mode 0x%0.8x) (ceiling_uv %d) (floor_uv %d) (total_margin_mv %d)'],

            ['CPR_EVT_RAIL_ENABLE=674', 'cpr_rail_enable (rail_mode 0x%0.8x) (current_uv %d) (up_down_counts 0x%0.8x)'],

            ['CPR_EVT_RAIL_ISR=675', 'cpr_rail_isr (rail_mode 0x%0.8x) (recommendation_uv %d) (up_down_ints 0x%0.8x)'],

            ['CPR_EVT_HAL_SET_TEMP_BANDS=676', 'cpr_hal_set_temp_bands (controller 0x%0.8x) (mode %d) (temp_bands 0x%0.8x) (temp_sensor_data 0x%0.8x)'],

            ['CPR_EVT_RAIL_DISABLE_MODE=677', 'cpr_rail_disable_mode (rail_mode 0x%0.8x) (use_openloop_mode %d) (use_closedloop_mode %d)'],

            ['CPR_EVT_LAST=689', 'NULL'],
        ]
        env.AddSWEInfo(QDSS_IMG, events)

